WARNING: --write-unchanged-files/-W implies -w.
lib2to3.main: Output in 'ipkissat3' will mirror the input directory 'ipkiss24' layout.
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: No changes to ipkiss24\dependencies\__init__.py
RefactoringTool: Writing converted ipkiss24\dependencies\__init__.py to ipkissat3\dependencies\__init__.py.
RefactoringTool: No changes to ipkiss24\dependencies\bitarray_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\bitarray_wrapper.py to ipkissat3\dependencies\bitarray_wrapper.py.
RefactoringTool: Refactored ipkiss24\dependencies\caphe_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\caphe_wrapper.py to ipkissat3\dependencies\caphe_wrapper.py.
RefactoringTool: No changes to ipkiss24\dependencies\log.py
RefactoringTool: Writing converted ipkiss24\dependencies\log.py to ipkissat3\dependencies\log.py.
RefactoringTool: Refactored ipkiss24\dependencies\matplotlib_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\matplotlib_wrapper.py to ipkissat3\dependencies\matplotlib_wrapper.py.
RefactoringTool: No changes to ipkiss24\dependencies\mayavi_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\mayavi_wrapper.py to ipkissat3\dependencies\mayavi_wrapper.py.
RefactoringTool: No changes to ipkiss24\dependencies\meep_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\meep_wrapper.py to ipkissat3\dependencies\meep_wrapper.py.
RefactoringTool: No changes to ipkiss24\dependencies\pil_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\pil_wrapper.py to ipkissat3\dependencies\pil_wrapper.py.
RefactoringTool: Refactored ipkiss24\dependencies\povray_wrapper.py
--- ipkiss24\dependencies\caphe_wrapper.py	(original)
+++ ipkiss24\dependencies\caphe_wrapper.py	(refactored)
@@ -21,8 +21,8 @@
 
 try:
     from caphe import *
-except ImportError, e:
-    print "*************************** DEPENDENCY NOT FOUND **************************************************************************************** "
-    print "**** MODULE CAPHE COULD NOT BE FOUND, PLEASE INSTALL IT                                                                             *** "    
-    print "***************************************************************************************************************************************** "
+except ImportError as e:
+    print("*************************** DEPENDENCY NOT FOUND **************************************************************************************** ")
+    print("**** MODULE CAPHE COULD NOT BE FOUND, PLEASE INSTALL IT                                                                             *** ")    
+    print("***************************************************************************************************************************************** ")
     
--- ipkiss24\dependencies\matplotlib_wrapper.py	(original)
+++ ipkiss24\dependencies\matplotlib_wrapper.py	(refactored)
@@ -19,7 +19,7 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-import Tkinter as Tk
+import tkinter as Tk
 from sys import stderr
 try:
     import matplotlib as matplotlib
@@ -44,12 +44,12 @@
     
     pyplot.ion()
 
-except ImportError, e:
-    print >> stderr, "*************************** DEPENDENCY NOT FOUND **************************************************************************************** "
-    print >> stderr, "**** MODULE MATPLOTLIB COULD NOT BE FOUND, PLEASE INSTALL IT                                                                          *** "
-    print >> stderr, "**** On Windows, download from :                                                                                                      *** "
-    print >> stderr, "****         http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-0.99.3/matplotlib-0.99.3.win32-py2.6.exe/download *** "
-    print >> stderr, "**** On Linux : sudo apt-get install python-matplotlib                                                                                *** "
-    print >> stderr, "***************************************************************************************************************************************** "
+except ImportError as e:
+    print("*************************** DEPENDENCY NOT FOUND **************************************************************************************** ", file=stderr)
+    print("**** MODULE MATPLOTLIB COULD NOT BE FOUND, PLEASE INSTALL IT                                                                          *** ", file=stderr)
+    print("**** On Windows, download from :                                                                                                      *** ", file=stderr)
+    print("****         http://sourceforge.net/projects/matplotlib/files/matplotlib/matplotlib-0.99.3/matplotlib-0.99.3.win32-py2.6.exe/download *** ", file=stderr)
+    print("**** On Linux : sudo apt-get install python-matplotlib                                                                                *** ", file=stderr)
+    print("***************************************************************************************************************************************** ", file=stderr)
     
     
--- ipkiss24\dependencies\povray_wrapper.py	(original)
+++ ipkiss24\dependencies\povray_wrapper.py	(refactored)
@@ -23,10 +23,10 @@
 
 class PovrayFile:
   def __init__(self,fnam="out.pov",*items):
-    self.file = open(fnam,"w")
+    self.file = open(fnam, "w")
     self.__indent = 0
     self.write(*items)
-  def include(self,name):
+  def include(self, name):
     self.writeln( '#include "%s"'%name )
     self.writeln()
   def indent(self):
@@ -45,7 +45,7 @@
       self.writeln( )
   def write(self,*items):
     for item in items:
-      if type(item) == str:
+      if isinstance(item, str):
         self.include(item)
       elif isinstance(item, list):
         for e in item:
@@ -66,9 +66,9 @@
     return "<%s>"%(", ".join([str(x)for x in self.v]))
   def __repr__(self):
     return "Vector(%s)"%self.v
-  def __mul__(self,other):
+  def __mul__(self, other):
     return Vector( [r*other for r in self.v] )
-  def __rmul__(self,other):
+  def __rmul__(self, other):
     return Vector( [r*other for r in self.v] )
 
 class Vector_List:
@@ -82,7 +82,7 @@
     self.name = name
     args=list(args)
     for i in range(len(args)):
-      if type(args[i]) == tuple or type(args[i]) == list:
+      if isinstance(args[i], tuple) or isinstance(args[i], list):
         args[i] = Vector(args[i])
     self.args = args
     self.opts = opts
@@ -96,30 +96,30 @@
     if self.args:
       file.writeln( ", ".join([str(arg) for arg in self.args]) )
     for opt in self.opts:
-      if hasattr(opt,"write"):
+      if hasattr(opt, "write"):
         opt.write(file)
       else:
         file.writeln( str(opt) )
-    for key,val in self.kwargs.items():
-      if type(val)==tuple or type(val)==list:
+    for key, val in list(self.kwargs.items()):
+      if isinstance(val, tuple) or isinstance(val, list):
         val = Vector(*val)
-        file.writeln( "%s %s"%(key,val) )
+        file.writeln( "%s %s"%(key, val) )
       else:
-        file.writeln( "%s %s"%(key,val) )
+        file.writeln( "%s %s"%(key, val) )
     if self.name != "":
       file.block_end()
-  def __setattr__(self,name,val):
+  def __setattr__(self, name, val):
     self.__dict__[name]=val
-    if name not in ["kwargs","args","opts","name"]:
+    if name not in ["kwargs", "args", "opts", "name"]:
       self.__dict__["kwargs"][name]=val
-  def __setitem__(self,i,val):
+  def __setitem__(self, i, val):
     if i < len(self.args):
       self.args[i] = val
     else:
       i += len(args)
       if i < len(self.opts):
         self.opts[i] = val
-  def __getitem__(self,i,val):
+  def __getitem__(self, i, val):
     if i < len(self.args):
       return self.args[i]
     else:
@@ -130,69 +130,69 @@
 
 class Interior(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"interior",(),opts,**kwargs)
+    Item.__init__(self, "interior", (), opts, **kwargs)
 
 class Texture(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"texture",(),opts,**kwargs)
+    Item.__init__(self, "texture", (), opts, **kwargs)
 
 
 class Pigment(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"pigment",(),opts,**kwargs)
+    Item.__init__(self, "pigment", (), opts, **kwargs)
 
 class Finish(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"finish",(),opts,**kwargs)
+    Item.__init__(self, "finish", (), opts, **kwargs)
 
 class Normal(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"normal",(),opts,**kwargs)
+    Item.__init__(self, "normal", (), opts, **kwargs)
 
 class Camera(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"camera",(),opts,**kwargs)
+    Item.__init__(self, "camera", (), opts, **kwargs)
 
 class LightSource(Item):
   def __init__(self,v,*opts,**kwargs):
-    Item.__init__(self,"light_source",(Vector(v),),opts,**kwargs)
+    Item.__init__(self, "light_source", (Vector(v),), opts, **kwargs)
 
 class Background(Item):
   def __init__(self,*opts,**kwargs):
-    Item.__init__(self,"background",(),opts,**kwargs)
+    Item.__init__(self, "background", (), opts, **kwargs)
 
 class Box(Item):
   def __init__(self,v1,v2,*opts,**kwargs):
     #self.v1 = Vector(v1)
     #self.v2 = Vector(v2)
-    Item.__init__(self,"box",(v1,v2),opts,**kwargs)
+    Item.__init__(self, "box", (v1, v2), opts, **kwargs)
 
 class Cylinder(Item):
   def __init__(self,v1,v2,r,*opts,**kwargs):
     " opts: open "
-    Item.__init__(self,"cylinder",(v1,v2,r),opts,**kwargs)
+    Item.__init__(self, "cylinder", (v1, v2, r), opts, **kwargs)RefactoringTool: Writing converted ipkiss24\dependencies\povray_wrapper.py to ipkissat3\dependencies\povray_wrapper.py.
RefactoringTool: Refactored ipkiss24\dependencies\shapely_wrapper.py

 
 class Plane(Item):
   def __init__(self,v,r,*opts,**kwargs):
-    Item.__init__(self,"plane",(v,r),opts,**kwargs)
+    Item.__init__(self, "plane", (v, r), opts, **kwargs)
 
 class Torus(Item):
   def __init__(self,r1,r2,*opts,**kwargs):
-    Item.__init__(self,"torus",(r1,r2),opts,**kwargs)
+    Item.__init__(self, "torus", (r1, r2), opts, **kwargs)
 
 class Cone(Item):
   def __init__(self,v1,r1,v2,r2,*opts,**kwargs):
     " opts: open "
-    Item.__init__(self,"cone", (v1,r1,v2,r2),*opts,**kwargs)
+    Item.__init__(self, "cone", (v1, r1, v2, r2), *opts, **kwargs)
 
 class Sphere(Item):
   def __init__(self,v,r,*opts,**kwargs):
-    Item.__init__(self,"sphere",(v,r),*opts,**kwargs)
+    Item.__init__(self, "sphere", (v, r), *opts, **kwargs)
 
 
 class Prism(Item):
   def __init__(self,point_list , heights = (0, 1), prism_item = "linear_spline linear_sweep", opts = [],**kwargs):
     options = [heights[0], heights[1], len(point_list), Vector_List(point_list)]
     options.extend(opts)
-    Item.__init__(self,"prism", [prism_item], options,**kwargs)
+    Item.__init__(self, "prism", [prism_item], options, **kwargs)
 
--- ipkiss24\dependencies\shapely_wrapper.py	(original)
+++ ipkiss24\dependencies\shapely_wrapper.py	(refactored)
@@ -32,30 +32,30 @@
     from shapely.geometry.collection import GeometryCollection
     from shapely.geos import TopologicalError
 
-except ImportError, e:
-    print >> stderr, "*************************** DEPENDENCY NOT FOUND **************************************************************************************** "
-    print >> stderr, "**** MODULE SHAPELY COULD NOT BE FOUND, PLEASE INSTALL IT                                                                             *** "
-    print >> stderr, "**** On Windows, download from :                                                                                                      *** "
-    print >> stderr, "****         http://gispython.org/dist/Shapely-1.2.1.win32.exe                                                                        *** "
-    print >> stderr, "**** On Linux :                                                                                                                       *** "
-    print >> stderr, "****         install from source (version 1.2.1 needed) :                                                                             *** "
-    print >> stderr, "****         http://pypi.python.org/packages/source/S/Shapely/Shapely-1.2.1.tar.gz#md5=da54c772443bd0398aa588e0f3e9c190               *** "
-    print >> stderr, "***************************************************************************************************************************************** "
+except ImportError as e:
+    print("*************************** DEPENDENCY NOT FOUND **************************************************************************************** ", file=stderr)
+    print("**** MODULE SHAPELY COULD NOT BE FOUND, PLEASE INSTALL IT                                                                             *** ", file=stderr)
+    print("**** On Windows, download from :                                                                                                      *** ", file=stderr)
+    print("****         http://gispython.org/dist/Shapely-1.2.1.win32.exe                                                                        *** ", file=stderr)
+    print("**** On Linux :                                                                                                                       *** ", file=stderr)
+    print("****         install from source (version 1.2.1 needed) :                                                                             *** ", file=stderr)
+    print("****         http://pypi.python.org/packages/source/S/Shapely/Shapely-1.2.1.tar.gz#md5=da54c772443bd0398aa588e0f3e9c190               *** ", file=stderr)
+    print("***************************************************************************************************************************************** ", file=stderr)
 
 
 
 try:
     from descartes import PolygonPatch
 
-except ImportError, e:
-    print >> stderr, "*************************** DEPENDENCY NOT FOUND **************************************************************************************** "
-    print >> stderr, "**** MODULE DESCARTES COULD NOT BE FOUND, PLEASE INSTALL IT                                                                           *** "
-    print >> stderr, "**** On both Windows and Linux, install from source as follows:                                                                       *** "  
-    print >> stderr, "****         * download from : http://pypi.python.org/packages/source/d/descartes/descartes-1.0.tar.gz                                *** "                                   
-    print >> stderr, "****         * extract it. On Windows, you can use 7-zip (available at www.7-zip.org)                                                 *** "
-    print >> stderr, "****         * run the following command in the directory where you extracted the file :                                              *** "                                                                             
-    print >> stderr, "****                    python setup.py install                                                                                       *** "
-    print >> stderr, "***************************************************************************************************************************************** "
+except ImportError as e:
+    print("*************************** DEPENDENCY NOT FOUND **************************************************************************************** ", file=stderr)
+    print("**** MODULE DESCARTES COULD NOT BE FOUND, PLEASE INSTALL IT                                                                           *** ", file=stderr)
+    print("**** On both Windows and Linux, install from source as follows:                                                                       *** ", file=stderr)  
+    print("****         * download from : http://pypi.python.org/packages/source/d/descartes/descartes-1.0.tar.gz                                *** ", file=stderr)                                   
+    print("****         * extract it. On Windows, you can use 7-zip (available at www.7-zip.org)                                                 *** ", file=stderr)
+    print("****         * run the following command in the directory where you extracted the file :                                              *** ", file=stderr)                                                                             
+    print("****                    python setup.py install                                                                                       *** ", file=stderr)
+    print("***************************************************************************************************************************************** ", file=stderr)
 
 
 
@@ -63,7 +63,7 @@
     from dependencies.matplotlib_wrapper import pyplot
     fig = pyplot.gcf()
     fig.clear()
-    ax = fig.add_subplot(1,1,1)
+    ax = fig.add_subplot(1, 1, 1)
     if (not polygon.is_empty):
         if isinstance(polygon, Polygon):
             patch = PolygonPatch(polygon, fc='b')
@@ -107,7 +107,7 @@
                     interior_start_point = interior.coords[0]
                     result_points.append(interior_start_point)
                     interior_start_point_coord2 = Coord2(interior_start_point)
-                    dist = sys.maxint
+                    dist = sys.maxsize
                     exterior_point_index = -1
                     for exterior_point in g_exterior_coords_list:
                         exterior_point_index = exterior_point_index + 1
@@ -167,7 +167,7 @@
             else:
                 self.georep = self.georep.union(polygon)
         else:
-            LOG.warning("Tried to add a polygon with %i points to the PolygonCollection: %s\nThe polygon is ignored." %(len(pts),str(pts)))    RefactoringTool: Writing converted ipkiss24\dependencies\shapely_wrapper.py to ipkissat3\dependencies\shapely_wrapper.py.
RefactoringTool: Refactored ipkiss24\dependencies\tvtk_wrapper.py
RefactoringTool: Writing converted ipkiss24\dependencies\tvtk_wrapper.py to ipkissat3\dependencies\tvtk_wrapper.py.
RefactoringTool: No changes to ipkiss24\descartes\__init__.py
RefactoringTool: Writing converted ipkiss24\descartes\__init__.py to ipkissat3\descartes\__init__.py.
RefactoringTool: No changes to ipkiss24\descartes\patch.py
RefactoringTool: Writing converted ipkiss24\descartes\patch.py to ipkissat3\descartes\patch.py.
RefactoringTool: No changes to ipkiss24\genericpdk\__init__.py
RefactoringTool: Writing converted ipkiss24\genericpdk\__init__.py to ipkissat3\genericpdk\__init__.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\__init__.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\__init__.py to ipkissat3\genericpdk\library\__init__.py.
RefactoringTool: Refactored ipkiss24\genericpdk\library\fibcoup.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\fibcoup.py to ipkissat3\genericpdk\library\fibcoup.py.
RefactoringTool: Refactored ipkiss24\genericpdk\library\logos.py

+            LOG.warning("Tried to add a polygon with %i points to the PolygonCollection: %s\nThe polygon is ignored." %(len(pts), str(pts)))    
 
     def get_georep_list(self):
         """Return a list with all elements in the geometrical representation """	
@@ -189,7 +189,7 @@
         ne = list(self.size_info.north_east)
         se = list(self.size_info.south_east)
         sw = list(self.size_info.south_west)	    
-        p = Polygon([nw,ne,se,sw,nw])
+        p = Polygon([nw, ne, se, sw, nw])
         return p
 
     def is_empty(self):
@@ -270,7 +270,7 @@
             p2 = self.__do_cascaded_union__(my_georep)	    
             try:
                 diff_p = p2.difference(p1)    
-            except TopologicalError, err:
+            except TopologicalError as err:
                 if isinstance(p1, MultiPolygon):
                     diffs = []
                     for p1pol in p1.geoms:
--- ipkiss24\dependencies\tvtk_wrapper.py	(original)
+++ ipkiss24\dependencies\tvtk_wrapper.py	(refactored)
@@ -23,11 +23,11 @@
 try:
     from tvtk.api import tvtk
 
-except ImportError, e:
-    print >> stderr, "*************************** DEPENDENCY NOT FOUND **************************************************************************************** "
-    print >> stderr, "**** MODULE TVTK COULD NOT BE FOUND, PLEASE INSTALL IT                                                                                *** "
-    print >> stderr, "****                                                                                                                                  *** "
-    print >> stderr, "****     it is part of the Entought Python distribution (you might need to install a more recent version)                             *** "
-    print >> stderr, "***************************************************************************************************************************************** "
+except ImportError as e:
+    print("*************************** DEPENDENCY NOT FOUND **************************************************************************************** ", file=stderr)
+    print("**** MODULE TVTK COULD NOT BE FOUND, PLEASE INSTALL IT                                                                                *** ", file=stderr)
+    print("****                                                                                                                                  *** ", file=stderr)
+    print("****     it is part of the Entought Python distribution (you might need to install a more recent version)                             *** ", file=stderr)
+    print("***************************************************************************************************************************************** ", file=stderr)
     
     
--- ipkiss24\genericpdk\library\fibcoup.py	(original)
+++ ipkiss24\genericpdk\library\fibcoup.py	(refactored)
@@ -34,7 +34,7 @@
 def STANDARD_GRATING_1550_TE(process = TECH.PROCESS.FC):
     wg_def = WgElDefinition(wg_width = std_lin_grating_wg_width)
     G = _ULG(name = "std_grating_1550",
-                           origin = (0.0,0.0),
+                           origin = (0.0, 0.0),
                            period = std1550_grating_period, 
                            line_width = std1550_grating_trench, 
                            n_o_periods = std1550_grating_n_o_periods, 
@@ -54,7 +54,7 @@
 def STANDARD_GRATING_1300_TE(process = TECH.PROCESS.FC):
     wg_def = WgElDefinition(wg_width = std_lin_grating_wg_width)
     return _ULG(name = "std_grating_1300",
-                origin = (0.0,0.0),
+                origin = (0.0, 0.0),
                 period = std1300_grating_period, 
                 line_width = std1300_grating_trench, 
                 n_o_periods = std1300_grating_n_o_periods, 
@@ -73,10 +73,10 @@
 def STANDARD_GRATING_1550_TM(process = TECH.PROCESS.FC):
     wg_def = WgElDefinition(wg_width = std_lin_grating_wg_width) 
     return _ULG(name = "std_grating_TM_1550",
-                origin = (0.0,0.0),
+                origin = (0.0, 0.0),
                 period = std1550tm_grating_period, 
                 line_width = std1550tm_grating_trench, 
                 n_o_periods = std1550tm_grating_n_o_periods, 
-                wg_definition = wg_def ,
+                wg_definition = wg_def,
                 process = process )
 
--- ipkiss24\genericpdk\library\logos.py	(original)
+++ ipkiss24\genericpdk\library\logos.py	(refactored)
@@ -35,18 +35,18 @@
           
     def define_elements(self, elems):        
         logo_size = (1.0, 1.1)
-        scale = min([self.size[0]/logo_size[0],self.size[1]/logo_size[1]])
+        scale = min([self.size[0]/logo_size[0], self.size[1]/logo_size[1]])
         line_width = scale * 0.05
-        elems += PolygonText(self.layer,'INTEC', (scale/2, 0.0), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1, scale * 0.19)
-        elems += Line(self.layer, (0.0,0.3*scale), (scale, 0.3 * scale), line_width, PATH_TYPE_ROUNDED)
-        elems += Line(self.layer, (0.0,0.4*scale), (scale, 0.4 * scale), line_width, PATH_TYPE_ROUNDED)
-        elems += Line(self.layer, (0.0,0.5*scale), (0.4 * scale, 0.5 * scale), line_width, PATH_TYPE_ROUNDED)
-        elems += Line(self.layer, (0.6 * scale ,0.5*scale), (scale, 0.5 * scale), line_width, PATH_TYPE_ROUNDED)
-        elems += ArcPath(self.layer, (0.5 * scale ,0.6 * scale), 0.1 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
-        elems += ArcPath(self.layer, (0.5 * scale ,0.6 * scale), 0.2 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
-        elems += ArcPath(self.layer, (0.5 * scale ,0.6 * scale), 0.3 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
-        elems += ArcPath(self.layer, (0.5 * scale ,0.6 * scale), 0.4 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
-        elems += ArcPath(self.layer, (0.5 * scale ,0.6 * scale), 0.5 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
+        elems += PolygonText(self.layer, 'INTEC', (scale/2, 0.0), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1, scale * 0.19)
+        elems += Line(self.layer, (0.0, 0.3*scale), (scale, 0.3 * scale), line_width, PATH_TYPE_ROUNDED)
+        elems += Line(self.layer, (0.0, 0.4*scale), (scale, 0.4 * scale), line_width, PATH_TYPE_ROUNDED)
+        elems += Line(self.layer, (0.0, 0.5*scale), (0.4 * scale, 0.5 * scale), line_width, PATH_TYPE_ROUNDED)
+        elems += Line(self.layer, (0.6 * scale, 0.5*scale), (scale, 0.5 * scale), line_width, PATH_TYPE_ROUNDED)
+        elems += ArcPath(self.layer, (0.5 * scale, 0.6 * scale), 0.1 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
+        elems += ArcPath(self.layer, (0.5 * scale, 0.6 * scale), 0.2 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
+        elems += ArcPath(self.layer, (0.5 * scale, 0.6 * scale), 0.3 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
+        elems += ArcPath(self.layer, (0.5 * scale, 0.6 * scale), 0.4 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
+        elems += ArcPath(self.layer, (0.5 * scale, 0.6 * scale), 0.5 * scale, line_width, 0.0, 180.0, 10.0, PATH_TYPE_ROUNDED)
         return elems
     
 
@@ -55,23 +55,23 @@
 
     def define_elements(self, elems):       
         logo_size = (1.0, 1.05)
-        scale = min([self.size[0]/logo_size[0],self.size[1]/logo_size[1]])
+        scale = min([self.size[0]/logo_size[0], self.size[1]/logo_size[1]])
         line_width = scale * 0.025
-        elems += PolygonText(self.layer,'UNIVERSITEIT', (scale/2, scale* 0.25), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1,  scale * 0.12)
-        elems += PolygonText(self.layer,'GENT', (scale/2, scale*  0.05), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1,  scale * 0.12)
-        elems += Line(self.layer, (0.0,0.0), (scale, 0.0), line_width)
-        elems += Line(self.layer, (0.15*scale,0.45*scale), (0.85*scale, 0.45 * scale), line_width)
-        elems += Line(self.layer, (0.18*scale,0.5*scale), (0.82*scale, 0.5 * scale), line_width)
-        elems += Line(self.layer, (0.15*scale,0.85*scale), (0.85*scale, 0.85 * scale), line_width)RefactoringTool: Writing converted ipkiss24\genericpdk\library\logos.py to ipkissat3\genericpdk\library\logos.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\constants\__init__.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\constants\__init__.py to ipkissat3\genericpdk\library\constants\__init__.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\constants\mathematics.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\constants\mathematics.py to ipkissat3\genericpdk\library\constants\mathematics.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\constants\physical.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\constants\physical.py to ipkissat3\genericpdk\library\constants\physical.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\constants\units.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\constants\units.py to ipkissat3\genericpdk\library\constants\units.py.
RefactoringTool: No changes to ipkiss24\genericpdk\library\io\__init__.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\io\__init__.py to ipkissat3\genericpdk\library\io\__init__.py.
RefactoringTool: Refactored ipkiss24\genericpdk\library\io\column.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\io\column.py to ipkissat3\genericpdk\library\io\column.py.
RefactoringTool: Refactored ipkiss24\genericpdk\library\io\constants.py
RefactoringTool: Writing converted ipkiss24\genericpdk\library\io\constants.py to ipkissat3\genericpdk\library\io\constants.py.
RefactoringTool: No changes to ipkiss24\genericpdk\materials\__init__.py
RefactoringTool: Writing converted ipkiss24\genericpdk\materials\__init__.py to ipkissat3\genericpdk\materials\__init__.py.
RefactoringTool: Refactored ipkiss24\genericpdk\materials\materials.py

-        elems += Line(self.layer, (0.18*scale,0.8*scale), (0.82*scale, 0.8 * scale), line_width)
-        elems += Path(self.layer, [(0.14*scale,0.9*scale),(scale/2.0,1.05*scale),(0.86*scale, 0.9 * scale)], line_width)
+        elems += PolygonText(self.layer, 'UNIVERSITEIT', (scale/2, scale* 0.25), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1,  scale * 0.12)
+        elems += PolygonText(self.layer, 'GENT', (scale/2, scale*  0.05), (TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM), 1,  scale * 0.12)
+        elems += Line(self.layer, (0.0, 0.0), (scale, 0.0), line_width)
+        elems += Line(self.layer, (0.15*scale, 0.45*scale), (0.85*scale, 0.45 * scale), line_width)
+        elems += Line(self.layer, (0.18*scale, 0.5*scale), (0.82*scale, 0.5 * scale), line_width)
+        elems += Line(self.layer, (0.15*scale, 0.85*scale), (0.85*scale, 0.85 * scale), line_width)
+        elems += Line(self.layer, (0.18*scale, 0.8*scale), (0.82*scale, 0.8 * scale), line_width)
+        elems += Path(self.layer, [(0.14*scale, 0.9*scale), (scale/2.0, 1.05*scale), (0.86*scale, 0.9 * scale)], line_width)
         elems += Boundary(self.layer, [(0.20 * scale, 0.88*scale), (0.8*scale, 0.88 * scale), (0.8*scale, 0.89*scale), (scale/2.0, 1.0* scale), (0.2 * scale, 0.89 * scale), (0.20 * scale, 0.88 * scale)])
-        elems += Wedge(self.layer, (scale * 0.25,scale * 0.53), (scale * 0.25, scale * 0.77), scale * 0.06, scale * 0.04)
-        elems += Wedge(self.layer, (scale * 0.35,scale * 0.53), (scale * 0.35, scale * 0.77), scale * 0.06, scale * 0.04)
-        elems += Wedge(self.layer, (scale * 0.45,scale * 0.53), (scale * 0.45, scale * 0.77), scale * 0.06, scale * 0.04)
-        elems += Wedge(self.layer, (scale * 0.55,scale * 0.53), (scale * 0.55, scale * 0.77), scale * 0.06, scale * 0.04)
-        elems += Wedge(self.layer, (scale * 0.65,scale * 0.53), (scale * 0.65, scale * 0.77), scale * 0.06, scale * 0.04)
-        elems += Wedge(self.layer, (scale * 0.75,scale * 0.53), (scale * 0.75, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.25, scale * 0.53), (scale * 0.25, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.35, scale * 0.53), (scale * 0.35, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.45, scale * 0.53), (scale * 0.45, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.55, scale * 0.53), (scale * 0.55, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.65, scale * 0.53), (scale * 0.65, scale * 0.77), scale * 0.06, scale * 0.04)
+        elems += Wedge(self.layer, (scale * 0.75, scale * 0.53), (scale * 0.75, scale * 0.77), scale * 0.06, scale * 0.04)
         return elems
 
 class ImecLogo(Logo):
@@ -79,7 +79,7 @@
         
     def define_elements(self, elems):       
         logo_size = (112.0, 100.0)
-        scale = min([self.size[0]/logo_size[0],self.size[1]/logo_size[1]])
+        scale = min([self.size[0]/logo_size[0], self.size[1]/logo_size[1]])
         line_width = scale * 0.1
         # first ellipse
         sh1 = ShapeEllipseArc(center=(0.0, 0.0), box_size=(88.8, 57.2), start_angle=98.3, end_angle=377)
@@ -119,7 +119,7 @@
         sh1 += sh1[0]
         elems += Boundary(self.layer, Magnification((0.0, 0.0), scale)(sh1))
 
-        elems += PolygonText(self.layer,'IMEC', (5 * scale, scale* 64.0), (TEXT_ALIGN_LEFT, TEXT_ALIGN_MIDDLE), 1,  scale * 20.0)
+        elems += PolygonText(self.layer, 'IMEC', (5 * scale, scale* 64.0), (TEXT_ALIGN_LEFT, TEXT_ALIGN_MIDDLE), 1,  scale * 20.0)
         
         return elems
     
--- ipkiss24\genericpdk\library\io\column.py	(original)
+++ ipkiss24\genericpdk\library\io\column.py	(refactored)
@@ -21,7 +21,7 @@
 
 from ipkiss.all import *
 from picazzo.io.column import IoColumn, IoColumnGroup
-import constants
+from . import constants
 
 class StdIoColumnGroup(IoColumnGroup):
     y_spacing = PositiveNumberProperty(default = constants.STD_IOCOLUMN_Y_SPACING)    
@@ -32,7 +32,7 @@
 
 class Std1mmColumn(StdIoColumnGroup):
     def define_south_east(self):
-        return Coord2(1000.0-constants.STD_IOCOLUMN_MARGIN,0.0)
+        return Coord2(1000.0-constants.STD_IOCOLUMN_MARGIN, 0.0)
 
 class Std3mmColumn(StdIoColumnGroup):
     def define_south_east(self):
--- ipkiss24\genericpdk\library\io\constants.py	(original)
+++ ipkiss24\genericpdk\library\io\constants.py	(refactored)
@@ -37,29 +37,29 @@
 STD12MM_Column_Width = 12100
 STD12MM_Column_Spacing = 100
 STD12MM_Column_N_Lines = 320
-STD12MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD12MM_Column_Width + c*STD12MM_Column_Spacing,0.0)
-STD12MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD12MM_Column_Width + c*STD12MM_Column_Spacing,0.0)
+STD12MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD12MM_Column_Width + c*STD12MM_Column_Spacing, 0.0)
+STD12MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD12MM_Column_Width + c*STD12MM_Column_Spacing, 0.0)
 
 # STD6MM
 STD6MM_Column_Width = 6000.0
 STD6MM_Column_Spacing = 100
 STD6MM_Column_N_Lines = 320
-STD6MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD6MM_Column_Width + c*STD6MM_Column_Spacing,0.0)
-STD6MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD6MM_Column_Width + c*STD6MM_Column_Spacing,0.0)
+STD6MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD6MM_Column_Width + c*STD6MM_Column_Spacing, 0.0)
+STD6MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD6MM_Column_Width + c*STD6MM_Column_Spacing, 0.0)
 
 # STD4MM
 STD4MM_Column_Width = 4000
 STD4MM_Column_Spacing = 50
 STD4MM_Column_N_Lines = 320
-STD4MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD4MM_Column_Width + c*STD4MM_Column_Spacing,0.0)
-STD4MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD4MM_Column_Width + c*STD4MM_Column_Spacing,0.0)
+STD4MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD4MM_Column_Width + c*STD4MM_Column_Spacing, 0.0)
+STD4MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD4MM_Column_Width + c*STD4MM_Column_Spacing, 0.0)
 
 # STD3MM
 STD3MM_Column_Width = 2950
 STD3MM_Column_Spacing = 100
 STD3MM_Column_N_Lines = 320
-STD3MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD3MM_Column_Width + c*STD3MM_Column_Spacing,0.0)
-STD3MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD3MM_Column_Width + c*STD3MM_Column_Spacing,0.0)
+STD3MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD3MM_Column_Width + c*STD3MM_Column_Spacing, 0.0)
+STD3MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD3MM_Column_Width + c*STD3MM_Column_Spacing, 0.0)
 
 
 # STD1MM
@@ -77,8 +77,8 @@
                             #(STD_IOCOLUMN_Left_Margin + STD3MM_Column_Widths[0] + STD3MM_Column_Widths[1] + STD3MM_Column_Spacings[0] + STD3MM_Column_Widths[2] + STD3MM_Column_Spacings[1] + STD3MM_Column_Widths[3] + STD3MM_Column_Spacings[2], 0.0)
                             #]
 
-STD1MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD1MM_Column_Width + c*STD1MM_Column_Spacing,0.0)
-STD1MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD1MM_Column_Width + c*STD1MM_Column_Spacing,0.0)
+STD1MM_Column_Bottom_Left = lambda c: (STD_IOCOLUMN_Left_Margin + c*STD1MM_Column_Width + c*STD1MM_Column_Spacing, 0.0)
+STD1MM_Column_Bottom_Right = lambda c: (STD_IOCOLUMN_Left_Margin + (c+1)*STD1MM_Column_Width + c*STD1MM_Column_Spacing, 0.0)
 
 
 
--- ipkiss24\genericpdk\materials\materials.py	(original)
+++ ipkiss24\genericpdk\materials\materials.py	(refactored)
@@ -74,7 +74,7 @@
                     display_style = DisplayStyle(color = COLOR_GRAY))
 COPPER = Material(name="Copper",
                   display_style = DisplayStyle(color=COLOR_COPPER))
-TANTALUM = Material(name="Tantalum",display_style = DisplayStyle(color = COLOR_SCARLET))RefactoringTool: Writing converted ipkiss24\genericpdk\materials\materials.py to ipkissat3\genericpdk\materials\materials.py.
RefactoringTool: No changes to ipkiss24\ipcore\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\__init__.py to ipkissat3\ipcore\__init__.py.
RefactoringTool: Refactored ipkiss24\ipcore\all.py
RefactoringTool: Writing converted ipkiss24\ipcore\all.py to ipkissat3\ipcore\all.py.
RefactoringTool: Refactored ipkiss24\ipcore\helperfunc.py
RefactoringTool: Writing converted ipkiss24\ipcore\helperfunc.py to ipkissat3\ipcore\helperfunc.py.
RefactoringTool: No changes to ipkiss24\ipcore\log.py
RefactoringTool: Writing converted ipkiss24\ipcore\log.py to ipkissat3\ipcore\log.py.
RefactoringTool: No changes to ipkiss24\ipcore\settings.py
RefactoringTool: Writing converted ipkiss24\ipcore\settings.py to ipkissat3\ipcore\settings.py.
RefactoringTool: Refactored ipkiss24\ipcore\types_list.py
RefactoringTool: Writing converted ipkiss24\ipcore\types_list.py to ipkissat3\ipcore\types_list.py.
RefactoringTool: No changes to ipkiss24\ipcore\caching\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\caching\__init__.py to ipkissat3\ipcore\caching\__init__.py.
RefactoringTool: Refactored ipkiss24\ipcore\caching\cache.py
RefactoringTool: Writing converted ipkiss24\ipcore\caching\cache.py to ipkissat3\ipcore\caching\cache.py.
RefactoringTool: No changes to ipkiss24\ipcore\config\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\config\__init__.py to ipkissat3\ipcore\config\__init__.py.
RefactoringTool: Refactored ipkiss24\ipcore\config\tree.py
RefactoringTool: Writing converted ipkiss24\ipcore\config\tree.py to ipkissat3\ipcore\config\tree.py.
RefactoringTool: No changes to ipkiss24\ipcore\exceptions\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\exceptions\__init__.py to ipkissat3\ipcore\exceptions\__init__.py.
RefactoringTool: No changes to ipkiss24\ipcore\exceptions\exc.py
RefactoringTool: Writing converted ipkiss24\ipcore\exceptions\exc.py to ipkissat3\ipcore\exceptions\exc.py.
RefactoringTool: No changes to ipkiss24\ipcore\mixin\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\mixin\__init__.py to ipkissat3\ipcore\mixin\__init__.py.
RefactoringTool: Refactored ipkiss24\ipcore\mixin\mixin.py
RefactoringTool: Writing converted ipkiss24\ipcore\mixin\mixin.py to ipkissat3\ipcore\mixin\mixin.py.
RefactoringTool: No changes to ipkiss24\ipcore\properties\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\properties\__init__.py to ipkissat3\ipcore\properties\__init__.py.
RefactoringTool: Refactored ipkiss24\ipcore\properties\descriptor.py
RefactoringTool: Writing converted ipkiss24\ipcore\properties\descriptor.py to ipkissat3\ipcore\properties\descriptor.py.
RefactoringTool: Refactored ipkiss24\ipcore\properties\initializer.py

-TANTALUM_NITRIDE = Material(name="Tantalum_Nitride",display_style = DisplayStyle(color = COLOR_SANGRIA))
+TANTALUM = Material(name="Tantalum", display_style = DisplayStyle(color = COLOR_SCARLET))
+TANTALUM_NITRIDE = Material(name="Tantalum_Nitride", display_style = DisplayStyle(color = COLOR_SANGRIA))
 
 ALUMINIUM_COPPER = Material(name="AlCu", display_style = DisplayStyle(color=COLOR_DARKSEA_GREEN))
--- ipkiss24\ipcore\all.py	(original)
+++ ipkiss24\ipcore\all.py	(refactored)
@@ -19,15 +19,15 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from properties.predefined import *
-from properties.descriptor import *
-from properties.restrictions import *
-from properties.initializer import *
-from exceptions.exc import *
-from runtime.processor import __Processor__, __StopCriterium__
-from runtime.processor import ProcessorStopCriterium
-from runtime.procedure import __Procedure__, EMPTY_PROCEDURE
-from helperfunc import *
-from caching.cache import cache
-from config.tree import *
-from types_list import TypedList, TypedListProperty
+from .properties.predefined import *
+from .properties.descriptor import *
+from .properties.restrictions import *
+from .properties.initializer import *
+from .exceptions.exc import *
+from .runtime.processor import __Processor__, __StopCriterium__
+from .runtime.processor import ProcessorStopCriterium
+from .runtime.procedure import __Procedure__, EMPTY_PROCEDURE
+from .helperfunc import *
+from .caching.cache import cache
+from .config.tree import *
+from .types_list import TypedList, TypedListProperty
--- ipkiss24\ipcore\helperfunc.py	(original)
+++ ipkiss24\ipcore\helperfunc.py	(refactored)
@@ -44,7 +44,7 @@
 def extract_kwarg(kwargs, arg_name):
     try:
         arg = kwargs[arg_name]
-    except KeyError, ke:
+    except KeyError as ke:
         raise Exception("Keyword argument '%s' is required but was not found." % arg_name)
     del kwargs[arg_name]
     return arg
--- ipkiss24\ipcore\types_list.py	(original)
+++ ipkiss24\ipcore\types_list.py	(refactored)
@@ -71,7 +71,7 @@
             self.__raise_invalid_type_exception__(item)
 
     def extend(self, items):
-        if type(self) == type(items):
+        if isinstance(self, type(items)):
             # we are certain that all items are of a valid type. No need to check each item individually
             list.extend(self, items)
         elif isinstance(items, list) or isinstance(items, set):
--- ipkiss24\ipcore\caching\cache.py	(original)
+++ ipkiss24\ipcore\caching\cache.py	(refactored)
@@ -28,7 +28,7 @@
     """caching decorator: caches the result of a function called on an object"""
     def _cache(function):
         def __cache(*args, **kw):
-            key = hashlib.sha1(function.func_name).hexdigest()
+            key = hashlib.sha1(function.__name__).hexdigest()
             obj = args[0]
             if not hasattr(obj, "__IPCORE_CACHE__"):
                 obj.__IPCORE_CACHE__ = dict()
--- ipkiss24\ipcore\config\tree.py	(original)
+++ ipkiss24\ipcore\config\tree.py	(refactored)
@@ -46,7 +46,7 @@
 
     def __generate_doc__(self, header):
         doc = ""
-        keys = self.__dict__.keys()
+        keys = list(self.__dict__.keys())
         for k in keys:
             value = self.__dict__[k]
             if isinstance(value, ConfigTree):
@@ -69,7 +69,7 @@
         items = []
         for k in self.__config_tree_keys__:
             if k in self.__dict__:
-                items.append((k,self.__dict__[k]))
+                items.append((k, self.__dict__[k]))
         return items
     
     def find_item_key(self, item):
--- ipkiss24\ipcore\mixin\mixin.py	(original)
+++ ipkiss24\ipcore\mixin\mixin.py	(refactored)
@@ -49,6 +49,5 @@
             cls.mixin_last(mixin_class)
 
 
-class MixinBowl(object):
-    __metaclass__ = MetaMixinBowl
+class MixinBowl(object, metaclass=MetaMixinBowl):
     pass
--- ipkiss24\ipcore\properties\descriptor.py	(original)
+++ ipkiss24\ipcore\properties\descriptor.py	(refactored)
@@ -62,7 +62,7 @@
         else:
             self.__doc__ = ""
 
-        for (k, v) in kwargs.items():
+        for (k, v) in list(kwargs.items()):
             if k in self.__allowed_keyword_arguments__:
                 object.__setattr__(self, k, v)
             else:
@@ -120,10 +120,10 @@
         if self.__value_was_stored__(obj):
             old_value = obj.__store__[self.__name__][0]
             try:
-                clear_cached_values_in_store = (type(old_value) != type(value)) or (old_value != value)
-                if type(clear_cached_values_in_store) == ndarray:
+                clear_cached_values_in_store = (not isinstance(old_value, type(value))) or (old_value != value)
+                if isinstance(clear_cached_values_in_store, ndarray):
                     clear_cached_values_in_store = clear_cached_values_in_store.all()
-            except ValueError, e:  # precaution... if exceptionally this would occur because the comparison between old_value and value cannot be done, then clear caches anyway...
+            except ValueError as e:  # precaution... if exceptionally this would occur because the comparison between old_value and value cannot be done, then clear caches anyway...
                 clear_cached_values_in_store = True
         obj.__store__[self.__name__] = (value, SET_EXTERNALLY)
         if not(obj.flag_busy_initializing):
@@ -190,7 +190,7 @@
                 raise IpcorePropertyDescriptorException("Invalid assignment for Property '%s' of '%s' with value %s: not compatible with restriction %s." % (self.name, obj.__class__.__name__, str(value), str(self.restriction)))
 
     def __cache_property_value_on_object__(self, obj, value):
-        if type(obj) != NoneType: #FIXME: ???
+        if not isinstance(obj, NoneType): #FIXME: ???
             new_value = self.preprocess(value, obj)
             self.__check_restriction__(obj, new_value)
             obj.__store__[self.__name__] = (new_value, CACHED)
@@ -210,7 +210,7 @@
         if self.preprocess is not None:
             try:
                 new_value = self.preprocess(value, obj)
-            except ProcessorException, e:
+            except ProcessorException as e:
                 LOG.info("RestrictedProperty::__set__ : an error was raised on self.preprocess : %s" % str(e))
                 if (value is None) and not self.allow_none:
                     raise IpcorePropertyDescriptorException("Invalid assignment for property '%s' of '%s' with value %s" % (self.name, type(obj).__name__, str(value)))
--- ipkiss24\ipcore\properties\initializer.py	(original)
+++ ipkiss24\ipcore\properties\initializer.py	(refactored)
@@ -164,9 +164,7 @@
         return False
 
 
-class PropertyInitializer(MixinBowl):
-    __metaclass__ = MetaPropertyInitializer
-
+class PropertyInitializer(MixinBowl, metaclass=MetaPropertyInitializer):
     def __init__(self, **kwargs):
         self.flag_busy_initializing = True
 
@@ -175,7 +173,7 @@
         props = self.__properties__()
 
         # assign properties
-        for (key, value) in kwargs.items():
+        for (key, value) in list(kwargs.items()):
             if not is_suppressed(value):
                 setattr(self, key, value)
 
@@ -229,7 +227,7 @@
 
     def __clear_cached_values_in_store__(self):  # FIXME: improve performance?
         if (not self.flag_busy_initializing):
-            store_content_flattened = self.__store__.items()
+            store_content_flattened = list(self.__store__.items())
             for (key, item) in store_content_flattened:
                 origin = item[1]
                 if origin == CACHED:
@@ -297,7 +295,7 @@
             try:
                 if (myVal != otherVal):
                     return False
-            except ValueError, e:
+            except ValueError as e:
                 import numpy
                 if isinstance(myVal, numpy.ndarray):
                     if (myVal != otherVal).any():
@@ -356,7 +354,7 @@
         else:
             allow_unmatched_kwargs = False
         props = self.__properties__()RefactoringTool: Writing converted ipkiss24\ipcore\properties\initializer.py to ipkissat3\ipcore\properties\initializer.py.
RefactoringTool: Refactored ipkiss24\ipcore\properties\predefined.py
RefactoringTool: Writing converted ipkiss24\ipcore\properties\predefined.py to ipkissat3\ipcore\properties\predefined.py.
RefactoringTool: No changes to ipkiss24\ipcore\properties\processors.py
RefactoringTool: Writing converted ipkiss24\ipcore\properties\processors.py to ipkissat3\ipcore\properties\processors.py.
RefactoringTool: Refactored ipkiss24\ipcore\properties\restrictions.py
RefactoringTool: Writing converted ipkiss24\ipcore\properties\restrictions.py to ipkissat3\ipcore\properties\restrictions.py.
RefactoringTool: No changes to ipkiss24\ipcore\runtime\__init__.py
RefactoringTool: Writing converted ipkiss24\ipcore\runtime\__init__.py to ipkissat3\ipcore\runtime\__init__.py.
RefactoringTool: No changes to ipkiss24\ipcore\runtime\procedure.py
RefactoringTool: Writing converted ipkiss24\ipcore\runtime\procedure.py to ipkissat3\ipcore\runtime\procedure.py.
RefactoringTool: No changes to ipkiss24\ipcore\runtime\processor.py
RefactoringTool: Writing converted ipkiss24\ipcore\runtime\processor.py to ipkissat3\ipcore\runtime\processor.py.
RefactoringTool: Refactored ipkiss24\ipkiss\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\__init__.py to ipkissat3\ipkiss\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\all.py
RefactoringTool: Writing converted ipkiss24\ipkiss\all.py to ipkissat3\ipkiss\all.py.
RefactoringTool: No changes to ipkiss24\ipkiss\constants.py
RefactoringTool: Writing converted ipkiss24\ipkiss\constants.py to ipkissat3\ipkiss\constants.py.
RefactoringTool: No changes to ipkiss24\ipkiss\log.py
RefactoringTool: Writing converted ipkiss24\ipkiss\log.py to ipkissat3\ipkiss\log.py.
RefactoringTool: No changes to ipkiss24\ipkiss\settings.py
RefactoringTool: Writing converted ipkiss24\ipkiss\settings.py to ipkissat3\ipkiss\settings.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\__init__.py to ipkissat3\ipkiss\aspects\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\aspect.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\aspect.py to ipkissat3\ipkiss\aspects\aspect.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\layout\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\layout\__init__.py to ipkissat3\ipkiss\aspects\layout\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\layout\layout.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\layout\layout.py to ipkissat3\ipkiss\aspects\layout\layout.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\output\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\output\__init__.py to ipkissat3\ipkiss\aspects\output\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\output\output.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\output\output.py to ipkissat3\ipkiss\aspects\output\output.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\port\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\port\__init__.py to ipkissat3\ipkiss\aspects\port\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\port\aspect.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\port\aspect.py to ipkissat3\ipkiss\aspects\port\aspect.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\port\port.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\port\port.py to ipkissat3\ipkiss\aspects\port\port.py.
RefactoringTool: No changes to ipkiss24\ipkiss\aspects\port\port_list.py
RefactoringTool: Writing converted ipkiss24\ipkiss\aspects\port\port_list.py to ipkissat3\ipkiss\aspects\port\port_list.py.
RefactoringTool: Refactored ipkiss24\ipkiss\boolean_ops\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\boolean_ops\__init__.py to ipkissat3\ipkiss\boolean_ops\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\boolean_ops\boolean_ops.py
RefactoringTool: Writing converted ipkiss24\ipkiss\boolean_ops\boolean_ops.py to ipkissat3\ipkiss\boolean_ops\boolean_ops.py.
RefactoringTool: Refactored ipkiss24\ipkiss\boolean_ops\boolean_ops_elements.py
RefactoringTool: Writing converted ipkiss24\ipkiss\boolean_ops\boolean_ops_elements.py to ipkissat3\ipkiss\boolean_ops\boolean_ops_elements.py.
RefactoringTool: No changes to ipkiss24\ipkiss\boolean_ops\boolean_ops_shapely.py
RefactoringTool: Writing converted ipkiss24\ipkiss\boolean_ops\boolean_ops_shapely.py to ipkissat3\ipkiss\boolean_ops\boolean_ops_shapely.py.
RefactoringTool: No changes to ipkiss24\ipkiss\exceptions\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\exceptions\__init__.py to ipkissat3\ipkiss\exceptions\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\exceptions\exc.py
RefactoringTool: Writing converted ipkiss24\ipkiss\exceptions\exc.py to ipkissat3\ipkiss\exceptions\exc.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\__init__.py to ipkissat3\ipkiss\geometry\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\coord.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\coord.py to ipkissat3\ipkiss\geometry\coord.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\line.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\line.py to ipkissat3\ipkiss\geometry\line.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shape.py

-        for (key, value) in kwargs.items():
+        for (key, value) in list(kwargs.items()):
             if (not key in props) and (not allow_unmatched_kwargs):
                 raise IpcoreAttributeException("Keyword argument '%s' does not match a property of %s." % (key, str(type(self))))
             if not is_suppressed(value):
--- ipkiss24\ipcore\properties\predefined.py	(original)
+++ ipkiss24\ipcore\properties\predefined.py	(refactored)
@@ -29,7 +29,7 @@
 # Predefined Restrictions
 #######################################################
 RESTRICT_INT = restrictions.RestrictType(int)
-RESTRICT_LONG = restrictions.RestrictType(long)
+RESTRICT_LONG = restrictions.RestrictType(int)
 RESTRICT_FLOAT = restrictions.RestrictType(float)
 RESTRICT_NUMBER = restrictions.RestrictType((int, float))
 RESTRICT_COMPLEX = restrictions.RestrictType((int, float, complex))
@@ -176,8 +176,8 @@
 
 def NumpyMasked2DArrayProperty(internal_member_name = None, restriction = None, **kwargs):
     R = RESTRICT_NUMPY_MASKED2DARRAY & restriction
-    return RestrictedProperty(internal_member_name, restriction = R,**kwargs)
+    return RestrictedProperty(internal_member_name, restriction = R, **kwargs)
 
 def NumpyMasked3DArrayProperty(internal_member_name = None, restriction = None, **kwargs):
     R = RESTRICT_NUMPY_MASKED3DARRAY & restriction
-    return RestrictedProperty(internal_member_name, restriction = R,**kwargs)
+    return RestrictedProperty(internal_member_name, restriction = R, **kwargs)
--- ipkiss24\ipcore\properties\restrictions.py	(original)
+++ ipkiss24\ipcore\properties\restrictions.py	(refactored)
@@ -234,7 +234,7 @@
 class RestrictIterable(__PropertyRestriction__):
 
     def validate(self, value, obj=None):
-        return isinstance(value, basestring) or getattr(value, '__iter__', False)
+        return isinstance(value, str) or getattr(value, '__iter__', False)
 
     def __repr__(self):
         return "Iterable Restriction"
--- ipkiss24\ipkiss\__init__.py	(original)
+++ ipkiss24\ipkiss\__init__.py	(refactored)
@@ -25,7 +25,7 @@
 def initialize():
     from ipkiss.log import IPKISS_LOG as LOG
     from . import settings 
-    print >>sys.stderr, settings.START_MESSAGE
+    print(settings.START_MESSAGE, file=sys.stderr)
     
 
 initialize()
--- ipkiss24\ipkiss\all.py	(original)
+++ ipkiss24\ipkiss\all.py	(refactored)
@@ -22,61 +22,61 @@
 
 import ipkiss.aspects
 
-from constants import *
-from settings import *
+from .constants import *
+from .settings import *
 
 from ipcore.all import *
 from ipkiss.log import IPKISS_LOG as LOG
 
-from geometry.transform import *
-from geometry.transformable import *
-from geometry.transforms.no_distort import *
-from geometry.transforms.translation import *
-from geometry.transforms.rotation import *
-from geometry.transforms.identity import *
-from geometry.transforms.magnification import *
-from geometry.transforms.mirror import *
-from geometry.transforms.stretch import *
-from geometry.coord import *
-from geometry.vector import *
-from geometry.shape import *
-from geometry.line import *
-from geometry.shapes.basic import *
-from geometry.shapes.advanced import *
-from geometry.shape_cut import *
-from geometry.shape_info import *
-from geometry.size_info import *
-from geometry.shape_modify import *
-from geometry.shape_modifier import *
-from geometry.shapes.modifiers import *
-from geometry.shapes.curves import *
+from .geometry.transform import *
+from .geometry.transformable import *
+from .geometry.transforms.no_distort import *
+from .geometry.transforms.translation import *
+from .geometry.transforms.rotation import *
+from .geometry.transforms.identity import *
+from .geometry.transforms.magnification import *
+from .geometry.transforms.mirror import *
+from .geometry.transforms.stretch import *
+from .geometry.coord import *
+from .geometry.vector import *
+from .geometry.shape import *
+from .geometry.line import *
+from .geometry.shapes.basic import *
+from .geometry.shapes.advanced import *
+from .geometry.shape_cut import *
+from .geometry.shape_info import *
+from .geometry.size_info import *
+from .geometry.shape_modify import *
+from .geometry.shape_modifier import *
+from .geometry.shapes.modifiers import *
+from .geometry.shapes.curves import *
 
-from primitives.layer import *
-from primitives.elements import *
-from primitives.fonts import *
-from primitives.library import *
-from primitives.structure import *
+from .primitives.layer import *
+from .primitives.elements import *
+from .primitives.fonts import *
+from .primitives.library import *
+from .primitives.structure import *
 
-from io.import_hpgl import *
-from io.input_gdsii import *
-from io.output import OutputBasic
-from io.output_gdsii import *
-from io.output_object import *
-from io.output_xml import *
-from io.file_io import *
-from io.gds_layer import *
+from .io.import_hpgl import *
+from .io.input_gdsii import *
+from .io.output import OutputBasic
+from .io.output_gdsii import *
+from .io.output_object import *
+from .io.output_xml import *
+from .io.file_io import *
+from .io.gds_layer import *
 
-from process import ProcessProperty, PurposeProperty, PPLayer, ProcessPurposeLayer, ProcessLayer, PatternPurpose
+from .process import ProcessProperty, PurposeProperty, PPLayer, ProcessPurposeLayer, ProcessLayer, PatternPurpose
 
-from technology.settings import get_technology
+from .technology.settings import get_technology
 
 TECH = get_technology()
 
-from exceptions import *
+from .exceptions import *
 
 #from settings import *
 
-from boolean_ops import *
+from .boolean_ops import *
 
 
 
--- ipkiss24\ipkiss\boolean_ops\__init__.py	(original)
+++ ipkiss24\ipkiss\boolean_ops\__init__.py	(refactored)
@@ -19,5 +19,5 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from boolean_ops_shapely import *
-from boolean_ops_elements import *
+from .boolean_ops_shapely import *
+from .boolean_ops_elements import *
--- ipkiss24\ipkiss\boolean_ops\boolean_ops_elements.py	(original)
+++ ipkiss24\ipkiss\boolean_ops\boolean_ops_elements.py	(refactored)
@@ -95,8 +95,8 @@
     Given a list of elements and a list of tuples (GeneratedLayer, PPLayer), create new elements according to the boolean
     operations of the GeneratedLayer and place these elements on the specified PPLayer.
     """
-    generated_layers = mapping.keys()
-    export_layers = mapping.values()
+    generated_layers = list(mapping.keys())
+    export_layers = list(mapping.values())
     elems = ElementList()
     process_processelems_dict = dict()
     for generated_layer, export_layer in zip(generated_layers, export_layers):
--- ipkiss24\ipkiss\geometry\shape.py	(original)
+++ ipkiss24\ipkiss\geometry\shape.py	(refactored)
@@ -21,7 +21,7 @@
 
 from .. import constants
 from . import transformable 
-from coord import Coord2, Coord3, Coord
+from .coord import Coord2, Coord3, Coord
 
 from . import size_info
 from copy import copy, deepcopy
@@ -144,7 +144,7 @@
                         kwargs["points"] = pl
                     else:
                         raise Exception()
-                except Exception, e:
+                except Exception as e:
                     raise IpkissException("Unexpected type %s for parameter 'points' in Shape::__init__" % str(type(points)))
         super(Shape, self).__init__(**kwargs)
                 
@@ -472,14 +472,14 @@
         if len(p) < 2:
             return []
         if self.is_closed():
-            segments = zip(p, roll(p, 1, 0))
-        else:
-            segments = zip(p[:-1], p[1:])
+            segments = list(zip(p, roll(p, 1, 0)))
+        else:
+            segments = list(zip(p[:-1], p[1:]))
         return segments
 
     def intersections(self, other_shape):
         """ the intersections with this shape and the other shape """
-        from shape_info import intersection, lines_cross, lines_coincide, sort_points_on_line, points_unique
+        from .shape_info import intersection, lines_cross, lines_coincide, sort_points_on_line, points_uniqueRefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shape.py to ipkissat3\ipkiss\geometry\shape.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shape_cut.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shape_cut.py to ipkissat3\ipkiss\geometry\shape_cut.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shape_info.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shape_info.py to ipkissat3\ipkiss\geometry\shape_info.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\shape_modifier.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shape_modifier.py to ipkissat3\ipkiss\geometry\shape_modifier.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shape_modify.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shape_modify.py to ipkissat3\ipkiss\geometry\shape_modify.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\size_info.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\size_info.py to ipkissat3\ipkiss\geometry\size_info.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transform.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transform.py to ipkissat3\ipkiss\geometry\transform.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transformable.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transformable.py to ipkissat3\ipkiss\geometry\transformable.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\vector.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\vector.py to ipkissat3\ipkiss\geometry\vector.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\shapes\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\__init__.py to ipkissat3\ipkiss\geometry\shapes\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\shapes\advanced.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\advanced.py to ipkissat3\ipkiss\geometry\shapes\advanced.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shapes\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\basic.py to ipkissat3\ipkiss\geometry\shapes\basic.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shapes\curves.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\curves.py to ipkissat3\ipkiss\geometry\shapes\curves.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shapes\modifiers.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\modifiers.py to ipkissat3\ipkiss\geometry\shapes\modifiers.py.
RefactoringTool: Refactored ipkiss24\ipkiss\geometry\shapes\spline.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\shapes\spline.py to ipkissat3\ipkiss\geometry\shapes\spline.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\__init__.py to ipkissat3\ipkiss\geometry\transforms\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\identity.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\identity.py to ipkissat3\ipkiss\geometry\transforms\identity.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\magnification.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\magnification.py to ipkissat3\ipkiss\geometry\transforms\magnification.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\mirror.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\mirror.py to ipkissat3\ipkiss\geometry\transforms\mirror.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\no_distort.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\no_distort.py to ipkissat3\ipkiss\geometry\transforms\no_distort.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\rotation.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\rotation.py to ipkissat3\ipkiss\geometry\transforms\rotation.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\special.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\special.py to ipkissat3\ipkiss\geometry\transforms\special.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\stretch.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\stretch.py to ipkissat3\ipkiss\geometry\transforms\stretch.py.
RefactoringTool: No changes to ipkiss24\ipkiss\geometry\transforms\translation.py
RefactoringTool: Writing converted ipkiss24\ipkiss\geometry\transforms\translation.py to ipkissat3\ipkiss\geometry\transforms\translation.py.
RefactoringTool: No changes to ipkiss24\ipkiss\io\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\__init__.py to ipkissat3\ipkiss\io\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\io\collector.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\collector.py to ipkissat3\ipkiss\io\collector.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\file_io.py

         s = Shape(self)
         s.remove_straight_angles()
         segments1 = s.segments() 
@@ -586,7 +586,7 @@
 
     def __delslice__(self, i, j):
         """ remove a slice of points """
-        self.points = delete(self.points, range(i, j), 0)
+        self.points = delete(self.points, list(range(i, j)), 0)
         return self
 
     def __mul__(self, times):
--- ipkiss24\ipkiss\geometry\shape_cut.py	(original)
+++ ipkiss24\ipkiss\geometry\shape_cut.py	(refactored)
@@ -81,7 +81,7 @@
 def cut_open_shape_in_n_sections_with_overlap(shape, n_o_sections, overlap=1):
     l = len(shape)
     section_length = int(math.ceil(l / n_o_sections))
-    return cut_open_shape_with_overlap(shape, range(section_length - 1, l - overlap - 1, section_length), overlap)
+    return cut_open_shape_with_overlap(shape, list(range(section_length - 1, l - overlap - 1, section_length)), overlap)
 
 def cut_open_shape_in_sections_with_overlap(shape, max_section_length, overlap=1, min_n_o_sections=1):
     l = len(shape)
--- ipkiss24\ipkiss\geometry\shape_info.py	(original)
+++ ipkiss24\ipkiss\geometry\shape_info.py	(refactored)
@@ -22,7 +22,7 @@
 from .. import constants
 from . import coord
 from . import shape
-from transforms.rotation import Rotation
+from .transforms.rotation import Rotation
 import numpy
 from math import atan2, pi, sqrt
 from ipkiss.log import IPKISS_LOG as LOG
--- ipkiss24\ipkiss\geometry\shape_modify.py	(original)
+++ ipkiss24\ipkiss\geometry\shape_modify.py	(refactored)
@@ -95,7 +95,7 @@
                         c4 = nc[k + 1]
                         if lines_cross(c1, c2, c3, c4):
                                 nc[i + 1] = intersection(c1, c2, c3, c4)
-                                dels.update(range(i + 2, k + 1))
+                                dels.update(list(range(i + 2, k + 1)))
                                 c2 = nc[i + 1]
                         k += 1 
         return numpy.delete(nc, dels, 0)
--- ipkiss24\ipkiss\geometry\vector.py	(original)
+++ ipkiss24\ipkiss\geometry\vector.py	(refactored)
@@ -50,7 +50,7 @@
     def get_angle_rad(self):
         try:
             return constants.DEG2RAD * self.__angle__
-        except AttributeError, e:
+        except AttributeError as e:
             return 0.0
         
     def set_angle_rad(self, value):
@@ -61,7 +61,7 @@
     def get_angle_deg(self):
         try:
             return self.__angle__
-        except AttributeError, e:
+        except AttributeError as e:
             return 0.0
         
     def set_angle_deg(self, value):
@@ -141,7 +141,7 @@
     def get_inclination_rad(self):
         try:
             return constants.DEG2RAD * self.__inclination__
-        except AttributeError, e:
+        except AttributeError as e:
             return 0.0
         
     def set_inclination_rad(self, value):
@@ -152,7 +152,7 @@
     def get_inclination_deg(self):
         try:
             return self.__inclination__
-        except AttributeError, e:
+        except AttributeError as e:
             return 0.0
         
     def set_inclination_deg(self, value):
--- ipkiss24\ipkiss\geometry\shapes\basic.py	(original)
+++ ipkiss24\ipkiss\geometry\shapes\basic.py	(refactored)
@@ -53,7 +53,7 @@
            "ShapeWedge"]
 
 def wrap_kwargs(kwargs_dict, **kwargs):
-    for kwa_k, kwa_v in kwargs.items():
+    for kwa_k, kwa_v in list(kwargs.items()):
         kwargs_dict[kwa_k] = kwa_v
     return kwargs_dict
 
@@ -341,7 +341,7 @@
             pts.append(self.center)
             return pts
         angle_step = 2 * math.pi / self.n_o_sides
-        for i in xrange(0, self.n_o_sides):
+        for i in range(0, self.n_o_sides):
             pts.append((self.center[0] + self.radius * math.cos((i + 0.5) * angle_step + math.pi / 2),
                         self.center[1] + self.radius * math.sin((i + 0.5) * angle_step + math.pi / 2)))
         return pts
--- ipkiss24\ipkiss\geometry\shapes\curves.py	(original)
+++ ipkiss24\ipkiss\geometry\shapes\curves.py	(refactored)
@@ -42,8 +42,8 @@
         Px = outer(P[:, 0], ones(size(t)))
         Py = outer(P[:, 1], ones(size(t)))
         for j in range(len(self.original_shape) - 1,  0, -1):
-            Px = Px[0:j, :] + diff(Px, 1, 0) * t
-            Py = Py[0:j, :] + diff(Py, 1, 0) * t
+            Px = Px[0:j,:] + diff(Px, 1, 0) * t
+            Py = Py[0:j,:] + diff(Py, 1, 0) * t
 
         pts = transpose(row_stack((Px, Py)))
         return pts
--- ipkiss24\ipkiss\geometry\shapes\modifiers.py	(original)
+++ ipkiss24\ipkiss\geometry\shapes\modifiers.py	(refactored)
@@ -701,7 +701,7 @@
 
     def is_closed(self):
         return self.original_shape.is_closed()
-    closed = FunctionProperty(is_closed,Shape.set_closed)
+    closed = FunctionProperty(is_closed, Shape.set_closed)
 
     def define_offset(self):
         o = self.original_shape.orientation() * self.amount
--- ipkiss24\ipkiss\geometry\shapes\spline.py	(original)
+++ ipkiss24\ipkiss\geometry\shapes\spline.py	(refactored)
@@ -53,7 +53,7 @@
     radius = PositiveNumberProperty(required = True)
     angle = AngleProperty(required = True)
     angle_step = AngleProperty(default  = TECH.METRICS.ANGLE_STEP)
-    def define_points(self,pts):
+    def define_points(self, pts):
         alpha = self.angle * DEG2RAD
         c = math.sin(alpha)
         if self.angle == 45.0:
@@ -68,8 +68,8 @@
         
         # control points of full natural spline (right angle)
         q0_0 = Coord2(-L, 0)
-        q0_1 = Coord2(0,0)
-        q0_2 = Coord2(0,0)
+        q0_1 = Coord2(0, 0)
+        q0_2 = Coord2(0, 0)
         q0_3 = Coord2(0, L)
         
         # control points of first section of the spline
@@ -92,7 +92,7 @@
     adiabatic_angles = RestrictedProperty(allow_none = True, doc = "tuple of adiabatic transistion angles for input and output")
     angle_step = AngleProperty(default = TECH.METRICS.ANGLE_STEP)
     
-    def define_points(self,pts):
+    def define_points(self, pts):
         alpha_in = self.adiabatic_angles[0]
         alpha_out = self.adiabatic_angles[1]
         turn_angle = turn_deg(self.start_point, self.turn_point, self.end_point)
@@ -134,7 +134,7 @@
         if turn_angle < 0:
             S.v_mirror()
     
-        L = straight_line_from_point_angle((0.0,0.0), turn_angle)
+        L = straight_line_from_point_angle((0.0, 0.0), turn_angle)
         d = L.distance(S[-1])
     
         ep = S[-1]
@@ -144,7 +144,7 @@
             d = ep.x - ep.y*math.cos(turn_angle * DEG2RAD)/ math.sin(turn_angle*DEG2RAD)
         
         S.move((-d, 0.0))
-        S.rotate((0.0,0.0), angle_deg(self.turn_point, self.start_point))
+        S.rotate((0.0, 0.0), angle_deg(self.turn_point, self.start_point))
         S.move(self.turn_point)
         S.remove_identicals()
         
@@ -166,9 +166,9 @@
             straight[-1]= False
         R = numpy.delete(self.radii, straight.nonzero()[0], 0)
         A = numpy.delete(self.adiabatic_angles_list, straight.nonzero()[0], 0)
-        return (S,R,A)
-    
-    def define_points(self,pts):
+        return (S, R, A)
+    
+    def define_points(self, pts):
         
         (s, R, A) = self.__original_shape_without_straight_angles__()        
 
@@ -231,7 +231,7 @@
 class ShapeRoundAdiabaticSpline(ShapeRoundAdiabaticSplineGeneric):
     """ returns a shape with adiabatic spline corners """
     adiabatic_angles_list = LockedProperty()
-    adiabatic_angles = RestrictedProperty(default=(0.0,0.0))
+    adiabatic_angles = RestrictedProperty(default=(0.0, 0.0))
     radii = LockedProperty()
     radius = NonNegativeNumberProperty(required = True)
         
@@ -245,7 +245,7 @@
 from functools import partial
 
 def SplineRoundingAlgorithm(adiabatic_angles = (0.0, 0.0)):
-    return partial(ShapeRoundAdiabaticSpline,adiabatic_angles =adiabatic_angles)        
-
-
-
+    return partial(ShapeRoundAdiabaticSpline, adiabatic_angles =adiabatic_angles)        
+
+
+
--- ipkiss24\ipkiss\io\file_io.py	(original)
+++ ipkiss24\ipkiss\io\file_io.py	(refactored)RefactoringTool: Writing converted ipkiss24\ipkiss\io\file_io.py to ipkissat3\ipkiss\io\file_io.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\filetype.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\filetype.py to ipkissat3\ipkiss\io\filetype.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\gds_layer.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\gds_layer.py to ipkissat3\ipkiss\io\gds_layer.py.
RefactoringTool: No changes to ipkiss24\ipkiss\io\gds_records.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\gds_records.py to ipkissat3\ipkiss\io\gds_records.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\import_hpgl.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\import_hpgl.py to ipkissat3\ipkiss\io\import_hpgl.py.
RefactoringTool: No changes to ipkiss24\ipkiss\io\input.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\input.py to ipkissat3\ipkiss\io\input.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\input_gdsii.py

@@ -29,7 +29,7 @@
 ## Read
 def read_library_from_file(filename, input_type):
     """ reads a library from a file using the input processor """
-    f = open(filename,"rb")
+    f = open(filename, "rb")
     i = InputGdsii(f)
     L = i.read()
     f.close()
@@ -39,7 +39,7 @@
 ## Write
 def write_library_to_file(library, filename, output_type):
     """ writes a library to a file using the given output processor """
-    f = open(filename,"wb")
+    f = open(filename, "wb")
     o = OutputGdsii(f)
     o.write(library)
     f.close()
--- ipkiss24\ipkiss\io\filetype.py	(original)
+++ ipkiss24\ipkiss\io\filetype.py	(refactored)
@@ -19,7 +19,7 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from ipcore.all import StrongPropertyInitializer,StringProperty,RestrictedProperty, RestrictType
+from ipcore.all import StrongPropertyInitializer, StringProperty, RestrictedProperty, RestrictType
 
 class FileType(StrongPropertyInitializer):
     name = StringProperty(required=True)
@@ -28,7 +28,7 @@
     def __str__(self):
         return self.name
 def FileTypeProperty(internal_member_name= None, restriction = None,**kwargs): 
-    return RestrictedProperty(restriction = RestrictType(FileType),**kwargs) 
+    return RestrictedProperty(restriction = RestrictType(FileType), **kwargs) 
 
 GDSII = FileType(name="GDSII", doc="GDSII stream file")
 OASIS = FileType(name="OASIS", doc="OASIS file")
--- ipkiss24\ipkiss\io\gds_layer.py	(original)
+++ ipkiss24\ipkiss\io\gds_layer.py	(refactored)
@@ -29,7 +29,7 @@
 
 GDSII_LAYER_CONVERSION_RADIX = 256
 
-__all__ = ["GdsiiLayer","GdsiiLayerInputMap","GdsiiLayerOutputMap","AutoGdsiiLayerOutputMap","AutoGdsiiLayerInputMap"]
+__all__ = ["GdsiiLayer", "GdsiiLayerInputMap", "GdsiiLayerOutputMap", "AutoGdsiiLayerOutputMap", "AutoGdsiiLayerInputMap"]
 
 class GdsiiLayer(StrongPropertyInitializer):
     number = IntProperty(required = True, restriction = RESTRICT_NONNEGATIVE)
@@ -58,13 +58,13 @@
         super(GdsiiLayerOutputMap, self).__init__(layer_map = layer_map, **kwargs)
         # check if the input map doesn't contain any duplicates on the "source side" (duplicates may exist on the target size)
         ln = []
-        for L in self.layer_map.keys():
+        for L in list(self.layer_map.keys()):
             ln.append(str(L))
         if len(ln) != len(list(set(ln))):
             raise InvalidArgumentException("layer_map may not contain duplicate layers on the source-side.")             
     
     def __getitem__(self, layer):
-        for key, value in self.layer_map.items():
+        for key, value in list(self.layer_map.items()):
             if (layer == key):
                 return value
         raise IpkissException("GdsiiLayerOutputMap::No valid mapping found for layer %s" %layer)
@@ -90,7 +90,7 @@
         name = "L%d_%d" % (L.number, L.datatype)
         return name
     
-    def __getitem__(self,key):
+    def __getitem__(self, key):
         return Layer(name = self.__make_layer_name__(key),
                          number = key.number + GDSII_LAYER_CONVERSION_RADIX * key.datatype)
     
@@ -112,31 +112,31 @@
         super(GdsiiLayerInputMap, self).__init__(layer_map = layer_map, **kwargs)
         # check if the input map doesn't contain any duplicates on the "source side" (duplicates may exist on the target size)
         ln = []
-        for L in self.layer_map.keys():
-            ln.append((L.number,L.datatype))
+        for L in list(self.layer_map.keys()):
+            ln.append((L.number, L.datatype))
         if len(ln) != len(list(set(ln))):
             raise IpkissException("layer_map may not contain duplicate layer number on the source-side.")                                    
 
-    def __getitem__(self,key):
-        for L in self.layer_map.keys():
+    def __getitem__(self, key):
+        for L in list(self.layer_map.keys()):
             if L.number == key.number and L.datatype == key.datatype:
                 return self.layer_map[L]
         return self.default
     
-    def get(self,key,default):
+    def get(self, key, default):
         return self[key]
 
 def make_layer_input_map(layermap, default = None):
     lm = {}
-    for k in layermap.keys():
-        if isinstance(k,int):
+    for k in list(layermap.keys()):
+        if isinstance(k, int):
             datatype = 0
             number = k
-        elif isinstance(k,tuple):
+        elif isinstance(k, tuple):
             datatype = k[1]
             number = k[0]
         else:
             raise TypeError("Wrong input in make_GdsiiLayerInputMap")
-        lm[GdsiiLayer(number=number,datatype=datatype)]=layermap[k]
+        lm[GdsiiLayer(number=number, datatype=datatype)]=layermap[k]
     L = GdsiiLayerInputMap(layer_map = lm, default = default)
     return L
--- ipkiss24\ipkiss\io\import_hpgl.py	(original)
+++ ipkiss24\ipkiss\io\import_hpgl.py	(refactored)
@@ -38,14 +38,14 @@
         if s.startswith("PU"):
             if pu and len(shape) > 1:
                 ret_shapes.append(shape)
-            t = s.replace('PU','').replace(';','')
+            t = s.replace('PU', '').replace(';', '')
             t = t.split()
             shape = [(float(t[0]), float(t[1]))]
             pu = True                
         elif s.startswith('PD') and pu:
-            t = s.replace('PD','').replace(';','')
+            t = s.replace('PD', '').replace(';', '')
             t = t.split()
-            shape.append((float(t[0]),float(t[1])))
+            shape.append((float(t[0]), float(t[1])))
         else:
             if pu and len(shape) > 1:
                 ret_shapes.append(shape)
@@ -60,15 +60,15 @@
     if s == '':
         return ret_shape
     
-    t = s.replace('PU','').replace(';','')
+    t = s.replace('PU', '').replace(';', '')
     t = t.split()
-    ret_shape.append((float(t[0]),float(t[1])))
+    ret_shape.append((float(t[0]), float(t[1])))
     
     s = f.readline()
     while s.startswith('PD'):
-        t = s.replace('PD','').replace(';','')
+        t = s.replace('PD', '').replace(';', '')
         t = t.split()
-        ret_shape.append((float(t[0]),float(t[1])))
+        ret_shape.append((float(t[0]), float(t[1])))
         s = f.readline()
     return ret_shape        
     
@@ -76,7 +76,7 @@
 
 def hpgl_to_shapes (filename):
     ret_shapes = []
-    f = open(filename,'r')
+    f = open(filename, 'r')
     ret_shapes = hpgl_get_shapes(f)
 ##    s = hpgl_get_next_shape(f)
 ##    while s != []:
@@ -120,7 +120,7 @@
     else:
         return str_shapes_paths(name, layer, final_shapes, line_width)
 
-def hpgl_to_python_coords (name, filename, file_out, size = (50.0,50.0), alignment= (constants.TEXT_ALIGN_CENTER, constants.TEXT_ALIGN_TOP), stub = 0.0):
+def hpgl_to_python_coords (name, filename, file_out, size = (50.0, 50.0), alignment= (constants.TEXT_ALIGN_CENTER, constants.TEXT_ALIGN_TOP), stub = 0.0):
     ret_str = ''
     if alignment[0] == constants.TEXT_ALIGN_RIGHT:
         xpos = - size[0]
--- ipkiss24\ipkiss\io\input_gdsii.py	(original)
+++ ipkiss24\ipkiss\io\input_gdsii.py	(refactored)
@@ -58,11 +58,11 @@
 LOG.addHandler(IPKISS_INPUT_GDSII_LOGGING_HANDLER)
 IPKISS_INPUT_GDSII_LOG = LOG
 
-__all__ = ["InputGdsii", "FileInputGdsii","LOG","InputGdsiiTree"]
+__all__ = ["InputGdsii", "FileInputGdsii", "LOG", "InputGdsiiTree"]
 
 
 class GdsiiRecord(object):
-    def __init__(self,rtype, length):
+    def __init__(self, rtype, length):
         self.rtype = rtype
         self.length = length
 
@@ -78,7 +78,7 @@
     def __parse_library__ (self):
         self.__istream__ = self.i_stream
         self.__scaling__ = self.scaling
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -120,7 +120,7 @@
             datalen = int (b2a_hex(b1), 16) - 4
             b2 = self.__istream__.read(2)
             rtype = int (b2a_hex(b2), 16)
-        except Exception, e:
+        except Exception as e:
             msg = "Could not read record : %s" %str(e)RefactoringTool: Writing converted ipkiss24\ipkiss\io\input_gdsii.py to ipkissat3\ipkiss\io\input_gdsii.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\output.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\output.py to ipkissat3\ipkiss\io\output.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\output_gdsii.py

             from ipkiss.exceptions.exc import IpkissException
             raise IpkissException(msg)
@@ -129,7 +129,7 @@
     def __parse_real8__(self):
         #value = (mantissa/(2^56)) * (16^(exponent-64))
         try:
-            data = unpack(">BBHL",self.__istream__.read(8))
+            data = unpack(">BBHL", self.__istream__.read(8))
         except:
             LOG.error("Could not read REAL8")
             raise SystemError
@@ -173,14 +173,14 @@
 
     def __parse_int2__(self):
         try:
-            return unpack(">h",self.__istream__.read(2))[0]
-        except Exception, e:
+            return unpack(">h", self.__istream__.read(2))[0]
+        except Exception as e:
             LOG.error("Could not read INT2 : %s" %e)
             raise SystemError
     
 class InputGdsiiTree(InputGdsiiHeader):
     """ Parses a GDSII file but extracts only the hierarchy """
-    log_bufsize = LongIntProperty(default=0L)
+    log_bufsize = LongIntProperty(default=0)
     def __init__(self, i_stream = sys.stdin, stop_on_unknown_gds_layer = True, **kwargs):
         super(InputGdsiiTree, self).__init__(
             i_stream = i_stream,
@@ -194,7 +194,7 @@
         if self.log_bufsize>0:
             cur_percentile = 0
             percentile = self.log_bufsize/10
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -238,12 +238,12 @@
                         continued = dict(continued=True)
                     else:
                         continued = dict(continued=False)
-                    LOG.info('%d%% '%(cur_percentile*10),extra=continued)
+                    LOG.info('%d%% '%(cur_percentile*10), extra=continued)
 
         return self.library
 
     def __parse_structure__(self, created, modified):
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -301,7 +301,7 @@
         s = self.__scaling__ / self.library.grids_per_unit
         return (self.__parse_int4__() * s, self.__parse_int4__() * s)
 
-    def __parse_shape__(self,n_o_points):
+    def __parse_shape__(self, n_o_points):
         #return Shape( [ self.__parse_coordinate__() for i in range(n_o_points)])
         s = self.__scaling__ / self.library.grids_per_unit
         #p = self.__parse_int4__
@@ -315,7 +315,7 @@
 
     def __parse_boundary_element__(self):
         # Skip: no tree info
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -327,7 +327,7 @@
 
     def __parse_path_element__ (self):
         # Skip: no tree info
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -338,7 +338,7 @@
 
     def __parse_sref_element__(self):
         name = ""
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -362,7 +362,7 @@
             S = Structure(name, [], self.library)
             #S.__make_static__()
         if not S in self.__current_structure__.child_structures:
-            V = SRef(S, (0,0))
+            V = SRef(S, (0, 0))
             self.__current_structure__.child_structures += [S]
         else:
             V = None
@@ -373,7 +373,7 @@
 
     def __parse_box_element__(self):
         # Skip: no tree info
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -384,7 +384,7 @@
 
     def __parse_label_element__(self):
         # Skip: no tree info
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -412,8 +412,8 @@
 
     def __parse_int4__(self):
         try:
-            return unpack(">l",self.__istream__.read(4))[0]
-        except Exception, e:
+            return unpack(">l", self.__istream__.read(4))[0]
+        except Exception as e:
             LOG.error("Could not read INT4 : %s" %e)
             raise SystemError
 
@@ -427,7 +427,7 @@
         layer_number = 0
         datatype = 0
         coords = []
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -453,7 +453,7 @@
         layer = GdsiiLayer(number = layer_number, datatype = datatype)
         L = self.map_layer(layer)
         if L is None:
-            err_msg = "Could not map GDS layer %d:%d in InputGdsii." %(layer.number,layer.datatype)
+            err_msg = "Could not map GDS layer %d:%d in InputGdsii." %(layer.number, layer.datatype)
             if self.__stop_on_unknown_gds_layer__:
                 raise IpkissException(err_msg)
             else:
@@ -469,7 +469,7 @@
         pathtype = constants.PATH_TYPE_NORMAL
         width = 0
         coords = []
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -511,7 +511,7 @@
         name = ""
         coord = (0.0, 0.0)
         transform = NoDistortTransform()
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -565,7 +565,7 @@
         col = 1
         row = 1
         transform = NoDistortTransform()
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -638,7 +638,7 @@
         layer_number = 0
         boxtype = 0
         coords = []
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datalength
@@ -694,7 +694,7 @@
         width = 1.0
         coords = []
         height = 1.0
-        while 1:
+        while True:
             r = self.__parse_record__()
             t = r.rtype #type
             l = r.length #datatype
@@ -746,7 +746,7 @@
                 else:
                     return LOG.error(err_msg)
             else:
-                return Label (L, text, coord, (hor_alignment, ver_alignment) , font, 1.0, transform)
+                return Label (L, text, coord, (hor_alignment, ver_alignment), font, 1.0, transform)
         else:
             return None
 
--- ipkiss24\ipkiss\io\output.py	(original)
+++ ipkiss24\ipkiss\io\output.py	(refactored)
@@ -50,7 +50,7 @@
     name_filter = RestrictedProperty(default = Filter(), restriction = RestrictType(Filter), doc = "filter class which is applied to all names")
     
     def __init__(self, o_stream = sys.stdout, **kwargs):
-        super(BasicOutput, self).__init__(o_stream = o_stream,**kwargs)
+        super(BasicOutput, self).__init__(o_stream = o_stream, **kwargs)
         self.__init_collector__()
 
     def __init_collector__(self):
@@ -147,7 +147,7 @@
         if (self.library == None):
                 self.library = get_current_library()
     
-        super(OutputBasic,self).do_collect(item,**kwargs)
+        super(OutputBasic, self).do_collect(item, **kwargs)
         
         return     
     
@@ -230,7 +230,7 @@
         
         self.collect_path_element(layer = item.layer, 
                                coordinates = coordinates, 
-                               line_width = item.line_width , 
+                               line_width = item.line_width, 
                                path_type = item.path_type)
         return
 
--- ipkiss24\ipkiss\io\output_gdsii.py	(original)
+++ ipkiss24\ipkiss\io\output_gdsii.py	(refactored)
@@ -37,7 +37,7 @@
 from ipkiss.log import IPKISS_LOG as LOG
 import logging
 from io import BytesIO
-from output_xml import FileOutputXmlRefactoringTool: Writing converted ipkiss24\ipkiss\io\output_gdsii.py to ipkissat3\ipkiss\io\output_gdsii.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\output_object.py
RefactoringTool: Writing converted ipkiss24\ipkiss\io\output_object.py to ipkissat3\ipkiss\io\output_object.py.
RefactoringTool: Refactored ipkiss24\ipkiss\io\output_xml.py

+from .output_xml import FileOutputXml
 import numpy as np
 from ipcore.properties.predefined import BoolProperty, RestrictedProperty
 from ipcore.properties.restrictions import RestrictType
@@ -49,7 +49,7 @@
 
 TECH = get_technology()
 
-__all__ = ["OutputGdsii","FileOutputGdsii", "MemoryOutputGdsii", "FileOutputXmlWithGDSFilters"]
+__all__ = ["OutputGdsii", "FileOutputGdsii", "MemoryOutputGdsii", "FileOutputXmlWithGDSFilters"]
 
 class OutputGdsii(OutputBasic):
         """ Writes GDS output to a stream """
@@ -58,7 +58,7 @@
         
         def __init__(self, o_stream = sys.stdout, **kwargs):
                 kwargs["allow_unmatched_kwargs"] = True
-                super(OutputGdsii, self).__init__(o_stream = o_stream,**kwargs)
+                super(OutputGdsii, self).__init__(o_stream = o_stream, **kwargs)
                 if 'flatten_structure_container' in kwargs:
                         self.flatten_structure_container = kwargs.get('flatten_structure_container')
                 elif hasattr(TECH.GDSII, 'FLATTEN_STRUCTURE_CONTAINER'):
@@ -166,7 +166,7 @@
                 p = Coord2(item.period).snap_to_grid()
                 corner1 = Coord2(item.n_o_periods[0] * p[0], 0.0)
                 corner2 = Coord2(0.0, item.n_o_periods[1] * p[1])
-                coordinates = Shape([(0.0, 0.0), corner1,corner2]).transform(T)
+                coordinates = Shape([(0.0, 0.0), corner1, corner2]).transform(T)
                 sname = self.name_filter(item.reference.name)[0]
                 self.collector += [__str_record__(gds_records.ARef),
                                    __str_record__(gds_records.SName, __hex_text__(sname))]
@@ -220,7 +220,7 @@
                 # FIXME. Containers are PICAZZO classes. This method should be converted to a Filter or a mixin
                 from picazzo.container.container import __StructureContainer__
                 from ipkiss.primitives.elements.reference import __RefElement__
-                if isinstance(item, __StructureContainer__) and isinstance(item.elements[0],__RefElement__):                        
+                if isinstance(item, __StructureContainer__) and isinstance(item.elements[0], __RefElement__):                        
                         sref = item.elements[0]  
                         sref_elements = sref.reference.elements
                         sref_transformation = sref.transformation + Translation(translation = sref.position)
@@ -242,7 +242,7 @@
         def collect___StructureContainer__(self, item):
                 # FIXME. Containers are PICAZZO classes. This method should be converted to a Filter or a mixin
                 from ipkiss.primitives.elements.reference import __RefElement__
-                if self.flatten_structure_container and isinstance(item.elements[0],__RefElement__):
+                if self.flatten_structure_container and isinstance(item.elements[0], __RefElement__):
                         sref = item.elements[0]
                         (new_elements, sref_levels) = self.__collect_container_elements__(item = item, sref_level_counter = 1)   
                         sref_transformation = sref.transformation + Translation(translation = sref.position)
@@ -271,9 +271,9 @@
         def __str_coordinatelist__ (self, coords):                
                 if isinstance(coords, Shape):
                         db_value_coordinates = self.__db_value_array__(coords.points)                        
-                        ret_data = ["%s%s" % (__hex_int4__(c0) , __hex_int4__(c1)) for c0,c1 in db_value_coordinates]
+                        ret_data = ["%s%s" % (__hex_int4__(c0), __hex_int4__(c1)) for c0, c1 in db_value_coordinates]
                 else: 
-                        ret_data = ["%s%s" % (__hex_int4__(self.__db_value__(c[0])) , __hex_int4__(self.__db_value__(c[1]))) for c in coords]
+                        ret_data = ["%s%s" % (__hex_int4__(self.__db_value__(c[0])), __hex_int4__(self.__db_value__(c[1]))) for c in coords]
                 return __str_record__(gds_records.XY, "".join(ret_data))
                         
                 
@@ -354,10 +354,10 @@
         return ''.join([__hex_int2__(length), __hex_int2__(record_type), hex_data]) #fastest string concatenation
 
 def __hex_int2__ (number):
-        return __hex_text__(pack(">H",number))
+        return __hex_text__(pack(">H", number))
 
 def __hex_int4__ (number):
-        return b2a_hex(pack(">l",number))
+        return b2a_hex(pack(">l", number))
 
 def __hex_float__(number):
         B1 = 0
@@ -369,15 +369,15 @@
                         B1 = 128
                         number = abs(number)
                 E = int(math.ceil(math.log(number)/math.log(16)))
-                inumber = long(number * 16L**(-E+14))
+                inumber = int(number * 16**(-E+14))
                 B1 += E+64
                 B2 = (inumber/281474976710656)%256
                 if B2 == 0:
                         B2 = 16
                         B1 += 1
-                S3 = (inumber%281474976710656)/4294967296L
-                L4 = inumber%4294967296L
-        return __hex_text__(pack(">BBHL",B1, B2, S3, L4))
+                S3 = (inumber%281474976710656)/4294967296
+                L4 = inumber%4294967296
+        return __hex_text__(pack(">BBHL", B1, B2, S3, L4))
 
 def __hex_text__ (text):
         t = b2a_hex(text)
--- ipkiss24\ipkiss\io\output_object.py	(original)
+++ ipkiss24\ipkiss\io\output_object.py	(refactored)
@@ -19,7 +19,7 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from output import OutputBasic
+from .output import OutputBasic
 from inspect import ismethod
 from ipkiss.log import IPKISS_LOG as LOG
 DO = set(dir(list()))
@@ -35,7 +35,7 @@
             s.append("NAME: " + str(item.name))
         d = set(dir(item)) - DO
         for i in d:
-            I = getattr(item,i)
+            I = getattr(item, i)
             if ismethod(I): continue
             try:
                 s.append("---" + str(i) + " = " + str(I))
@@ -70,7 +70,7 @@
         return "\n".join(["   PATHSHAPE = " + str(type(shape)),
                            self.__str_object__(coordinates)])
 
-    def str_boundary_element (self, layer,coordinates):
+    def str_boundary_element (self, layer, coordinates):
         return "\n".join(["   BOUNDARYSHAPE = " + self.__str_object__(coordinates)])
 
     def str_label_element (self, item):
--- ipkiss24\ipkiss\io\output_xml.py	(original)
+++ ipkiss24\ipkiss\io\output_xml.py	(refactored)
@@ -39,7 +39,7 @@
 import logging
 from ..technology.settings import TECH
 
-__all__ = ["OutputXml","FileOutputXml","MemoryOutputXml"]
+__all__ = ["OutputXml", "FileOutputXml", "MemoryOutputXml"]
 
 class IpcoreOutputXmlException(IpcoreAttributeException):
     pass
@@ -68,7 +68,7 @@
         self.__collect_library_header__(library)
         attribs = {"name": library.name}
         precision = abs(math.floor(math.log10(library.units_per_grid)))
-        self.coord_format_str = "(%%.%df, %%.%df)"%(precision,precision) 
+        self.coord_format_str = "(%%.%df, %%.%df)"%(precision, precision) 
         self.topElem = self.__makeXMLElement__("IPKISSLIBRARY", attribs)
         self.referedItemsInLibrary = []
         self.collect(library.structures,  **kwargs)
@@ -97,7 +97,7 @@
         '''Create an XML element as top element (without parent) or as subelement (with the given parent)'''
 
         #force all attribute values to string
-        for k in p_attribs.keys():
+        for k in list(p_attribs.keys()):
             p_attribs[k] = str(p_attribs[k])
 
         if (p_parentXMLElement == None):
@@ -113,7 +113,7 @@
         xCo = int(p_coordinate[0]*gridsperunit)
         yCo = int(p_coordinate[1]*gridsperunit)
         attrib = {"x": xCo, "y":yCo}
-        el = self.__makeXMLElement__("POINT",attrib,p_parentXMLElement)
+        el = self.__makeXMLElement__("POINT", attrib, p_parentXMLElement)
         return el
 
 
@@ -143,14 +143,14 @@
     def __getLayerPurposeNmbr(self, p_Item):
         '''Derive the layer number and purpose number using the appropriate layer map (i.e. GDS)'''RefactoringTool: Writing converted ipkiss24\ipkiss\io\output_xml.py to ipkissat3\ipkiss\io\output_xml.py.
RefactoringTool: No changes to ipkiss24\ipkiss\logos\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\logos\__init__.py to ipkissat3\ipkiss\logos\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\logos\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\logos\basic.py to ipkissat3\ipkiss\logos\basic.py.
RefactoringTool: No changes to ipkiss24\ipkiss\path_definition\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\path_definition\__init__.py to ipkissat3\ipkiss\path_definition\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\__init__.py to ipkissat3\ipkiss\plugins\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\__init__.py to ipkissat3\ipkiss\plugins\photonics\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\port\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\port\__init__.py to ipkissat3\ipkiss\plugins\photonics\port\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\port\aspect.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\port\aspect.py to ipkissat3\ipkiss\plugins\photonics\port\aspect.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\port\port.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\port\port.py to ipkissat3\ipkiss\plugins\photonics\port\port.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\port\port_list.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\port\port_list.py to ipkissat3\ipkiss\plugins\photonics\port\port_list.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\routing\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\__init__.py to ipkissat3\ipkiss\plugins\photonics\routing\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\routing\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\basic.py to ipkissat3\ipkiss\plugins\photonics\routing\basic.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\routing\bundle_connect.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\bundle_connect.py to ipkissat3\ipkiss\plugins\photonics\routing\bundle_connect.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\routing\connect.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\connect.py to ipkissat3\ipkiss\plugins\photonics\routing\connect.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\routing\manhattan.py

         try:
-            gdsLayer = self.layer_map.get(p_Item,None)   
+            gdsLayer = self.layer_map.get(p_Item, None)   
             lyr = gdsLayer.number
             pur = gdsLayer.datatype
-        except Exception, e:
-            LOG.error("Warning: layer %s not found: %s - forcing layer number to 1." %(p_Item,e))
+        except Exception as e:
+            LOG.error("Warning: layer %s not found: %s - forcing layer number to 1." %(p_Item, e))
             lyr = 1
             pur = 100
-        return (lyr,pur)	
+        return (lyr, pur)	
 
     def collect_Label (self, item,  additional_transform = None):
         #resolve the attributes 
@@ -194,7 +194,7 @@
         aname = self.name_filter(item.reference.name)[0]
         #aname = aname.replace("-","_").replace(" ","_").replace(".","_")		
         #self.__makeXMLElement__("AREF", {"referee" : aname, "n_o_periods" : str(item.n_o_periods), "period" : str(item.period), "transformation": str(T)}, self.topElem) 		
-        self.__makeXMLElement__("AREF", {"referee" : aname, "n_o_periods" : str(item.n_o_periods), "period" : self.coord_format_str%(item.period[0],item.period[1]), "transformation": str(T)}, self.topElem) 		
+        self.__makeXMLElement__("AREF", {"referee" : aname, "n_o_periods" : str(item.n_o_periods), "period" : self.coord_format_str%(item.period[0], item.period[1]), "transformation": str(T)}, self.topElem) 		
         self.referedItemsInLibrary.append(item.reference) #collect them add the end and add as top-level XML-elements
         return 
 
@@ -203,7 +203,7 @@
             T = item.transformation + additional_transform
             coordinates = T(ShapeRectangle(item.center, item.box_size)).tolist()
             self.collect_boundary_element(item.layer, coordinates)
-        except Exception, err:
+        except Exception as err:
             msg = "OutputXml::Fatal exception in collect_BoxElement : %s" %err
             LOG.error(msg)
             raise err
@@ -215,7 +215,7 @@
         try:
             lyrPurp = self.__getLayerPurposeNmbr(layer)
             self.__makePathXMLElement(None, coordinates.points, lyrPurp[0], lyrPurp[1], line_width, self.topElem)   
-        except Exception, err:
+        except Exception as err:
             msg = "OutputXml::Fatal exception in collect_path_element : %s" %err
             LOG.error(msg)	
             raise err
@@ -226,7 +226,7 @@
         try:
             lyrPurp = self.__getLayerPurposeNmbr(layer)
             self.__makeBoundaryXMLElement(None, coordinates.points, lyrPurp[0], lyrPurp[1], self.topElem)
-        except Exception, err:
+        except Exception as err:
             msg = "OutputXml::Fatal exception in collect_boundary_element : %s" %err
             LOG.error(msg)	
             raise err
@@ -234,7 +234,7 @@
 
     def write(self, item):		
         self.collect(item)
-        self.o_stream.write(etree.tostring(self.topElem).replace('><','>\n<'))
+        self.o_stream.write(etree.tostring(self.topElem).replace('><', '>\n<'))
         self.o_stream.flush()	
 
 
--- ipkiss24\ipkiss\logos\basic.py	(original)
+++ ipkiss24\ipkiss\logos\basic.py	(refactored)
@@ -29,7 +29,7 @@
     layer = LayerProperty(required = True)
     size = Size2Property(default = (50.0, 50.0))
     
-    def __init__(self, layer, size= (50.0,50.0), **kwargs):
+    def __init__(self, layer, size= (50.0, 50.0), **kwargs):
         super(Logo, self).__init__(
             layer = layer,
             size = size,
@@ -39,8 +39,8 @@
 
     def define_name(self):
         logo_size = (1.0, 1.1)
-        scale = min([self.size[0]/logo_size[0],self.size[1]/logo_size[1]])
-        return "%s_L%d_S%d" % (self.__name_prefix__ ,
+        scale = min([self.size[0]/logo_size[0], self.size[1]/logo_size[1]])
+        return "%s_L%d_S%d" % (self.__name_prefix__,
                                self.layer.id(),
                                int(scale*1000)
                            )
--- ipkiss24\ipkiss\plugins\photonics\port\aspect.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\port\aspect.py	(refactored)
@@ -62,13 +62,13 @@
     
     def get_optical_ports_within_angles(self, start_angle, end_angle):
         p = self.optical_ports
-        return p.get_ports_within_angles(start_angle,end_angle)
+        return p.get_ports_within_angles(start_angle, end_angle)
 
     def define_optical_west_ports(self):
         return self.get_optical_ports_within_angles(180.0 - 0.5 * self.port_angle_decision, 180.0 + 0.5 * self.port_angle_decision)
     optical_west_ports = OpticalPortListProperty(locked = True)
 
-    def define_optical_east_ports(self,ports):
+    def define_optical_east_ports(self, ports):
         return self.get_optical_ports_within_angles(-0.5 * self.port_angle_decision, +0.5 * self.port_angle_decision)
     optical_east_ports = OpticalPortListProperty(locked = True)
 
@@ -93,7 +93,7 @@
     def define_optical_ports(self):
         pl = OpticalPortList()
         for p in self.get_ports_on_domain(OpticalDomain):
-            if not isinstance(p,VerticalOpticalPort):
+            if not isinstance(p, VerticalOpticalPort):
                 pl.append(p)
         return pl
     optical_ports = property(define_optical_ports)
--- ipkiss24\ipkiss\plugins\photonics\port\port.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\port\port.py	(refactored)
@@ -22,7 +22,7 @@
 from ipkiss.all import *
 from math import cos, sin, pi
 from ipkiss.log import IPKISS_LOG as LOG
-from ipkiss.aspects.port.port import __InPort__, __OutPort__, __OrientedPort__,__OutOfPlanePort__
+from ipkiss.aspects.port.port import __InPort__, __OutPort__, __OrientedPort__, __OutOfPlanePort__
 from ipkiss.plugins.photonics.wg.definition import WaveguideDefCrossSectionProperty 
 from pysics.basics.domain import DomainProperty
 from pysics.optics import OpticalDomain
@@ -38,7 +38,7 @@
     domain = DomainProperty(default=OpticalDomain, locked=True)
     
 
-class OpticalPort(__OpticalPort__,__OrientedPort__):
+class OpticalPort(__OpticalPort__, __OrientedPort__):
     wg_definition = WaveguideDefCrossSectionProperty(default = TECH.WGDEF.DEFAULT, doc = "Waveguide definition for the waveguide connecting to this port")
     corner1 = FunctionNameProperty(fget_name = "get_corner1")
     corner2 = FunctionNameProperty(fget_name = "get_corner2")
@@ -135,7 +135,7 @@
     return RestrictedProperty(internal_member_name, restriction = R, **kwargs)
 
 
-class VerticalOpticalPort(__OpticalPort__,__OutOfPlanePort__):
+class VerticalOpticalPort(__OpticalPort__, __OutOfPlanePort__):
     """ Optical port in 3D, for optical I/O 
         Specific optical features to be added in the future? 
            - wavelength-dependent angle
--- ipkiss24\ipkiss\plugins\photonics\routing\manhattan.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\routing\manhattan.py	(refactored)
@@ -47,7 +47,7 @@
         a = I.angle_deg
         s= self.start_straight
         count = 0
-        while 1:
+        while True:
             count += 1
             if count > 40:
                 LOG.error("Exceeds allowed steps in RouteManhattanBasic: \nInput:%s\nOutput:%s\nShape:%s" %
@@ -93,7 +93,7 @@
                     a = -sigp * 90.0
                 else:
                     # more complex turn
-                    p = (min(p[0] - s - bs1, -self.end_straight - self.min_straight - 2 * bs1 - bs2) , p[1])
+                    p = (min(p[0] - s - bs1, -self.end_straight - self.min_straight - 2 * bs1 - bs2), p[1])
                     a = -sigp * 90.0
             elif a % 180.0 == 90.0:
                 siga = -sign((a % 360.0) - 180.0)
@@ -115,7 +115,7 @@
                 elif -p[0] - ( self.end_straight + bs2) > - threshold:
                     # make vertical S-bend to get sufficient room for movement
                     S += (p[0], p[1] + siga * (bs2 + s))
-                    p = (min(p[0] - bs1 + bs2 + self.min_straight, - 2 * bs1 -bs2 - self.end_straight - self.min_straight),p[1] + siga * (bs2 + s))
+                    p = (min(p[0] - bs1 + bs2 + self.min_straight, - 2 * bs1 -bs2 - self.end_straight - self.min_straight), p[1] + siga * (bs2 + s))RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\manhattan.py to ipkissat3\ipkiss\plugins\photonics\routing\manhattan.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\routing\to_line.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\routing\to_line.py to ipkissat3\ipkiss\plugins\photonics\routing\to_line.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\technology\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\technology\__init__.py to ipkissat3\ipkiss\plugins\photonics\technology\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\technology\common.py

                     # a remains the same
                 else:
                     # tricky case, because there is no valable solution for this
--- ipkiss24\ipkiss\plugins\photonics\routing\to_line.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\routing\to_line.py	(refactored)
@@ -65,16 +65,16 @@
 
         angle = round(self.angle_out - self.input_port.angle_deg, 5)%360.0
         if angle == 0.0:
-            pts = points_add_polar(pts,max(self.start_straight, self.end_straight) , self.angle_out)
+            pts = points_add_polar(pts, max(self.start_straight, self.end_straight), self.angle_out)
         elif angle == 180.0:
             bs1_90, bs2_90 = self.get_bend90_size()
-            pts = points_add_polar(pts,self.start_straight + bs1_90, self.input_port.angle_deg)
-            pts = points_add_polar(pts,self.min_straight + bs1_90 + bs2_90, self.input_port.angle_deg + 90.0)
-            pts = points_add_polar(pts,self.end_straight + bs2_90, self.input_port.angle_deg + 180.0)
+            pts = points_add_polar(pts, self.start_straight + bs1_90, self.input_port.angle_deg)
+            pts = points_add_polar(pts, self.min_straight + bs1_90 + bs2_90, self.input_port.angle_deg + 90.0)
+            pts = points_add_polar(pts, self.end_straight + bs2_90, self.input_port.angle_deg + 180.0)
         else:
             bs1, bs2 = self.get_bend_size(angle)
-            pts = points_add_polar(pts,self.start_straight + bs1, self.input_port.angle_deg)
-            pts = points_add_polar(pts,self.end_straight + bs2 , self.angle_out)
+            pts = points_add_polar(pts, self.start_straight + bs1, self.input_port.angle_deg)
+            pts = points_add_polar(pts, self.end_straight + bs2, self.angle_out)
         return pts
 
 class RouteToEast(RouteToAngle):
@@ -154,16 +154,16 @@
     def define_angle_out(self):
         return self.input_port.angle_deg
 
-    def find_angle(self,D,max_a, min_a, res_a):
+    def find_angle(self, D, max_a, min_a, res_a):
         if int(abs(max_a-min_a)/abs(res_a))<=2.0:
             return min_a
         h_a = 0.5*(max_a+min_a)
         h_bs1, h_bs2 = self.get_bend_size(h_a)
         Lh = (h_bs1 + h_bs2 + self.min_straight)
         if  D < Lh * sin(h_a * DEG2RAD):
-            return self.find_angle(D,h_a,min_a, res_a)
-        else:
-            return self.find_angle(D,max_a,h_a, res_a)
+            return self.find_angle(D, h_a, min_a, res_a)
+        else:
+            return self.find_angle(D, max_a, h_a, res_a)
         
         
     def define_points(self, pts):
@@ -174,14 +174,14 @@
         # parallel or coinciding
         if line == line2:
             # coinciding
-            pts = points_add_polar(pts,max(self.start_straight, self.end_straight), self.angle_out)
+            pts = points_add_polar(pts, max(self.start_straight, self.end_straight), self.angle_out)
         else:
             D = line.distance(self.input_port.position)
             max_bs1, max_bs2 = self.get_bend_size(self.max_s_bend_angle)
             Lmax = (max_bs1 + max_bs2 + self.min_straight)
             if  D >= Lmax * sin(self.max_s_bend_angle * DEG2RAD):
                 angle = self.max_s_bend_angle
-            angle = self.find_angle(D,self.max_s_bend_angle,0.0,self.s_bend_angle_resolution)
+            angle = self.find_angle(D, self.max_s_bend_angle, 0.0, self.s_bend_angle_resolution)
             #for angle in arange(self.max_s_bend_angle, 0.0, self.s_bend_angle_resolution):
                 #bs1, bs2 = self.get_bend_size(angle)
                 #L = (bs1 + bs2 + self.min_straight)
@@ -224,14 +224,14 @@
                 pts.append(self.input_port.position)
                 if (self.input_port.angle_deg - self.angle_out)%360.0 < 0.1:
                     # same direction: min_straight
-                    pts = points_add_polar(pts,max(self.start_straight , self.end_straight), self.angle_out)
+                    pts = points_add_polar(pts, max(self.start_straight, self.end_straight), self.angle_out)
                 else:
                     # opposite_direction: U-turn
-                    pts = points_add_polar(pts,self.start_straight + bs1, self.input_port.angle_deg)
-                    pts = points_add_polar(pts,bs1+bs2 + self.min_straight, self.input_port.angle_deg + 90.0)
-                    pts = points_add_polar(pts,bs1+bs2 + max(self.min_straight, self.start_straight), self.input_port.angle_deg + 180.0)
-                    pts = points_add_polar(pts,bs1+bs2 + self.min_straight, self.input_port.angle_deg + 270.0)
-                    pts = points_add_polar(pts,bs2+ self.end_straight, self.angle_out)
+                    pts = points_add_polar(pts, self.start_straight + bs1, self.input_port.angle_deg)
+                    pts = points_add_polar(pts, bs1+bs2 + self.min_straight, self.input_port.angle_deg + 90.0)
+                    pts = points_add_polar(pts, bs1+bs2 + max(self.min_straight, self.start_straight), self.input_port.angle_deg + 180.0)
+                    pts = points_add_polar(pts, bs1+bs2 + self.min_straight, self.input_port.angle_deg + 270.0)
+                    pts = points_add_polar(pts, bs2+ self.end_straight, self.angle_out)
             else:
                 D = line.distance(self.input_port.position)
                 if (self.input_port.angle_deg - self.angle_out)%360.0 < 0.1:
@@ -249,15 +249,15 @@
                 elif D - (bs1 + bs2+ self.min_straight) >= -0.1/get_grids_per_unit():
                         # sufficient distance
                         pts.append(self.input_port.position)
-                        pts = points_add_polar(pts,self.start_straight + bs1, self.input_port.angle_deg)
+                        pts = points_add_polar(pts, self.start_straight + bs1, self.input_port.angle_deg)
                         pts.append(line.closest_point(pts[-1]))
-                        pts = points_add_polar(pts,self.end_straight+bs2, self.angle_out)
+                        pts = points_add_polar(pts, self.end_straight+bs2, self.angle_out)
                 else:
                         # insufficient distance
                         pts.append(self.input_port.position)
-                        pts = points_add_polar(pts,self.start_straight + bs1, self.input_port.angle_deg)
+                        pts = points_add_polar(pts, self.start_straight + bs1, self.input_port.angle_deg)
                         A = angle_deg(line.closest_point(self.input_port.position), self.input_port.position)
-                        pts = points_add_polar(pts,bs1+bs2+ self.min_straight, A)
+                        pts = points_add_polar(pts, bs1+bs2+ self.min_straight, A)
                         P2 = Coord2(pts[-1][0], pts[-1][1]).move_polar(bs2+ self.min_straight, self.angle_out)
                         P = RouteToParallelLine(input_port = OpticalPort(position = P2, 
                                                              wg_definition = self.input_port.wg_definition, 
@@ -282,7 +282,7 @@
                     # simple case: just a single bend
                     pts.append(self.input_port.position)
                     pts.append(i)
-                    pts = points_add_polar(pts,bs2 + self.end_straight, self.angle_out)
+                    pts = points_add_polar(pts, bs2 + self.end_straight, self.angle_out)
 
                 else:
                     pts.append(self.input_port.position)
@@ -317,7 +317,7 @@
                             if distance(P2, P1) >= L1_2+L2_1+s:
                                 break
                     pts.extend([P1, P2])
-                    pts = points_add_polar(pts,L2_2+self.end_straight, self.angle_out)                                       
+                    pts = points_add_polar(pts, L2_2+self.end_straight, self.angle_out)                                       
             else:
                 pts.append(self.input_port.position)
                 pts = points_add_polar(pts, self.start_straight + bs1, self.input_port.angle_deg)
--- ipkiss24\ipkiss\plugins\photonics\technology\common.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\technology\common.py	(refactored)RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\technology\common.py to ipkissat3\ipkiss\plugins\photonics\technology\common.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\technology\default\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\technology\default\__init__.py to ipkissat3\ipkiss\plugins\photonics\technology\default\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\technology\default\agnostic.py

@@ -225,16 +225,16 @@
                   ]
     
         for process in process_display_order:
-            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA),DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF_AREA) , DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.LINE) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.DF.TEXT) , DISPLAY_TEXT),
-                          (PPLayer(process, TECH.PURPOSE.DF.HOLE) , DISPLAY_HOLE),
+            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.LINE), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.DF.TEXT), DISPLAY_TEXT),
+                          (PPLayer(process, TECH.PURPOSE.DF.HOLE), DISPLAY_HOLE),
                           (PPLayer(process, TECH.PURPOSE.DF.TRENCH), DISPLAY_LF),
-                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE) , DISPLAY_HOLE),
+                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE), DISPLAY_HOLE),
                           ]
         
         self.PREDEFINED_STYLE_SETS.PURPOSE_HIGHLIGHT  = style_set
--- ipkiss24\ipkiss\plugins\photonics\technology\default\__init__.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\technology\default\__init__.py	(refactored)
@@ -19,7 +19,7 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree,DelayedInitTechnologyTree
+from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
 
 __all__ = ["TECH"]
@@ -37,7 +37,7 @@
 TECH.METRICS.ANGLE_STEP = 1.0
 
 from ..common import *
-from agnostic import *
+from .agnostic import *
 
 #activate the "ports" mixin
 import ipkiss.plugins.photonics.port.aspect 
--- ipkiss24\ipkiss\plugins\photonics\technology\default\agnostic.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\technology\default\agnostic.py	(refactored)
@@ -21,7 +21,7 @@
 
 from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
-from ipkiss.io.gds_layer import GdsiiLayerInputMap,GdsiiLayerOutputMap
+from ipkiss.io.gds_layer import GdsiiLayerInputMap, GdsiiLayerOutputMap
 from ipkiss.process.layer import PPLayer as PPLayer
 
 TECH = get_technology()
@@ -36,13 +36,13 @@
 TECH.PPLAYER.FC = TechnologyTree()
 
 ### WG ###
-TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_TRE")
-TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_SQ")
-TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.HOLE,name="WG_HEX")
-TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.MARKER,name="WG_MRK")
-TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TEXT,name="WG_TXT")
-TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF.LINE,name="WG_LIN")
-TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF_AREA,name="WG_LFAREA")
+TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_TRE")
+TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_SQ")
+TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.HOLE, name="WG_HEX")
+TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.MARKER, name="WG_MRK")
+TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TEXT, name="WG_TXT")
+TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF.LINE, name="WG_LIN")
+TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF_AREA, name="WG_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.WG.CRITICAL = TECH.PPLAYER.WG.TRENCH | TECH.PPLAYER.WG.SQUARE | TECH.PPLAYER.WG.HOLE | TECH.PPLAYER.WG.MARKER | (TECH.PPLAYER.WG.LINE ^ TECH.PPLAYER.WG.LF_AREA) & TECH.PPLAYER.WG.LF_AREA
@@ -54,13 +54,13 @@
 TECH.PPLAYER.WG.ALL = TECH.PPLAYER.WG.CRITICAL | TECH.PPLAYER.WG.NONCRITICAL
 
 ### FC ###
-TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_TRE")
-TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_SQ")
-TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.HOLE,name="FC_HEX")
-TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.MARKER,name="FC_MRK")
-TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TEXT,name="FC_TXT")
-TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF.LINE,name="FC_LIN")
-TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF_AREA,name="FC_LFAREA")
+TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_TRE")
+TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_SQ")
+TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.HOLE, name="FC_HEX")
+TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.MARKER, name="FC_MRK")
+TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TEXT, name="FC_TXT")
+TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF.LINE, name="FC_LIN")
+TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF_AREA, name="FC_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.FC.CRITICAL = TECH.PPLAYER.FC.TRENCH | TECH.PPLAYER.FC.SQUARE | TECH.PPLAYER.FC.HOLE | (TECH.PPLAYER.FC.LINE ^ TECH.PPLAYER.FC.LF_AREA) & TECH.PPLAYER.FC.LF_AREA
@@ -88,11 +88,11 @@
       TECH.PURPOSE.LF.DUMMY: 5,
       TECH.PURPOSE.LF_AREA: 9, 
       TECH.PURPOSE.DF_AREA: 10, 
-      TECH.PURPOSE.DF.MARKER : 11,
+      TECH.PURPOSE.DF.MARKER: 11,
       TECH.PURPOSE.DF.HOLE: 12, 
       TECH.PURPOSE.DF.TRENCH: 13,
       TECH.PURPOSE.DF.SQUARE: 14,
-      TECH.PURPOSE.DF.TEXT : 15,
+      TECH.PURPOSE.DF.TEXT: 15,
       TECH.PURPOSE.DF.DUMMY: 16,
       TECH.PURPOSE.NO_GEN: 20,
       TECH.PURPOSE.NO_FILL: 21,
@@ -177,8 +177,8 @@
 
 TECH.MATERIALS = MaterialFactory()
 
-TECH.MATERIALS.AIR = Material(name = "air",display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
-TECH.MATERIALS.SILICON = Material(name = "silicon",display_style = DisplayStyle(color = COLOR_CYAN))
+TECH.MATERIALS.AIR = Material(name = "air", display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
+TECH.MATERIALS.SILICON = Material(name = "silicon", display_style = DisplayStyle(color = COLOR_CYAN))
 TECH.MATERIALS.SILICON_OXIDE = Material(name = "silicon oxide", display_style = DisplayStyle(color = COLOR_BLUE))
 TECH.MATERIALS.GERMANIUM = Material(name = "germanium", display_style = DisplayStyle(color = COLOR_DARK_GREEN))
 
@@ -189,31 +189,31 @@
 MSTACK_SOI_SILICON_OXIDE_HEIGHT = 0.500
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_AIR = MaterialStack(name = "Air", 
-                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                        (TECH.MATERIALS.AIR,0.380)], 
+                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                        (TECH.MATERIALS.AIR, 0.380)], 
                                                     display_style = DisplayStyle(color = COLOR_BLUE))RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\technology\default\agnostic.py to ipkissat3\ipkiss\plugins\photonics\technology\default\agnostic.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\photonics\wg\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\__init__.py to ipkissat3\ipkiss\plugins\photonics\wg\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\basic.py to ipkissat3\ipkiss\plugins\photonics\wg\basic.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\bundle.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\bundle.py to ipkissat3\ipkiss\plugins\photonics\wg\bundle.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\connect.py

 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_80nm = MaterialStack(name = "80nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.080),
-                                                                            (TECH.MATERIALS.AIR,0.300)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.080),
+                                                                            (TECH.MATERIALS.AIR, 0.300)], 
                                                         display_style = DisplayStyle(color = COLOR_GREEN))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm = MaterialStack(name = "150nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.150),
-                                                                            (TECH.MATERIALS.AIR,0.230)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.150),
+                                                                            (TECH.MATERIALS.AIR, 0.230)], 
                                                         display_style = DisplayStyle(color = COLOR_YELLOW))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_220nm = MaterialStack(name = "220nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.220),
-                                                                            (TECH.MATERIALS.AIR,0.160)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.220),
+                                                                            (TECH.MATERIALS.AIR, 0.160)], 
                                                         display_style = DisplayStyle(color = COLOR_RED))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_380nm = MaterialStack(name = "380nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.380)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.380)], 
                                                         display_style = DisplayStyle(color = COLOR_WHITE))   
 
 TECH.MATERIALS.SILICON.epsilon = 12
@@ -247,8 +247,8 @@
                         ((1, 0), TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm),
                         ((1, 1), TECH.MATERIAL_STACKS.MSTACK_SOI_AIR),
                       ],   
-            is_lf_fabrication = {TECH.PROCESS.WG : False, 
-                                 TECH.PROCESS.FC : False,} #etch to 220nm is implicitely present over the whole canvas
+            is_lf_fabrication = {TECH.PROCESS.WG: False, 
+                                 TECH.PROCESS.FC: False,} #etch to 220nm is implicitely present over the whole canvas
             )
 
 
--- ipkiss24\ipkiss\plugins\photonics\wg\basic.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\basic.py	(refactored)
@@ -64,7 +64,7 @@
                                               self.trench_width,
                                               self.process.extension)    
     def define_name(self):
-        return "%s_WIRE_W%d_T%d"%(self.process.extension,self.wg_width*1000,self.trench_width*1000)
+        return "%s_WIRE_W%d_T%d"%(self.process.extension, self.wg_width*1000, self.trench_width*1000)
 
 class WgLFElDefinition(WgElDefinition):
     """wire-like waveguide definition with a single shape but without trench"""
--- ipkiss24\ipkiss\plugins\photonics\wg\bundle.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\bundle.py	(refactored)
@@ -64,11 +64,11 @@
             D0 = distance(S1[0], S2[0])
             D1 = distance(S1[-1], S2[-1])
             w1 = wg1.in_ports[0].wg_definition.wg_width
-            if hasattr(wg1.in_ports[0].wg_definition,'trench_width'):
+            if hasattr(wg1.in_ports[0].wg_definition, 'trench_width'):
                 t1 = wg1.in_ports[0].wg_definition.trench_width
             else: t1 = 0.0
             w2 = Wg2.in_ports[0].wg_definition.wg_width
-            if hasattr(Wg2.in_ports[0].wg_definition,'trench_width'):
+            if hasattr(Wg2.in_ports[0].wg_definition, 'trench_width'):
                 t2 = Wg2.in_ports[0].wg_definition.trench_width
             else: t2 = 0.0
             D_ref = t1 + t2 + 0.5*(w1 + w2)
@@ -128,14 +128,14 @@
     trench_widths = RestrictedProperty(restriction = RestrictList(RESTRICT_POSITIVE), required = True)
     
     def __make_wg_element__(shape, wg_width, trench_width, process):
-        wg_def = WgElDefinition(wg_width = wg_width , trench_width = trench_width, process = process)    
+        wg_def = WgElDefinition(wg_width = wg_width, trench_width = trench_width, process = process)    
         return wg_def(shape = shape)
 
     def define_waveguides(self):
         if (len(self.shapes) != len(self.wg_widths) or
             len(self.wg_widths) != len(self.trench_widths)):
             raise AttributeError("Length of shapes, wg_widths and trench_widths should be identical in WgElBundleGeneric")
-        waveguides = [self.__make_wg_element__(S, w, t, self.process) for (S,w,t) in zip(self.shapes, self.wg_widths, self.trench_widths)]
+        waveguides = [self.__make_wg_element__(S, w, t, self.process) for (S, w, t) in zip(self.shapes, self.wg_widths, self.trench_widths)]
         return waveguides
 
 
@@ -151,7 +151,7 @@
     
     def define_waveguides(self):
         waveguides = []
-        for (S,w,t, r) in zip(self.shapes, self.wg_widths, self.trench_widths, self.bend_radii):
+        for (S, w, t, r) in zip(self.shapes, self.wg_widths, self.trench_widths, self.bend_radii):
             wg_def = WgElDefinition(wg_width = w, trench_width = t, process = self.process)
             connector_wg_def = WaveguidePointRoundedConnectElementDefinition(wg_definition = wg_def,
                                                                              bend_radius = r,
--- ipkiss24\ipkiss\plugins\photonics\wg\connect.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\connect.py	(refactored)
@@ -41,24 +41,24 @@
 
     @cache()
     def get_bend90_size(self):
-        s = Shape([(-100*self.bend_radius,0), (0,0), (0.0, 100*self.bend_radius)])
+        s = Shape([(-100*self.bend_radius, 0), (0, 0), (0.0, 100*self.bend_radius)])
         RA = self.rounding_algorithm
         s = RA(original_shape = s, radius = self.bend_radius)
         if len(s)>1:
             return abs(s[1].x), abs(s[-2].y)
         else:
-            return 0,0
+            return 0, 0
     
     def get_bend_size(self, angle):
-        if angle == 0.0: return 0,0
-        s = Shape([(-100*self.bend_radius,0), (0,0), (100*self.bend_radius*math.cos(angle * DEG2RAD), 100*self.bend_radius*math.sin(angle * DEG2RAD))])
+        if angle == 0.0: return 0, 0
+        s = Shape([(-100*self.bend_radius, 0), (0, 0), (100*self.bend_radius*math.cos(angle * DEG2RAD), 100*self.bend_radius*math.sin(angle * DEG2RAD))])RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\connect.py to ipkissat3\ipkiss\plugins\photonics\wg\connect.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\definition.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\definition.py to ipkissat3\ipkiss\plugins\photonics\wg\definition.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\slotted.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\slotted.py to ipkissat3\ipkiss\plugins\photonics\wg\slotted.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\photonics\wg\window.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\photonics\wg\window.py to ipkissat3\ipkiss\plugins\photonics\wg\window.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\simulation\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\simulation\__init__.py to ipkissat3\ipkiss\plugins\simulation\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\simulation\simulation.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\simulation\simulation.py to ipkissat3\ipkiss\plugins\simulation\simulation.py.
RefactoringTool: No changes to ipkiss24\ipkiss\plugins\vfabrication\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\__init__.py to ipkissat3\ipkiss\plugins\vfabrication\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\vfabrication\elements.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\elements.py to ipkissat3\ipkiss\plugins\vfabrication\elements.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\vfabrication\geometry.py

         RA = self.rounding_algorithm
 
         s = RA(original_shape = s, radius = self.bend_radius)
         if len(s)>1:
             return distance(s[1]), distance(s[-2]) #L1,L2
         else:
-            return 0,0
+            return 0, 0
 
 class __RoundedWaveguide__(__RoundedShape__):
     manhattan = BoolProperty(default = False)
@@ -252,7 +252,7 @@
         return "WGPRCEDEF:br=%f-mh=%s-wd=%s"%(self.bend_radius, str(self.manhattan), str(self.wg_definition))
     
     def define_name(self):
-        return "WGPRCEDEF_R%d_M%s_W%s"%(self.bend_radius*1000,str(self.manhattan),self.wg_definition.name)
+        return "WGPRCEDEF_R%d_M%s_W%s"%(self.bend_radius*1000, str(self.manhattan), self.wg_definition.name)
     
 __WaveguidePointRoundedConnectElementDefinitionPathDefinition__ = WaveguidePointRoundedConnectElementDefinition.__WaveguidePointRoundedConnectElementDefinitionPathDefinition__
 
@@ -358,15 +358,15 @@
     expanded_positions = DefinitionProperty(fdef_name = "define_expanded_positions")
 
     def define_expanded_lengths(self):
-        (l,w,p) = self.__get_expanded_lengths_widths_positions__()
+        (l, w, p) = self.__get_expanded_lengths_widths_positions__()
         return l
     
     def define_expanded_widths(self):
-        (l,w,p) = self.__get_expanded_lengths_widths_positions__()
+        (l, w, p) = self.__get_expanded_lengths_widths_positions__()
         return w
                
     def define_expanded_positions(self):
-        (l,w,p) = self.__get_expanded_lengths_widths_positions__()
+        (l, w, p) = self.__get_expanded_lengths_widths_positions__()
         return p
     
     @cache()
--- ipkiss24\ipkiss\plugins\photonics\wg\definition.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\definition.py	(refactored)
@@ -52,10 +52,10 @@
         return not self.__eq__(other)
     
     def get_bend90_size(self):
-        return 0,0
+        return 0, 0
     
     def get_bend_size(self, angle):
-        return 0,0
+        return 0, 0
     
     def get_wg_definition_cross_section(self):
         return self
@@ -67,7 +67,7 @@
     
     def __init__(self, internal_member_name = None, **kwargs):
         kwargs["restriction"] = RestrictType(allowed_types=[BaseWaveguideDefinition])
-        super(WaveguideDefCrossSectionProperty,self).__init__(internal_member_name = internal_member_name, **kwargs)                           
+        super(WaveguideDefCrossSectionProperty, self).__init__(internal_member_name = internal_member_name, **kwargs)                           
     
     def __set__(self, obj, value):
         wg_def_cross_section = value.get_wg_definition_cross_section()
--- ipkiss24\ipkiss\plugins\photonics\wg\slotted.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\slotted.py	(refactored)
@@ -104,8 +104,8 @@
                 elems += Boundary(PPLayer(self.process, TECH.PURPOSE.LF.LINE), C2a + C2b.reversed())
                 T1 = ShapeOffset(s, 0.5*self.wg_width + self.trench_width)
                 T2 = ShapeOffset(s, -0.5*self.wg_width - self.trench_width)
-                end_face = Shape([C1b[-1],C1a[-1],C2a[-1],C2b[-1]])
-                start_face = Shape([C2b[0],C2a[0],C1a[0],C1b[0]])
+                end_face = Shape([C1b[-1], C1a[-1], C2a[-1], C2b[-1]])
+                start_face = Shape([C2b[0], C2a[0], C1a[0], C1b[0]])
                 elems += Boundary(PPLayer(self.process, TECH.PURPOSE.LF_AREA), T1 + end_face + T2.reversed() + start_face)
             return elems    
         
@@ -149,8 +149,8 @@
                 elems += Boundary(self.layer, C2a + C2b.reversed())
                 T1 = ShapeOffset(ts, 0.5*self.wg_width + self.trench_width)
                 T2 = ShapeOffset(ts, -0.5*self.wg_width - self.trench_width)
-                end_face = Shape([C1b[-1],C1a[-1],C2a[-1],C2b[-1]])
-                start_face = Shape([C2b[0],C2a[0],C1a[0],C1b[0]])
+                end_face = Shape([C1b[-1], C1a[-1], C2a[-1], C2b[-1]])
+                start_face = Shape([C2b[0], C2a[0], C1a[0], C1b[0]])
                 elems += Boundary(self.inv_layer, T1 + end_face + T2.reversed() + start_face)
             return elems
         
--- ipkiss24\ipkiss\plugins\photonics\wg\window.py	(original)
+++ ipkiss24\ipkiss\plugins\photonics\wg\window.py	(refactored)
@@ -109,7 +109,7 @@
             #Wim: This should not be handled here! This should be processed at the interface with Shapely.
             from ipkiss.primitives.filters.path_cut_filter import ShapeCutFilter
             import sys
-            f = ShapeCutFilter(max_path_length = sys.maxint)
+            f = ShapeCutFilter(max_path_length = sys.maxsize)
             shapes_to_offset = f(shape)
             shapes = [self.get_path_shape_with_termination_offsets(shape = sh, termination_offsets = []) for sh in shapes_to_offset]
         
@@ -134,8 +134,7 @@
             for o in w.get_offsets():
                 offsets.add(o)
             
-        offsets = list(offsets)
-        offsets.sort()
+        offsets = sorted(offsets)
         return offsets
     
     def transform(self, transformation):
--- ipkiss24\ipkiss\plugins\simulation\__init__.py	(original)
+++ ipkiss24\ipkiss\plugins\simulation\__init__.py	(refactored)
@@ -32,4 +32,4 @@
 from pysimul.integration.component_integration import *
 from pysimul.integration.camfr_integration import camfr_stack_expr_for_structure
 
-from simulation import *
+from .simulation import *
--- ipkiss24\ipkiss\plugins\vfabrication\elements.py	(original)
+++ ipkiss24\ipkiss\plugins\vfabrication\elements.py	(refactored)
@@ -47,7 +47,7 @@
         mapping = dict()
         elems = ElementList()
         for process in processes:	    
-            if hasattr(TECH.PPLAYER,process.extension) and hasattr(TECH.PPLAYER.__getattribute__(process.extension),"ALL"):
+            if hasattr(TECH.PPLAYER, process.extension) and hasattr(TECH.PPLAYER.__getattribute__(process.extension), "ALL"):
                 pplayer = TECH.PPLAYER.__getattribute__(process.extension).__getattribute__("TEXT")
                 mapping[TECH.PPLAYER.__getattribute__(process.extension).ALL] = pplayer
         elems += get_elements_for_generated_layers(self.elements, mapping = mapping)
--- ipkiss24\ipkiss\plugins\vfabrication\geometry.py	(original)
+++ ipkiss24\ipkiss\plugins\vfabrication\geometry.py	(refactored)
@@ -88,7 +88,7 @@
                                                      size_info = self.size_info)
                 canvas_polygon = empty_polygon.bitwise_not()
                 id = self.material_stack_factory.get_material_stack_id(material_stack)
-                mp.append((id,canvas_polygon))
+                mp.append((id, canvas_polygon))
             else:
                 process_polygon = None
                 debug_counter = 0
@@ -98,18 +98,18 @@
                     else:
                         process_polygon = process_polygon.bitwise_and(self.process_polygons[p])
                     if (self.save_debug_images):
-                        process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__AND_%s.png" %(debug_counter_line,debug_counter,p.extension))
+                        process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__AND_%s.png" %(debug_counter_line, debug_counter, p.extension))
                     debug_counter = debug_counter + 1
                 for e_p in exclude_process_set:
                     process_polygon = process_polygon.difference(self.process_polygons[e_p])
                     if (self.save_debug_images):
-                        process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__DIFFERENCE_%s.png" %(debug_counter_line,debug_counter,e_p.extension))
+                        process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__DIFFERENCE_%s.png" %(debug_counter_line, debug_counter, e_p.extension))
                     debug_counter = debug_counter + 1
                 process_polygon.unionize()
                 if (self.save_debug_images):
-                    process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__UNION.png" %(debug_counter_line,debug_counter))RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\geometry.py to ipkissat3\ipkiss\plugins\vfabrication\geometry.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\vfabrication\process_flow.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\process_flow.py to ipkissat3\ipkiss\plugins\vfabrication\process_flow.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\vfabrication\vfabrication.py

+                    process_polygon.save_to_image("DEBUG_PROCESS_POLYGONS__%i__%i__UNION.png" %(debug_counter_line, debug_counter))
                 id = self.material_stack_factory.get_material_stack_id(material_stack)
-                mp.append((id,process_polygon))
+                mp.append((id, process_polygon))
             debug_counter_line = debug_counter_line + 1
         return mp
 
@@ -145,7 +145,7 @@
             pyplot.ion()
             pyplot.clf()
             pyplot.contourf(material_array)
-            pyplot.savefig(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ","_")+"_"+str(count_progress)+"_MATERIAL_ARRAY.png")
+            pyplot.savefig(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ", "_")+"_"+str(count_progress)+"_MATERIAL_ARRAY.png")
             #-end of debug code-        
 
     def __debug_savefig_polygon__(self, polygon_points, count, count_progress, material_stack_id):      
@@ -156,13 +156,13 @@
             debug_lbm = LayerShapelyPolygons(layer = Layer(number = 0, name = "VFABRICATION_EMPTY"),
                                              size_info = SizeInfo(west = 0, east = self.canvas_size[0], south =0, north = self.canvas_size[1]))
             debug_lbm.add_shape(debug_shape)
-            debug_lbm.save_to_image(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ","_")+"_"+str(count_progress)+".png")
+            debug_lbm.save_to_image(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ", "_")+"_"+str(count_progress)+".png")
             #-end of debug code-        
 
     def get_material_array(self):
         """Convert the geometrical model with polygons into a discrete matrix"""
         if (self.__material_array__ is None):
-            from vfabrication import __common_function_apply_polygon_to_array_memory_sparing__
+            from .vfabrication import __common_function_apply_polygon_to_array_memory_sparing__
             mat_bm = self.material_stacks_shapely_polygons
             mat_bm[0] = (mat_bm[0][0], None) #replace the canvas polygon (1st element) by "None" : this is more efficient and will be interpreted identically later on
             material_array = numpy.zeros([self.canvas_width, self.canvas_height], dtype = numpy.int16) #store the material id as 16-bit integer			
@@ -178,14 +178,14 @@
                     if not mb.georep.is_empty:
                         #-debug code-
                         if self.save_debug_images:
-                            mb.save_to_image(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ","_")+".png")
+                            mb.save_to_image(str(count)+"_"+self.material_stack_factory[material_stack_id].name.replace(" ", "_")+".png")
                         #-end of debug code-
                         total_geoms = float(len(mb.georep_list))
                         count_progress = 0.0
                         for polygon in mb.georep_list:
                             if polygon.is_ring:
                                 polygon_points = polygon.boundary.coords
-                                self.__debug_savefig_polygon__(polygon_points,count, count_progress, material_stack_id)
+                                self.__debug_savefig_polygon__(polygon_points, count, count_progress, material_stack_id)
                                 polygon_points = self.__scale_polygon_points(polygon_points)
                                 __common_function_apply_polygon_to_array_memory_sparing__(material_array, polygon_points, do_bitwise_or = False, value = material_stack_id)
                                 self.__debug_savefig_material_array__(material_array, count, count_progress, material_stack_id)
@@ -216,10 +216,10 @@
             material_array[-1,:] = material_array[-3,:]
             material_array[-2,:] = material_array[-3,:]
 
-            material_array[:,0] = material_array[:,2]
-            material_array[:,1] = material_array[:,2]
-            material_array[:,-1] = material_array[:,-3]
-            material_array[:,-2] = material_array[:,-3]
+            material_array[:, 0] = material_array[:, 2]
+            material_array[:, 1] = material_array[:, 2]
+            material_array[:, -1] = material_array[:, -3]
+            material_array[:, -2] = material_array[:, -3]
             self.__material_array__ = material_array	    
         return self.__material_array__
 
--- ipkiss24\ipkiss\plugins\vfabrication\process_flow.py	(original)
+++ ipkiss24\ipkiss\plugins\vfabrication\process_flow.py	(refactored)
@@ -49,7 +49,7 @@
                 result_process_indicators = list(my_process_indicators) + list(other_process_indicators)
                 result_material_stack = my_material_stack + other_material_stack
                 setattr(material_stack_factory, 
-                        "MSTACK_%s_%s" %(str(do_hash(my_material_stack)),str(do_hash(other_material_stack))),
+                        "MSTACK_%s_%s" %(str(do_hash(my_material_stack)), str(do_hash(other_material_stack))),
                         result_material_stack)                        
                 result_process_to_material_stack_map.append((result_process_indicators, result_material_stack))
         #is_lf_fabrication
--- ipkiss24\ipkiss\plugins\vfabrication\vfabrication.py	(original)
+++ ipkiss24\ipkiss\plugins\vfabrication\vfabrication.py	(refactored)
@@ -68,7 +68,7 @@
         #component_canvas_size = the number of points in the grid covering the component (without the growth)
         component_canvas_size = (int(numpy.ceil(component_size_info.width / self.grid)),
                                  int(numpy.ceil(component_size_info.height / self.grid)))    
-        LOG.debug("Component width: %s and height: %s" %(str(component_size_info.width),str(component_size_info.height)))
+        LOG.debug("Component width: %s and height: %s" %(str(component_size_info.width), str(component_size_info.height)))
         LOG.debug("Total canvas size : %s" %str(canvas_size))
         LOG.debug("Total canvas size info : %s" %str(size_info))
         LOG.debug("Component canvas size : %s" %str(component_canvas_size))
@@ -100,10 +100,10 @@
     if (not do_bitwise_or) and (value is None):
         raise Exception("Invalid parameters : if do_bitwise_or==False, then value should not be None")
     #calculate for which range in the array we have to calculate the overlap with this polygon
-    min_x = max(0,numpy.min([p[0] for p in polygon_points])-1)
-    max_x = min(array.shape[0],numpy.max([p[0] for p in polygon_points])+1)
-    min_y = max(0,numpy.min([p[1] for p in polygon_points])-1)
-    max_y = min(array.shape[1],numpy.max([p[1] for p in polygon_points])+1)
+    min_x = max(0, numpy.min([p[0] for p in polygon_points])-1)
+    max_x = min(array.shape[0], numpy.max([p[0] for p in polygon_points])+1)
+    min_y = max(0, numpy.min([p[1] for p in polygon_points])-1)
+    max_y = min(array.shape[1], numpy.max([p[1] for p in polygon_points])+1)
     #the range that requires overlap will be plit up in slices (so as to limit memory consumption) - only needed for large polygons spanning over huge canvas
     SLICE_X_SIZE = 10000.0
     SLICE_Y_SIZE = 10000.0
@@ -144,11 +144,11 @@
     if out is None:
         out = numpy.zeros([n, len(arrays)], dtype=dtype)    
     m = n / arrays[0].size
-    out[:,0] = numpy.repeat(arrays[0], m)
+    out[:, 0] = numpy.repeat(arrays[0], m)
     if arrays[1:]:
-        __common_function_cartesian__(arrays[1:], out=out[0:m,1:])
-        for j in xrange(1, arrays[0].size):
-            out[j*m:(j+1)*m,1:] = out[0:m,1:]
+        __common_function_cartesian__(arrays[1:], out=out[0:m, 1:])
+        for j in range(1, arrays[0].size):
+            out[j*m:(j+1)*m, 1:] = out[0:m, 1:]
     return out	    
 
 
@@ -171,9 +171,9 @@
             raise IpkissException("Wrong parameter. Expected object of type __ShapeElement__")        
         if (isinstance(e, Path)):        
             grid = TECH.METRICS.GRID RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\vfabrication.py to ipkissat3\ipkiss\plugins\vfabrication\vfabrication.py.
RefactoringTool: Refactored ipkiss24\ipkiss\plugins\vfabrication\visualization.py
RefactoringTool: Writing converted ipkiss24\ipkiss\plugins\vfabrication\visualization.py to ipkissat3\ipkiss\plugins\vfabrication\visualization.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\__init__.py

-            filter = PathCutFilter(max_path_length = int(constants.GDSII_MAX_COORDINATES/2) , grids_per_unit = int(1.0 / grid), overlap = 1)            
+            filter = PathCutFilter(max_path_length = int(constants.GDSII_MAX_COORDINATES/2), grids_per_unit = int(1.0 / grid), overlap = 1)            
             filter += PathToBoundaryFilter()
-            elems = filter(e)
+            elems = list(filter(e))
             for e2 in elems:
                 if not isinstance(e2, __LayerElement__):
                     continue
@@ -189,7 +189,7 @@
                                     georep = georep)		
 
     def add_shape(self, shape):
-        pts = [(p[0],p[1]) for p in shape.points]
+        pts = [(p[0], p[1]) for p in shape.points]
         self.add_polygon_points(pts)
 
     def define_canvas_polygon(self):
@@ -197,9 +197,9 @@
         ne = self.size_info.north_east
         se = self.size_info.south_east
         sw = self.size_info.south_west	
-        shape = Shape(points = [nw,ne,se,sw,nw])
+        shape = Shape(points = [nw, ne, se, sw, nw])
         shape.closed = True
-        pts = [(p[0],p[1]) for p in shape.points]	
+        pts = [(p[0], p[1]) for p in shape.points]	
         p = ShapelyPolygon(pts)
         return p	
 
@@ -235,7 +235,7 @@
         #size_info = the size of the total canvas, including growth
         size_info = copy.deepcopy(component_size_info)
         size_info.grow_absolute(self.include_growth)
-        LOG.debug("Component width: %s and height: %s" %(str(component_size_info.width),str(component_size_info.height)))
+        LOG.debug("Component width: %s and height: %s" %(str(component_size_info.width), str(component_size_info.height)))
         LOG.debug("Total canvas size info : %s" %str(size_info))
         LOG.debug("Component size info: %s" %str(component_size_info))
         return (size_info, component_size_info)    
@@ -248,7 +248,7 @@
         self.extend_component_at_ports() 
 
         for process in self.process_flow.active_processes:	    
-            if hasattr(TECH.PPLAYER,process.extension) and hasattr(TECH.PPLAYER.__getattribute__(process.extension),"ALL"):
+            if hasattr(TECH.PPLAYER, process.extension) and hasattr(TECH.PPLAYER.__getattribute__(process.extension), "ALL"):
                 shapely_geom = __get_composite_shapely_polygon_for_elements_on_generated_layer__(elements = self.structure.elements, 
                                                                                                  generated_layer = TECH.PPLAYER.__getattribute__(process.extension).ALL)
                 bm = LayerShapelyPolygons(layer = Layer(number = 0, name = "VFABRICATION_%s" %process.extension), size_info = size_info)	 	    
@@ -260,14 +260,14 @@
                 process_polygons[process] = LayerShapelyPolygons(layer = Layer(number = 0, name = "VFABRICATION_%s" %process.extension),
                                                                  size_info = size_info)
 
-        for process, is_lf_fabrication in self.process_flow.is_lf_fabrication.items(): 
+        for process, is_lf_fabrication in list(self.process_flow.is_lf_fabrication.items()): 
             bm = process_polygons[process]
             if is_lf_fabrication:
                 process_polygons[process] = bm.bitwise_not()
 
         if self.save_debug_images:
-            for process, bm in process_polygons.items():
-                bm.save_to_image("vfabrication_%s_process_polygon_%s.png" %(self.structure.name,process.extension))
+            for process, bm in list(process_polygons.items()):
+                bm.save_to_image("vfabrication_%s_process_polygon_%s.png" %(self.structure.name, process.extension))
 
         return (process_polygons, size_info)
 
--- ipkiss24\ipkiss\plugins\vfabrication\visualization.py	(original)
+++ ipkiss24\ipkiss\plugins\vfabrication\visualization.py	(refactored)
@@ -73,7 +73,7 @@
             return filename_png
 
 
-    def visualize_3d_povray(self, camera_pos, look_at=(0,0,1), z_extrusion_factor = 1.0):
+    def visualize_3d_povray(self, camera_pos, look_at=(0, 0, 1), z_extrusion_factor = 1.0):
         self.__initialize()
         from pysimul.visualization.visualization import SimulationVolumeVisualization3D
         vis = SimulationVolumeVisualization3D(simulation_volume = self.simul_def.landscape.simulation_volume)    	
@@ -90,7 +90,7 @@
             fnull.close()
             return result_value
         else:
-            print "Additionally, run the following command : ", cmd
+            print("Additionally, run the following command : ", cmd)
             return 0
 
     def __get_meep_engine_type__(self):
@@ -141,7 +141,7 @@
         filename_without_ext = self.name
         meep_engine = self.__generate_3d_hdf5__(filename_without_ext, resolution)
         from ipkiss.all import Coord3
-        meep_coord = meep_engine.__calc_meep_coord__(Coord3(x_co,0,0))
+        meep_coord = meep_engine.__calc_meep_coord__(Coord3(x_co, 0, 0))
         x_co_meep = int(meep_coord[0] * float(resolution))
         target_filename = filename_without_ext+"_section_x_"+str(x_co)+".png"
         cmd_make_section_png = "h5topng -x "+str(x_co_meep)+" "+filename_without_ext+".eps.h5 -o "+target_filename
@@ -160,7 +160,7 @@
         filename_without_ext = self.name 
         meep_engine = self.__generate_3d_hdf5__(filename_without_ext, resolution)
         from ipkiss.all import Coord3
-        meep_coord = meep_engine.__calc_meep_coord__(Coord3(0,y_co,0))
+        meep_coord = meep_engine.__calc_meep_coord__(Coord3(0, y_co, 0))
         y_co_meep = int(meep_coord[1] * float(resolution))
         target_filename = filename_without_ext+"_section_y_"+str(y_co)+".png"
         cmd_make_section_png = "h5topng -y "+str(y_co_meep)+" "+filename_without_ext+".eps.h5 -o "+target_filename
@@ -195,16 +195,16 @@
 
 from ipkiss.primitives import Library
 
-import tkSimpleDialog
-from Tkinter import *
-
-
-class __StructuresVFabricationDialog__(tkSimpleDialog.Dialog):
+import tkinter.simpledialog
+from tkinter import *
+
+
+class __StructuresVFabricationDialog__(tkinter.simpledialog.Dialog):
 
     def __init__(self, master, library, aspect_ratio_equal = True):
         self.library = library     
         self.cb_initial_value = aspect_ratio_equal
-        tkSimpleDialog.Dialog.__init__(self, parent = master)
+        tkinter.simpledialog.Dialog.__init__(self, parent = master)
 
     def body(self, master):
         #label
@@ -220,11 +220,10 @@
         self.checkbox.pack()
         #scrollbar and listbox
         max_len = 0
-        structs = self.library.structures
-        structs.sort()
+        structs = sorted(self.library.structures)
         for s in structs:
             max_len = max(max_len, len(s.name))
-        self.listbox = Listbox(master, height=min(20,len(self.library.structures)), width=max_len)
+        self.listbox = Listbox(master, height=min(20, len(self.library.structures)), width=max_len)
         yscroll = Scrollbar(master, command=self.listbox.yview, orient=VERTICAL)
         yscroll.config(command=self.listbox.yview)
         yscroll.pack(side=RIGHT, fill=Y)
@@ -246,7 +245,7 @@
 
     def select_structures(self, func = lambda x : x):
         aspect_ratio_equal = True
-        while 1:
+        while True:
             root = Tk() 
             root.geometry("0x0") # make root "tiny"
             root.overrideredirect(1) # get rid of the frame, border, etc. 
@@ -254,7 +253,7 @@
             if d.result:
                 struct = self.__fast_get_structure__(d.result) 
                 aspect_ratio_equal = d.aspect_ratio_equal
-                print "Preparing the virtual fabrication of %s..." %d.result
+                print("Preparing the virtual fabrication of %s..." %d.result)
                 func(self, struct, aspect_ratio_equal = aspect_ratio_equal)                
             else:
                 break
--- ipkiss24\ipkiss\primitives\__init__.py	(original)
+++ ipkiss24\ipkiss\primitives\__init__.py	(refactored)RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\__init__.py to ipkissat3\ipkiss\primitives\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filter.py to ipkissat3\ipkiss\primitives\filter.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\font.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\font.py to ipkissat3\ipkiss\primitives\font.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\group.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\group.py to ipkissat3\ipkiss\primitives\group.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\layer.py

@@ -19,8 +19,8 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-import elements
-from structure import Structure, StructureProperty, StructureList
-from library import Library
-from font import BoundaryFont, PathFont, FontProperty
-from layer import Layer, LayerProperty
+from . import elements
+from .structure import Structure, StructureProperty, StructureList
+from .library import Library
+from .font import BoundaryFont, PathFont, FontProperty
+from .layer import Layer, LayerProperty
--- ipkiss24\ipkiss\primitives\filter.py	(original)
+++ ipkiss24\ipkiss\primitives\filter.py	(refactored)
@@ -45,7 +45,7 @@
             for M in inspect.getmro(T):
                 N = "__filter_%s__" % M.__name__
                 if hasattr(self, N):
-                    LOG.debug("Applying method %s of %s to %s" %(N,self,item))
+                    LOG.debug("Applying method %s of %s to %s" %(N, self, item))
                     return getattr(self, N)(item)
             return self.__filter_default__(item)
         else:
@@ -79,7 +79,7 @@
 class __CompoundFilter__(Filter):
     """ compound property processor class """
     def __init__(self, filters = [], **kwargs):
-        super(__CompoundFilter__,self).__init__(**kwargs)
+        super(__CompoundFilter__, self).__init__(**kwargs)
         self._sub_filters = filters
 
     def __add__(self, other):
@@ -126,21 +126,21 @@
         Only for named filters!
     """
     def __init__(self, filters = [], **kwargs):
-        super(ToggledCompoundFilter,self).__init__(filters = filters,**kwargs)
+        super(ToggledCompoundFilter, self).__init__(filters = filters, **kwargs)
         self.__filter_status = dict()
         
     def __setitem__(self, key, item):
         """ dict behaviour: enable or disable a filter based on it's name """
-        if not isinstance(key,str):
+        if not isinstance(key, str):
             raise KeyError("__ToggledCompoundFilter__: key must be of type str, is type %s"%(type(key)))
         if not isinstance(item, bool):
             raise KeyError("__ToggledCompoundFilter__: item must be of type bool, is type %s"%(type(item)))
         self.__filter_status[key]=item
     
-    def __getitem__(self,key):
-        if not isinstance(key,str):
+    def __getitem__(self, key):
+        if not isinstance(key, str):
             raise KeyError("__ToggledCompoundFilter__: key must be of type str, is type %s"%(type(key)))
-        if not key in self.__filter_status.keys():
+        if not key in list(self.__filter_status.keys()):
             return True
         return self.__filter_status[key]
     
@@ -148,7 +148,7 @@
         """ processes the item """ 
         LOG.debug("Applying all subfilters. Item = %s" % item)
         v = item
-        k = self.__filter_status.keys()
+        k = list(self.__filter_status.keys())
         for R in self._sub_filters:
             if R.name not in k or self.__filter_status[R.name]:
                 LOG.debug("** Applying subfilter %s to %s"  % (R, v))
@@ -161,7 +161,7 @@
         S = "< Toggled Compound Filter:"
         for i in self._sub_filters:
             S += "   %s" % i.__repr__() 
-            if i.name not in self.__filter_status.keys() or self.__filter_status[i.name]:
+            if i.name not in list(self.__filter_status.keys()) or self.__filter_status[i.name]:
                 S += "(enabled)"
             else:
                 S += "(disabled)"
--- ipkiss24\ipkiss\primitives\font.py	(original)
+++ ipkiss24\ipkiss\primitives\font.py	(refactored)
@@ -43,7 +43,7 @@
         super(Font, self).__init__(
             **kwargs)
 
-    def shapes_character (self, character, letter_height = 1.0, south_west_coord = (0.0,0.0), angle = 0.0):
+    def shapes_character (self, character, letter_height = 1.0, south_west_coord = (0.0, 0.0), angle = 0.0):
         #returns a list of shapes!!!
         if character in self.coords:
             shapes = self.coords[character]
@@ -66,14 +66,14 @@
         return self.cell_size[1]
        
 class BoundaryFont(Font):
-    def elements_character(self, layer, character, letter_height = 1.0, south_west_coord = (0.0,0.0), angle = 0.0):
+    def elements_character(self, layer, character, letter_height = 1.0, south_west_coord = (0.0, 0.0), angle = 0.0):
         EL = ElementList()
-        for s in self.shapes_character(character, letter_height , south_west_coord , angle):
+        for s in self.shapes_character(character, letter_height, south_west_coord, angle):
             EL += Boundary(layer, s)
         return EL
     
-    def shapes_character (self, character, letter_height = 1.0, south_west_coord = (0.0,0.0), angle = 0.0):
-        S = Font.shapes_character(self, character, letter_height , south_west_coord , angle)
+    def shapes_character (self, character, letter_height = 1.0, south_west_coord = (0.0, 0.0), angle = 0.0):
+        S = Font.shapes_character(self, character, letter_height, south_west_coord, angle)
         for s in S:
             s.close()
         return S
@@ -86,10 +86,10 @@
     def letter_height(self):
         return self.cell_size[1] + self.line_width
 
-    def elements_character(self, layer, character, letter_height = 1.0, south_west_coord = (0.0,0.0), angle = 0.0):
+    def elements_character(self, layer, character, letter_height = 1.0, south_west_coord = (0.0, 0.0), angle = 0.0):
         EL = ElementList()
         lw = self.line_width * letter_height * self.letter_height()
-        for s in self.shapes_character(character, letter_height , south_west_coord , angle):
+        for s in self.shapes_character(character, letter_height, south_west_coord, angle):
             EL += Path(layer, s, lw)
         return EL
     
@@ -102,7 +102,7 @@
         if isinstance(value, Font):
             return value
         try:
-            import fonts
+            from . import fonts
             new_val = fonts.TEXT_FONTS[value]
             return new_val
         except:
--- ipkiss24\ipkiss\primitives\group.py	(original)
+++ ipkiss24\ipkiss\primitives\group.py	(refactored)
@@ -90,7 +90,7 @@
     def is_empty(self):   
         return self.elements.is_empty()
     
-    def __eq__(self,other):
+    def __eq__(self, other):
         if other == None:
             return False
         if not isinstance(other, Structure):
@@ -101,7 +101,7 @@
         otherLen = len(otherElements)
         if (myLen != otherLen):
             return False
-        for myElem, otherElem in zip(myElements,otherElements):         
+        for myElem, otherElem in zip(myElements, otherElements):         
             if (myElem != otherElem):
                 return False
         return True
--- ipkiss24\ipkiss\primitives\layer.py	(original)
+++ ipkiss24\ipkiss\primitives\layer.py	(refactored)
@@ -68,16 +68,14 @@
         else:
             return layer
 
-class __Layer__(StrongPropertyInitializer):
-    __metaclass__ = MetaLayerCreator
-
+class __Layer__(StrongPropertyInitializer, metaclass=MetaLayerCreator):
     def __and__(self, other):
         if isinstance(other, __Layer__):
             return __GeneratedLayerAnd__(self, other)
         elif other is None:
             return self
         else:
-            raise TypeError("Cannot AND %s with %s" % (type(self),type(other)))
+            raise TypeError("Cannot AND %s with %s" % (type(self), type(other)))
 
     def __iand__(self, other):
         C = self.__and__(other)
@@ -90,7 +88,7 @@
         elif other is None:
             return self
         else:
-            raise TypeError("Cannot OR %s with %s" % (type(self),type(other)))
+            raise TypeError("Cannot OR %s with %s" % (type(self), type(other)))
 
     def __ior__(self, other):
         C = self.__and__(other)
@@ -103,7 +101,7 @@
         elif other is None:
             return self
         else:
-            raise TypeError("Cannot XOR %s with %s" % (type(self),type(other)))
+            raise TypeError("Cannot XOR %s with %s" % (type(self), type(other)))
 
     def __ixor__(self, other):RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\layer.py to ipkissat3\ipkiss\primitives\layer.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\library.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\library.py to ipkissat3\ipkiss\primitives\library.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\name_generator.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\name_generator.py to ipkissat3\ipkiss\primitives\name_generator.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\shapes_to_elements.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\shapes_to_elements.py to ipkissat3\ipkiss\primitives\shapes_to_elements.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\structure.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\structure.py to ipkissat3\ipkiss\primitives\structure.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\unit_grid.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\unit_grid.py to ipkissat3\ipkiss\primitives\unit_grid.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\__init__.py

         C = self.__xor__(other)
@@ -130,7 +128,7 @@
 
 class __GeneratedLayer_2Layer__(__GeneratedLayer__):
     def __init__(self, layer1, layer2):
-        super(__GeneratedLayer_2Layer__,self).__init__()
+        super(__GeneratedLayer_2Layer__, self).__init__()
         self.layer1 = layer1
         self.layer2 = layer2      
   
@@ -163,7 +161,7 @@
         
 class __GeneratedLayerNot__(__GeneratedLayer__):
     def __init__(self, layer1):
-        super(__GeneratedLayerNot__,self).__init__()
+        super(__GeneratedLayerNot__, self).__init__()
         self.layer1 = layer1
         
     def __repr__(self):
@@ -249,14 +247,14 @@
     def __delitem__(self, key):
         if isinstance(key, int):
             for i in range(0, len(self)):
-                if list.__getitem__(self,i).id() == key: return list.__delitem__(self,i)
+                if list.__getitem__(self, i).id() == key: return list.__delitem__(self, i)
                 return
-            return list.__delitem__(self,key)
+            return list.__delitem__(self, key)
         if isinstance(key, str):
             for i in range(0, len(self)):
-                if list.__getitem__(self,i).name == key: return list.__delitem__(self,i)
+                if list.__getitem__(self, i).name == key: return list.__delitem__(self, i)
                 return
-            return list.__delitem__(self,key)
+            return list.__delitem__(self, key)
         else:
             raise TypeError("Index is wrong type " + str(type(key)) + " in LayerList")
 
@@ -302,7 +300,7 @@
     def add(self, item, overwrite = False):
         if isinstance(item, Layer):
             if not item in self:
-                list.append(self,item)
+                list.append(self, item)
             elif overwrite:
                 self[item.id()] = item
                 return
--- ipkiss24\ipkiss\primitives\library.py	(original)
+++ ipkiss24\ipkiss\primitives\library.py	(refactored)
@@ -45,16 +45,16 @@
         self.structures = StructureList()
         self.__referenced_structures = set()
         
-    def snap_value(self,value):
+    def snap_value(self, value):
         return settings.snap_value(value, self.grids_per_unit)
 
-    def snap_coordinate(self,coordinate):
+    def snap_coordinate(self, coordinate):
         return settings.snap_coordinate(coordinate, self.grids_per_unit)
 
-    def snap_shape(self,coordinates):
+    def snap_shape(self, coordinates):
         return settings.snap_shape(coordinates, self.grids_per_unit)
 
-    def add(self,structure):
+    def add(self, structure):
         if isinstance(structure, Structure) or isinstance(structure, StructureList):
             self.structures.add(structure)
         else:
@@ -68,7 +68,7 @@
                 self.structures.add(i)
         return self
 
-    def structure_exists(self,structure):
+    def structure_exists(self, structure):
         return structure in self.structures
 
     def clean_up(self):
@@ -84,7 +84,7 @@
 
         # remove empty structures
         empty_s = []
-        for s in range(0,len(self.structures)):
+        for s in range(0, len(self.structures)):
             if self.structures[s].is_empty(): empty_s.append(s)
         del self.structures[empty_s]
 
@@ -207,7 +207,7 @@
             return False
         if len(self.structures) != len(other.structures):
             return False
-        for struct1, struct2 in zip(self.structures,other.structures):            
+        for struct1, struct2 in zip(self.structures, other.structures):            
             if (struct1.name != struct2.name):  # check that all structure elements have identical names (this is not required by the __eq__ operator in Structure
                 return False
             if (struct1 != struct2):
--- ipkiss24\ipkiss\primitives\structure.py	(original)
+++ ipkiss24\ipkiss\primitives\structure.py	(refactored)
@@ -93,7 +93,7 @@
     
     def __init__(self, internal_member_name = None, **kwargs):
         kwargs["restriction"] = RestrictType(allowed_types=[list])
-        super(ChildStructuresProperty,self).__init__(internal_member_name = internal_member_name, **kwargs)
+        super(ChildStructuresProperty, self).__init__(internal_member_name = internal_member_name, **kwargs)
         
     def __check_restriction__(self, obj, value):
         super(ChildStructuresProperty, self).__check_restriction__(obj, value)
@@ -117,7 +117,7 @@
     def define_child_structures(self, children):
         return children
 
-    def __eq__(self,other):
+    def __eq__(self, other):
     # FIXME: Is not correct.
         if other == None:
             return False
@@ -134,10 +134,8 @@
         return not self.__eq__(other)    
     
     
-class Structure(UnitGridContainer, __StructureHierarchy__, MixinBowl):
+class Structure(UnitGridContainer, __StructureHierarchy__, MixinBowl, metaclass=MetaStructureCreator):
     """Base class for a parametric cell"""
-    
-    __metaclass__ = MetaStructureCreator    
     __name_generator__ = TECH.ADMIN.NAME_GENERATOR    
     created = TimeProperty(doc = "Timestamp when the structure was created (a floating point number expressed in seconds since the epoch, in UTC).")
     modified = TimeProperty(doc = "Timestamp when the structure was modified (a floating point number expressed in seconds since the epoch, in UTC).")
@@ -160,7 +158,7 @@
 
 
     def define_name(self):
-        if (not hasattr(self,'__name__')) or (self.__name__ is None):
+        if (not hasattr(self, '__name__')) or (self.__name__ is None):
             self.__name__ = self.__name_generator__(self)          
         return self.__name__
    
@@ -211,7 +209,7 @@
                 if i.name == key: return i
             raise IndexError("Structure " + key + " cannot be found in StructureList.")
         else:
-            return list.__getitem__(self,key)
+            return list.__getitem__(self, key)
 
     def __setitem__(self, key, value):
         if isinstance(key, str):
@@ -219,16 +217,16 @@
                 if self[i].name == key: return list.__setitem__(self, i, value)
             list.append(self, value)
         else:
-            return list.__setitem__(self,key, value)
+            return list.__setitem__(self, key, value)
 
     def __delitem__(self, key):
         if isinstance(key, str):
             for i in range(0, len(self)):
-                if self[i].name == key: return list.__delitem__(self,i)
+                if self[i].name == key: return list.__delitem__(self, i)
                 return
-            return list.__delitem__(self,key)
-        else:
-            return list.__delitem__(self,key)
+            return list.__delitem__(self, key)
+        else:
+            return list.__delitem__(self, key)
 
     def __contains__(self, item):
         if isinstance(item, Structure):
@@ -240,7 +238,7 @@
                 if i.name == name: return True
             return False
         else:
-            return list.__contains__(self,item)
+            return list.__contains__(self, item)
         
     def __fast_contains__(self, name):
         for i in self:
--- ipkiss24\ipkiss\primitives\elements\__init__.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\__init__.py	(refactored)
@@ -21,10 +21,10 @@
 
 from .basic import ElementList, ElementListProperty, ElementProperty
 from .group import Group
-from .shape import Boundary, Path, ArcPath, BendPath,RelativeBendPath,Circle,CirclePath,Cross,CrossPath
-from .shape import Ellipse,EllipseArcPath,EllipsePath,Hexagon,HexagonPath,Line
-from .shape import ParabolicWedge,RadialLine,RadialWedge,Rectangle,RectanglePath,RegularPolygon
-from .shape import RegularPolygonPath,RingSegment,RoundedRectangle,RoundedRectanglePath,Wedge
-from .reference import SoftARef,SoftRotationARef,SRef,StackARef,ARef,ARefX, ARefY, MRef
+from .shape import Boundary, Path, ArcPath, BendPath, RelativeBendPath, Circle, CirclePath, Cross, CrossPath
+from .shape import Ellipse, EllipseArcPath, EllipsePath, Hexagon, HexagonPath, LineRefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\__init__.py to ipkissat3\ipkiss\primitives\elements\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\basic.py to ipkissat3\ipkiss\primitives\elements\basic.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\box.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\box.py to ipkissat3\ipkiss\primitives\elements\box.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\group.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\group.py to ipkissat3\ipkiss\primitives\elements\group.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\reference.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\reference.py to ipkissat3\ipkiss\primitives\elements\reference.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\shape.py

+from .shape import ParabolicWedge, RadialLine, RadialWedge, Rectangle, RectanglePath, RegularPolygon
+from .shape import RegularPolygonPath, RingSegment, RoundedRectangle, RoundedRectanglePath, Wedge
+from .reference import SoftARef, SoftRotationARef, SRef, StackARef, ARef, ARefX, ARefY, MRef
 from .box import Box
 from .text import PolygonText, Label
--- ipkiss24\ipkiss\primitives\elements\basic.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\basic.py	(refactored)
@@ -93,7 +93,7 @@
                     return False
             return True
     
-    def __ne__(self,other):
+    def __ne__(self, other):
             return not self.__eq__(other)                 
                 
 
@@ -170,7 +170,7 @@
 ##########################################################
 
 class ElementListProperty(DefinitionProperty):
-    __allowed_keyword_arguments__ = ["required","restriction","default","fdef_name"]
+    __allowed_keyword_arguments__ = ["required", "restriction", "default", "fdef_name"]
     
     def __init__(self, **kwargs):        
         super(ElementListProperty, self).__init__(**kwargs)    
--- ipkiss24\ipkiss\primitives\elements\box.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\box.py	(refactored)
@@ -29,11 +29,11 @@
 class Box(__LayerElement__):
     center = Coord2Property(default = (0.0, 0.0))
     box_size = Size2Property(default = (1.0, 1.0))
-    def __init__ (self, layer, center = (0.0,0.0), box_size = (1.0, 1.0), transformation = None, **kwargs):
+    def __init__ (self, layer, center = (0.0, 0.0), box_size = (1.0, 1.0), transformation = None, **kwargs):
         super(Box, self).__init__(layer = layer, transformation = transformation, center = center, box_size = box_size, **kwargs)
 
     def size_info(self):
-        return size_info.SizeInfo ([(self.center[0] - 0.5* self.box_size[0], self.center[1] - 0.5* self.box_size[1]) ,
+        return size_info.SizeInfo ([(self.center[0] - 0.5* self.box_size[0], self.center[1] - 0.5* self.box_size[1]),
                       (self.center[0] + 0.5* self.box_size[0], self.center[1] + 0.5* self.box_size[1])])
 
     def convex_hull(self):
--- ipkiss24\ipkiss\primitives\elements\group.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\group.py	(refactored)
@@ -30,7 +30,7 @@
 
 __all__ = ["Group"]
 
-class Group(__Group__,__Element__, MixinBowl):
+class Group(__Group__, __Element__, MixinBowl):
     
     def __init__(self, transformation = None, **kwargs):
         super(Group, self).__init__(transformation = transformation, **kwargs)
--- ipkiss24\ipkiss\primitives\elements\reference.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\reference.py	(refactored)
@@ -187,7 +187,7 @@
             return False
         return (self.reference == other.reference) and (self.position == other.position) and (self.transformation == other.transformation)
     
-    def __ne__(self,other):
+    def __ne__(self, other):
         return not self.__eq__(other)    
     
    
@@ -225,7 +225,7 @@
         return S2.convex_hull().transform(self.transformation + Translation(self.origin))
 
     def __untransformed_positions__(self):
-        p = shape.Shape(transpose(reshape(meshgrid(range(self.n_o_periods[0]), range(self.n_o_periods[1])),(2, self.n_o_periods[0]* self.n_o_periods[1]))) * array([self.period[0], self.period[1]]))
+        p = shape.Shape(transpose(reshape(meshgrid(list(range(self.n_o_periods[0])), list(range(self.n_o_periods[1]))), (2, self.n_o_periods[0]* self.n_o_periods[1]))) * array([self.period[0], self.period[1]]))
         return p
 
     def __positions__(self):
@@ -259,7 +259,7 @@
             return False
         return (self.reference == other.reference) and (self.transformation == other.transformation) and (self.origin == other.origin) and (self.period  == other.period) and (self.n_o_periods == other.n_o_periods)
     
-    def __ne__(self,other):
+    def __ne__(self, other):
         return not self.__eq__(other)    
     
 
@@ -389,7 +389,7 @@
                 period = transform.apply_to_coord(self.period)
                 period = (period[1], period[0])
                 n_o_periods = (self.n_o_periods[1], self.n_o_periods[0])
-                zero = (self.origin[0] , self.origin[1] - (n_o_periods[1] - 1) * period[1])
+                zero = (self.origin[0], self.origin[1] - (n_o_periods[1] - 1) * period[1])
                 elems.append(ARef(self.reference, zero, period, n_o_periods, transform))
             else:
                 elems.append(SoftARef(self.reference, self.origin, period, self.n_o_periods, self.transformation))
@@ -412,9 +412,9 @@
     
     def __init__(self,
                  reference,
-                 origin = (0.0,0.0),
+                 origin = (0.0, 0.0),
                  period = (1.0, 1.0) ,
-                 n_o_periods = (1,1),
+                 n_o_periods = (1, 1),
                  transformation= None,
                  stack_size = 20,
                  **kwargs):
@@ -461,7 +461,7 @@
         
         if self.n_o_periods[1] < 2 * self.stack_size:
             # soft_aref of X_cell
-            elems += SoftARef(x_cell, self.origin, self.period,(1, self.n_o_periods[1]))
+            elems += SoftARef(x_cell, self.origin, self.period, (1, self.n_o_periods[1]))
         else: # Y_periodicity < 2* stack_size:
             y_cell_stack = structure_module.Structure("R_" + x_cell.name + "_SY" + str(int(self.stack_size)),
                                          SoftARef(x_cell, (0.0, 0.0), (self.period[0], self.stack_size * self.period[1]), (1, self.n_o_periods[1] / self.stack_size)))
--- ipkiss24\ipkiss\primitives\elements\shape.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\shape.py	(refactored)
@@ -196,7 +196,7 @@
         coordinates = shapes.ShapeCircle(center = center, radius = radius, angle_step =angle_step)
         return Boundary(layer = layer, shape = coordinates)
 
-def Ellipse (layer, center = (0.0, 0.0),box_size = (1.0,1.0), line_width = 0.0, angle_step = TECH.METRICS.ANGLE_STEP):
+def Ellipse (layer, center = (0.0, 0.0),box_size = (1.0, 1.0), line_width = 0.0, angle_step = TECH.METRICS.ANGLE_STEP):
         coordinates = shapes.ShapeEllipse(center = center, box_size = box_size, angle_step =angle_step)
         return Boundary(layer = layer, shape = coordinates)
 
@@ -219,15 +219,15 @@
         coordinates = shapes.ShapeHexagon(center = center, radius = radius)
         return Boundary(layer = layer, shape = coordinates)
 
-def RegularPolygon (layer, center = (0.0,0.0), radius = 1.0, n_o_sides = 8, line_width=0.0):
+def RegularPolygon (layer, center = (0.0, 0.0), radius = 1.0, n_o_sides = 8, line_width=0.0):
         coordinates = shapes.ShapeRegularPolygon(center = center, radius = radius, n_o_sides = n_o_sides)
         return Boundary(layer = layer, shape = coordinates)
 
-def Cross (layer, center = (0.0,0.0), box_size = 20.0, thickness = 5.0, line_width = 0.0):
+def Cross (layer, center = (0.0, 0.0), box_size = 20.0, thickness = 5.0, line_width = 0.0):
         coordinates = shapes.ShapeCross(center = center, box_size = box_size, thickness = thickness)
         return Boundary(layer = layer, shape = coordinates)
 
-def Wedge (layer, begin_coord=(0.0,0.0), end_coord = (10.0, 0.0), begin_width = 3.0, end_width = 1.0, line_width = 0.0):
+def Wedge (layer, begin_coord=(0.0, 0.0), end_coord = (10.0, 0.0), begin_width = 3.0, end_width = 1.0, line_width = 0.0):
         coordinates = shapes.ShapeWedge(begin_coord = begin_coord, end_coord = end_coord, begin_width = begin_width, end_width = end_width)
         return Boundary(layer = layer, shape = coordinates)
 
@@ -235,11 +235,11 @@
         coordinates = shapes.ShapeRadialWedge(center = center, inner_radius = inner_radius, outer_radius = outer_radius, inner_width = inner_width, outer_width = outer_width, angle = angle)
         return Boundary(layer = layer, shape = coordinates)
 
-def ParabolicWedge (layer, begin_coord=(0.0,0.0), end_coord = (10.0, 0.0), begin_width = 3.0, end_width = 1.0, line_width = 0.0):
+def ParabolicWedge (layer, begin_coord=(0.0, 0.0), end_coord = (10.0, 0.0), begin_width = 3.0, end_width = 1.0, line_width = 0.0):RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\shape.py to ipkissat3\ipkiss\primitives\elements\shape.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\elements\text.py

         coordinates = shapes.ShapeParabolic(begin_coord = begin_coord, end_coord = end_coord, begin_width = begin_width, end_width = end_width)
         return Boundary(layer = layer, shape = coordinates)
 
-def Line (layer, begin_coord=(0.0,0.0), end_coord=(10.0, 0.0), line_width=1.0, path_type = constants.PATH_TYPE_NORMAL):
+def Line (layer, begin_coord=(0.0, 0.0), end_coord=(10.0, 0.0), line_width=1.0, path_type = constants.PATH_TYPE_NORMAL):
         coordinates = Shape([begin_coord, end_coord], False)
         return Path(layer, coordinates, line_width, path_type)
 
@@ -251,27 +251,27 @@
                        width)
 
 
-def BendPath(layer, start_point = (0.0,0.0), radius = 1.0, line_width = 0.5, input_angle=0.0, output_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
-        coordinates = shapes.ShapeBend(start_point = start_point, radius = radius, input_angle = input_angle, output_angle = output_angle , angle_step = angle_step, clockwise = clockwise)
-        return Path (layer, coordinates, line_width, path_type)
-
-def RelativeBendPath(layer, start_point = (0.0,0.0), radius = 1.0, line_width = 0.5, input_angle=0.0, angle_amount = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL):
-        coordinates = shapes.ShapeBendRelative(start_point = start_point, radius = radius, input_angle = input_angle, angle_amount = angle_amount , angle_step = angle_step)
-        return Path (layer, coordinates, line_width, path_type)
-
-def ArcPath (layer, center = (0.0,0.0), radius = 1.0, line_width = 0.5, start_angle=0.0, end_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
+def BendPath(layer, start_point = (0.0, 0.0), radius = 1.0, line_width = 0.5, input_angle=0.0, output_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
+        coordinates = shapes.ShapeBend(start_point = start_point, radius = radius, input_angle = input_angle, output_angle = output_angle, angle_step = angle_step, clockwise = clockwise)
+        return Path (layer, coordinates, line_width, path_type)
+
+def RelativeBendPath(layer, start_point = (0.0, 0.0), radius = 1.0, line_width = 0.5, input_angle=0.0, angle_amount = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL):
+        coordinates = shapes.ShapeBendRelative(start_point = start_point, radius = radius, input_angle = input_angle, angle_amount = angle_amount, angle_step = angle_step)
+        return Path (layer, coordinates, line_width, path_type)
+
+def ArcPath (layer, center = (0.0, 0.0), radius = 1.0, line_width = 0.5, start_angle=0.0, end_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
         coordinates = shapes.ShapeArc(center = center, radius = radius, start_angle = start_angle, end_angle = end_angle, angle_step =angle_step, clockwise = clockwise)
         return Path (layer, coordinates, line_width, path_type)
 
-def EllipseArcPath (layer, center = (0.0,0.0),box_size = (1.0,1.0), line_width = 0.5, start_angle=0.0, end_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
-        coordinates = shapes.ShapeEllipseArc(center = center, box_size = box_size, start_angle = start_angle, end_angle = end_angle , angle_step = angle_step, clockwise = clockwise)
-        return Path (layer, coordinates, line_width, path_type)
-
-def EllipsePath (layer, center = (0.0,0.0), box_size = (1.0,1.0), line_width = 0.5, angle_step = TECH.METRICS.ANGLE_STEP):
+def EllipseArcPath (layer, center = (0.0, 0.0),box_size = (1.0, 1.0), line_width = 0.5, start_angle=0.0, end_angle = 90.0, angle_step = TECH.METRICS.ANGLE_STEP, path_type = constants.PATH_TYPE_NORMAL, clockwise = False):
+        coordinates = shapes.ShapeEllipseArc(center = center, box_size = box_size, start_angle = start_angle, end_angle = end_angle, angle_step = angle_step, clockwise = clockwise)
+        return Path (layer, coordinates, line_width, path_type)
+
+def EllipsePath (layer, center = (0.0, 0.0), box_size = (1.0, 1.0), line_width = 0.5, angle_step = TECH.METRICS.ANGLE_STEP):
         coordinates = shapes.ShapeEllipse(center = center, box_size = box_size, angle_step =angle_step)
         return Path(layer, coordinates, line_width)
 
-def CirclePath (layer, center = (0.0,0.0), radius = 1.0, line_width = 0.5, angle_step = TECH.METRICS.ANGLE_STEP):
+def CirclePath (layer, center = (0.0, 0.0), radius = 1.0, line_width = 0.5, angle_step = TECH.METRICS.ANGLE_STEP):
         coordinates = shapes.ShapeCircle(center = center, radius = radius, angle_step =angle_step)
         return Path(layer, coordinates, line_width)
 
@@ -283,15 +283,15 @@
         coordinates = shapes.ShapeRoundedRectangle(center = center, box_size = box_size, radius = radius, angle_step =angle_step)
         return Path(layer, coordinates, line_width)
 
-def HexagonPath (layer, center = (0.0,0.0), radius = 1.0, line_width=0.5):
+def HexagonPath (layer, center = (0.0, 0.0), radius = 1.0, line_width=0.5):
         coordinates = shapes.ShapeHexagon(center = center, radius = radius)
-        return Path (layer,coordinates, line_width)
-
-def RegularPolygonPath (layer, center = (0.0,0.0), radius = 1.0, n_o_sides = 8, line_width=0.5):
+        return Path (layer, coordinates, line_width)
+
+def RegularPolygonPath (layer, center = (0.0, 0.0), radius = 1.0, n_o_sides = 8, line_width=0.5):
         coordinates = shapes.ShapeRegularPolygon(center = center, radius = radius, n_o_sides = n_o_sides)
-        return Path (layer,coordinates, line_width)
-
-def CrossPath (layer, center = (0.0,0.0), box_size = 20.0, thickness = 5.0, line_width = 0.5):
+        return Path (layer, coordinates, line_width)
+
+def CrossPath (layer, center = (0.0, 0.0), box_size = 20.0, thickness = 5.0, line_width = 0.5):
         coordinates = shapes.ShapeCross(center = center, box_size = box_size, thickness = thickness)
-        return Path (layer,coordinates, line_width)
-
+        return Path (layer, coordinates, line_width)
+
--- ipkiss24\ipkiss\primitives\elements\text.py	(original)
+++ ipkiss24\ipkiss\primitives\elements\text.py	(refactored)
@@ -74,7 +74,7 @@
     def __init__(self, 
                  layer,  
                  text, 
-                 coordinate = (0.0,0.0), 
+                 coordinate = (0.0, 0.0), 
                  alignment = (constants.TEXT_ALIGN_CENTER, constants.TEXT_ALIGN_TOP) , 
                  font = TEXT_FONT_DEFAULT, 
                  height = 20.0, 
@@ -108,13 +108,13 @@
     def __init__(self, 
                  layer,  
                  text, 
-                 coordinate = (0.0,0.0), 
+                 coordinate = (0.0, 0.0), 
                  alignment = (constants.TEXT_ALIGN_CENTER, constants.TEXT_ALIGN_TOP) , 
                  font = TEXT_FONT_DEFAULT, 
                  height = 20.0, 
                  transformation = None, 
                  **kwargs):
-            super(PolygonText,self).__init__(layer = layer,  
+            super(PolygonText, self).__init__(layer = layer,  
                                                     text = text, 
                                                     coordinate = coordinate, 
                                                     alignment = alignment, 
@@ -167,13 +167,13 @@
     def __init__(self,
                  layer ,  
                  text , 
-                 coordinate = (0.0,0.0), 
+                 coordinate = (0.0, 0.0), 
                  alignment = (constants.TEXT_ALIGN_CENTER, constants.TEXT_ALIGN_TOP) , 
                  font = TEXT_FONT_DEFAULT, 
                  height = 20.0, 
                  transformation = None,
                  **kwargs):
-            super(Label,self).__init__(
+            super(Label, self).__init__(
                                          layer = layer, 
                                          text = text, RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\elements\text.py to ipkissat3\ipkiss\primitives\elements\text.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\filters\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\__init__.py to ipkissat3\ipkiss\primitives\filters\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\filters\boundary_cut_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\boundary_cut_filter.py to ipkissat3\ipkiss\primitives\filters\boundary_cut_filter.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\filters\empty_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\empty_filter.py to ipkissat3\ipkiss\primitives\filters\empty_filter.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\filters\layer_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\layer_filter.py to ipkissat3\ipkiss\primitives\filters\layer_filter.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\filters\name_scramble_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\name_scramble_filter.py to ipkissat3\ipkiss\primitives\filters\name_scramble_filter.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\filters\orthogonal_reference_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\orthogonal_reference_filter.py to ipkissat3\ipkiss\primitives\filters\orthogonal_reference_filter.py.
RefactoringTool: No changes to ipkiss24\ipkiss\primitives\filters\path_cut_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\path_cut_filter.py to ipkissat3\ipkiss\primitives\filters\path_cut_filter.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\filters\path_to_boundary_filter.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\filters\path_to_boundary_filter.py to ipkissat3\ipkiss\primitives\filters\path_to_boundary_filter.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\fonts\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\fonts\__init__.py to ipkissat3\ipkiss\primitives\fonts\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\fonts\compact.py

                                          coordinate = coordinate, 
@@ -201,7 +201,7 @@
         else:
             B = self.coordinate[1] - self.height
         T = B + self.height
-        return size_info.size_info_from_numpyarray((Shape([(L,B), (L,T), (R, B), (R,T)], True).transform(self.transformation)).points)
+        return size_info.size_info_from_numpyarray((Shape([(L, B), (L, T), (R, B), (R, T)], True).transform(self.transformation)).points)
 
     def flat_copy(self, level = -1):
         return self.__copy__()
--- ipkiss24\ipkiss\primitives\filters\boundary_cut_filter.py	(original)
+++ ipkiss24\ipkiss\primitives\filters\boundary_cut_filter.py	(refactored)
@@ -35,7 +35,7 @@
     def __filter_Boundary__(self, item, DEBUG_ID = None): 
         if DEBUG_ID is None:
             import random
-            DEBUG_ID = str(random.randint(0,999999))          
+            DEBUG_ID = str(random.randint(0, 999999))          
         
         if len(item.shape)<=self.max_vertex_count:
             result_boundaries = [item]                           
@@ -48,9 +48,9 @@
                 lib_debug += Structure(elements = [item])
                 OP2 = FileOutputGdsii(FileName = "debug_struct_boundary_cut_%s_ORIGINAL.gds"%(DEBUG_ID), cut_boundaries = False)
                 OP2.write(lib_debug)                     
-                print DEBUG_ID, " -- DECISION CRITERIUM len(item.shape) = ", len(item.shape)
-                print "max_vertex_count = ", self.max_vertex_count
-                print "-------------"            
+                print(DEBUG_ID, " -- DECISION CRITERIUM len(item.shape) = ", len(item.shape))
+                print("max_vertex_count = ", self.max_vertex_count)
+                print("-------------")            
             result_boundaries = []
             #define the horizontal cutting line
             si = item.size_info()
@@ -73,7 +73,7 @@
                     transition_points_unsorted.append(c)
                     current_side = c.side            
         
-            transition_points = sorted(transition_points_unsorted, cmp = lambda p1,p2: int(numpy.sign(p1.x - p2.x)))  
+            transition_points = sorted(transition_points_unsorted, cmp = lambda p1, p2: int(numpy.sign(p1.x - p2.x)))  
             
             #if the 2 first transition points are consecutive points in the list of points, then ignore these
             while (len(transition_points)>0) and ((abs(transition_points[0].index - transition_points[1].index) == 1) or (transition_points[0].index == 0 and transition_points[1].index == len(points)-1) or (transition_points[1].index == 0 and transition_points[0].index == len(points)-1)):
--- ipkiss24\ipkiss\primitives\filters\name_scramble_filter.py	(original)
+++ ipkiss24\ipkiss\primitives\filters\name_scramble_filter.py	(refactored)
@@ -37,10 +37,10 @@
         if item is None:
             return None
         name = copy.copy(item)
-        name = name.replace("-","_")
-        name = name.replace(" ","_")
-        name = name.replace(".","_")
-        name = name.replace("/","_")
+        name = name.replace("-", "_")
+        name = name.replace(" ", "_")
+        name = name.replace(".", "_")
+        name = name.replace("/", "_")
         if self.scramble_all:
             hashval = hash(name)
             if hashval < 0:
--- ipkiss24\ipkiss\primitives\filters\path_to_boundary_filter.py	(original)
+++ ipkiss24\ipkiss\primitives\filters\path_to_boundary_filter.py	(refactored)
@@ -31,7 +31,7 @@
         if item.line_width != 0:
             LOG.debug("Converting path %s into boundary." %item)
             resultBoundary = Boundary(item.layer, ShapePath(original_shape = item.shape, 
-                                                            path_width = abs(item.line_width) , 
+                                                            path_width = abs(item.line_width), 
                                                             path_type = item.path_type), transformation = item.transformation)            
             resultBoundaryList = [resultBoundary]
             LOG.debug("Result has %i points" %len(resultBoundary.shape.points))
--- ipkiss24\ipkiss\primitives\fonts\__init__.py	(original)
+++ ipkiss24\ipkiss\primitives\fonts\__init__.py	(refactored)
@@ -19,9 +19,9 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from standard import TEXT_FONT_STANDARD
-from compact import TEXT_FONT_COMPACT
-from simple import TEXT_FONT_SIMPLE
+from .standard import TEXT_FONT_STANDARD
+from .compact import TEXT_FONT_COMPACT
+from .simple import TEXT_FONT_SIMPLE
 
 #----------------------------------------------------------------------------
 #List of all Fonts
--- ipkiss24\ipkiss\primitives\fonts\compact.py	(original)
+++ ipkiss24\ipkiss\primitives\fonts\compact.py	(refactored)
@@ -31,72 +31,72 @@
 TEXT_FONT_COMPACT.cell_size = (0.6, 1.0)
 TEXT_FONT_COMPACT.spacing = 0.3
 TEXT_FONT_COMPACT.line_width = 0.2
-TEXT_FONT_COMPACT.default_char = [(0.0,0.2), (0.0,0.8), (0.6,0.8), (0.6,0.2), (0.0,0.2), (0.0,0.8)]
+TEXT_FONT_COMPACT.default_char = [(0.0, 0.2), (0.0, 0.8), (0.6, 0.8), (0.6, 0.2), (0.0, 0.2), (0.0, 0.8)]
 TEXT_FONT_COMPACT.coords = {
-    'A' : [[(0.0,-0.1), (0.0,1.0), (0.6,1.0), (0.6,-0.1)], [(0.6,0.5), (0.0,0.5)]],
-    'B' : [[(0.0,0.5), (0.6, 0.5), (0.6,0.0),(0.2,0.0)],[ (0.4, 0.0), (0.0, 0.0), (0.0,1.0), (0.5,1.0), (0.5,0.5)]],
-    'C' : [[(0.6,0.0), (0.0,0.0),(0.0,1.0), (0.6, 1.0)]],
-    'D' : [[(0.0,0.0), (0.0,1.0),(0.3,1.0), (0.6,0.7), (0.6,0.4)], [(0.6,0.6), (0.6,0.3), (0.3,0.0), (0.0,0.0), (0.0, 0.5)]],
-    'E' : [[(0.6,0.0), (0.0,0.0), (0.0,1.0), (0.6,1.0)], [(0.0,0.5), (0.4,0.5)]],
-    'F' : [[(0.0,-0.1), (0.0,1.0), (0.7,1.0)], [(0.0,0.5), (0.4,0.5)]],
-    'G' : [[(0.3,0.5), (0.6,0.5), (0.6,0.0), (0.0,0.0), (0.0,1.0), (0.6,1.0)]],
-    'H' : [[(0.0,-0.1), (0.0,1.1)], [(0.0,0.5), (0.6,0.5)], [(0.6,1.1), (0.6,-0.1)]],
-    'I' : [[(0.0,0.0), (0.6,0.0)], [(0.3,0.0), (0.3,1.0)], [(0.0,1.0), (0.6,1.0)]],
-    'J' : [[(0.0,0.1), (0.1,0.0), (0.3,0.0), (0.4,0.1), (0.4,1.0)], [(0.2,1.0), (0.6,1.0)]],
-    'K' : [[(0.0,-0.1), (0.0,1.1)], [(0.0,0.5), (0.2,0.5), (0.6,1.05)], [(0.2,0.5), (0.6,-0.05)]],
-    'L' : [[(0.6,0.0), (0.0,0.0), (0.0,1.1)]],
+    'A' : [[(0.0, -0.1), (0.0, 1.0), (0.6, 1.0), (0.6, -0.1)], [(0.6, 0.5), (0.0, 0.5)]],
+    'B' : [[(0.0, 0.5), (0.6, 0.5), (0.6, 0.0), (0.2, 0.0)], [ (0.4, 0.0), (0.0, 0.0), (0.0, 1.0), (0.5, 1.0), (0.5, 0.5)]],
+    'C' : [[(0.6, 0.0), (0.0, 0.0), (0.0, 1.0), (0.6, 1.0)]],
+    'D' : [[(0.0, 0.0), (0.0, 1.0), (0.3, 1.0), (0.6, 0.7), (0.6, 0.4)], [(0.6, 0.6), (0.6, 0.3), (0.3, 0.0), (0.0, 0.0), (0.0, 0.5)]],
+    'E' : [[(0.6, 0.0), (0.0, 0.0), (0.0, 1.0), (0.6, 1.0)], [(0.0, 0.5), (0.4, 0.5)]],
+    'F' : [[(0.0, -0.1), (0.0, 1.0), (0.7, 1.0)], [(0.0, 0.5), (0.4, 0.5)]],
+    'G' : [[(0.3, 0.5), (0.6, 0.5), (0.6, 0.0), (0.0, 0.0), (0.0, 1.0), (0.6, 1.0)]],
+    'H' : [[(0.0, -0.1), (0.0, 1.1)], [(0.0, 0.5), (0.6, 0.5)], [(0.6, 1.1), (0.6, -0.1)]],
+    'I' : [[(0.0, 0.0), (0.6, 0.0)], [(0.3, 0.0), (0.3, 1.0)], [(0.0, 1.0), (0.6, 1.0)]],
+    'J' : [[(0.0, 0.1), (0.1, 0.0), (0.3, 0.0), (0.4, 0.1), (0.4, 1.0)], [(0.2, 1.0), (0.6, 1.0)]],
+    'K' : [[(0.0, -0.1), (0.0, 1.1)], [(0.0, 0.5), (0.2, 0.5), (0.6, 1.05)], [(0.2, 0.5), (0.6, -0.05)]],
+    'L' : [[(0.6, 0.0), (0.0, 0.0), (0.0, 1.1)]],
     #'M' : [[(0.0,-0.1), (0.0,1.0), (0.6,1.0), (0.6, -0.1)], [(0.3,1.0), (0.3,0.4)]],
-    'M' : [[(0.0,-0.1), (0.0,1.1)],[ (0.0, 0.9), (0.3,0.6), (0.6,0.9)], [(0.0,0.65), (0.6, 0.65)], [(0.6,1.1), (0.6,-0.1)]],
-    'N' : [[(0.0,-0.1), (0.0,1.1)],[ (0.0, 0.9), (0.6,0.3)], [(0.0,0.65), (0.3, 0.65)],[(0.3,0.55), (0.6, 0.55)], [(0.6,1.1), (0.6,-0.1)]],
-    'O' : [[(0.0,0.2), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.5)],[(0.6,0.7), (0.6,0.4), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0, 0.2), (0.0,0.8)]],
-    'P' : [[(0.0,-0.1), (0.0,1.0), (0.5,1.0)],[(0.2, 1.0), (0.6, 1.0), (0.6,0.5), (0.0,0.5)]],
-    'Q' : [[(0.0,0.2), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.5)],[(0.6,0.7), (0.6,0.4), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0, 0.2), (0.0,0.8)], [(0.3,0.0), (0.6,0.0), (0.6, 0.3)]],
-    'R' : [[(0.0,-0.1), (0.0,1.0), (0.6,1.0), (0.6,0.5), (0.3,0.5)], [(0.0, 0.5), (0.4,0.5), (0.4,0.3), (0.6,-0.05)]],
-    'S' : [[(-0.1,0.0), (0.6,0.0), (0.6,0.5), (0.0,0.5), (0.0,1.0), (0.7,1.0)]],
-    'T' : [[(0.3,-0.1), (0.3,1.0)], [(-0.1,1.0), (0.7,1.0)]],
-    'U' : [[(0.0,1.1), (0.0,0.0), (0.6,0.0), (0.6,1.1)]],
-    'V' : [[(0.0,1.1), (0.0,0.3), (0.3,0.0), (0.6,0.3), (0.6,1.1)]],
+    'M' : [[(0.0, -0.1), (0.0, 1.1)], [ (0.0, 0.9), (0.3, 0.6), (0.6, 0.9)], [(0.0, 0.65), (0.6, 0.65)], [(0.6, 1.1), (0.6, -0.1)]],
+    'N' : [[(0.0, -0.1), (0.0, 1.1)], [ (0.0, 0.9), (0.6, 0.3)], [(0.0, 0.65), (0.3, 0.65)], [(0.3, 0.55), (0.6, 0.55)], [(0.6, 1.1), (0.6, -0.1)]],
+    'O' : [[(0.0, 0.2), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.5)], [(0.6, 0.7), (0.6, 0.4), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.2), (0.0, 0.8)]],
+    'P' : [[(0.0, -0.1), (0.0, 1.0), (0.5, 1.0)], [(0.2, 1.0), (0.6, 1.0), (0.6, 0.5), (0.0, 0.5)]],
+    'Q' : [[(0.0, 0.2), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.5)], [(0.6, 0.7), (0.6, 0.4), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.2), (0.0, 0.8)], [(0.3, 0.0), (0.6, 0.0), (0.6, 0.3)]],
+    'R' : [[(0.0, -0.1), (0.0, 1.0), (0.6, 1.0), (0.6, 0.5), (0.3, 0.5)], [(0.0, 0.5), (0.4, 0.5), (0.4, 0.3), (0.6, -0.05)]],
+    'S' : [[(-0.1, 0.0), (0.6, 0.0), (0.6, 0.5), (0.0, 0.5), (0.0, 1.0), (0.7, 1.0)]],
+    'T' : [[(0.3, -0.1), (0.3, 1.0)], [(-0.1, 1.0), (0.7, 1.0)]],
+    'U' : [[(0.0, 1.1), (0.0, 0.0), (0.6, 0.0), (0.6, 1.1)]],
+    'V' : [[(0.0, 1.1), (0.0, 0.3), (0.3, 0.0), (0.6, 0.3), (0.6, 1.1)]],
     #'W' : [[(0.0,1.1), (0.0,0.0), (0.6,0.0), (0.6,1.1)], [(0.3,0.0),(0.3,0.6)]],
-    'W' : [[(0.0,-0.1), (0.0,1.1)],[ (0.0, 0.1), (0.3,0.4), (0.6,0.1)], [(0.0,0.35), (0.6, 0.35)], [(0.6,1.1), (0.6,-0.1)]],
-    'X' : [[(0.0,-0.1), (0.0,0.2), (0.6,0.8), (0.6,1.1)], [(0.0,1.1), (0.0,0.8), (0.6,0.2), (0.6,-0.1)]],
-    'Y' : [[(0.3,0.5), (0.6,0.8), (0.6,1.1)], [(0.3,-0.1), (0.3,0.5), (0.0,0.8), (0.0,1.1)]],
-    'Z' : [[(-0.1,1.0), (0.6,1.0), (0.6,0.7), (0.0,0.3), (0.0,0.0), (0.7,0.0)]],
-    '0' : [[(0.0,0.0), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,1.0), (0.6, 0.3)], [(0.6, 0.5), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0, 0.0), (0.0,0.8)]],
-    '1' : [[(0.3,1.0), (0.5,1.0), (0.5,-0.1)]],
-    '2' : [[(0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.6), (0.0,0.3), (0.0,0.0), (0.7,0.0)]],
-    '3' : [[(-0.1,1.0), (0.6,1.0), (0.6,0.7), (0.4,0.5), (0.2,0.5)], [(0.4,0.5), (0.6,0.3), (0.6,0.0), (-0.1,0.0)]],
-    '4' : [[(0.0,1.1), (0.0,0.4), (0.6,0.4)], [(0.4,0.6), (0.4,-0.1)]],
-    '5' : [[(0.7,1.0), (0.0,1.0), (0.0,0.6), (0.4,0.6), (0.6,0.4), (0.6,0.2), (0.4,0.0), (-0.1,0.0)]],
-    '6' : [[(0.0,0.5), (0.6,0.5), (0.6,0.0), (0.3,0.0)], [(0.4,0.0), (0.0, 0.0), (0.0,0.8), (0.2,1.0), (0.6,1.0)]],
-    '7' : [[(0.0,1.0), (0.6,1.0), (0.6,0.8), (0.3,-0.05)]],
+    'W' : [[(0.0, -0.1), (0.0, 1.1)], [ (0.0, 0.1), (0.3, 0.4), (0.6, 0.1)], [(0.0, 0.35), (0.6, 0.35)], [(0.6, 1.1), (0.6, -0.1)]],
+    'X' : [[(0.0, -0.1), (0.0, 0.2), (0.6, 0.8), (0.6, 1.1)], [(0.0, 1.1), (0.0, 0.8), (0.6, 0.2), (0.6, -0.1)]],
+    'Y' : [[(0.3, 0.5), (0.6, 0.8), (0.6, 1.1)], [(0.3, -0.1), (0.3, 0.5), (0.0, 0.8), (0.0, 1.1)]],
+    'Z' : [[(-0.1, 1.0), (0.6, 1.0), (0.6, 0.7), (0.0, 0.3), (0.0, 0.0), (0.7, 0.0)]],
+    '0' : [[(0.0, 0.0), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 1.0), (0.6, 0.3)], [(0.6, 0.5), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.0), (0.0, 0.8)]],
+    '1' : [[(0.3, 1.0), (0.5, 1.0), (0.5, -0.1)]],
+    '2' : [[(0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.6), (0.0, 0.3), (0.0, 0.0), (0.7, 0.0)]],
+    '3' : [[(-0.1, 1.0), (0.6, 1.0), (0.6, 0.7), (0.4, 0.5), (0.2, 0.5)], [(0.4, 0.5), (0.6, 0.3), (0.6, 0.0), (-0.1, 0.0)]],
+    '4' : [[(0.0, 1.1), (0.0, 0.4), (0.6, 0.4)], [(0.4, 0.6), (0.4, -0.1)]],
+    '5' : [[(0.7, 1.0), (0.0, 1.0), (0.0, 0.6), (0.4, 0.6), (0.6, 0.4), (0.6, 0.2), (0.4, 0.0), (-0.1, 0.0)]],
+    '6' : [[(0.0, 0.5), (0.6, 0.5), (0.6, 0.0), (0.3, 0.0)], [(0.4, 0.0), (0.0, 0.0), (0.0, 0.8), (0.2, 1.0), (0.6, 1.0)]],
+    '7' : [[(0.0, 1.0), (0.6, 1.0), (0.6, 0.8), (0.3, -0.05)]],
     '8' : [[(0.1, 0.5), (0.1, 1.0), (0.5, 1.0), (0.5, 0.5), (0.6, 0.5), (0.6, 0.0), (0.2, 0.0)], [(0.4, 0.0), (0.0, 0.0), (0.0, 0.5), (0.5, 0.5)]],
-    '9' : [[(0.6,0.5), (0.0,0.5), (0.0,1.0), (0.4, 1.0)], [(0.3, 1.0), (0.6,1.0), (0.6,0.2), (0.4,0.0), (-0.1,0.0)]],
-    '.' : [[(0.2,0.0), (0.4,0.0)]],
-    ',' : [[(0.15,-0.2),(0.4,0.1)]],
-    '(' : [[(0.4,1.0), (0.2,0.8), (0.2,0.2), (0.4,0.0)]],
-    ')' : [[(0.2,1.0), (0.4,0.8), (0.4,0.2), (0.2,0.0)]],
-    '[' : [[(0.4,1.0), (0.2,1.0), (0.2,0.0), (0.4,0.0)]],
-    ']' : [[(0.2,1.0), (0.4,1.0), (0.4,0.0), (0.2,0.0)]],
-    '#' : [[(0.0,0.6), (0.6,0.6)], [(0.6,0.3), (0.0,0.3)], [(0.15,0.1), (0.15,0.8)],  [(0.45,0.8), (0.45,0.1)]],
-    '%' : [[(0.0,0.8), (0.2,0.8)], [(0.0,0.2), (0.6,0.8)], [(0.4,0.1), (0.6,0.1)]],
-    '$' : [[(0.0,0.1), (0.6,0.1), (0.6, 0.5), (0.0,0.6), (0.0,0.9), (0.6,0.9)], [(0.3, -0.1), (0.3,1.1)]],
-    '*' : [[(0.0,0.5), (0.6,0.5)], [(0.1,0.9), (0.3, 0.7), (0.3,0.3), (0.5, 0.1)], [(0.1,0.1), (0.3, 0.3)], [(0.3,0.7), (0.5, 0.9)]],
-    ':' : [[(0.2,0.0), (0.4,0.0)], [(0.2,0.4), (0.4,0.4)]],
-    ';' : [[(0.15,-0.2), (0.4,0.1)], [(0.2,0.4), (0.4,0.4)]],
-    '!' : [[(0.2,0.0), (0.4,0.0)], [(0.3,1.0), (0.3,0.3)]],
-    '?' : [[(0.2,0.0), (0.4,0.0)], [(0.0,0.8),(0.0,0.9), (0.1,1.0), (0.4,1.0), (0.5,0.9), (0.5,0.7), (0.3,0.5), (0.3,0.3)]],
-    '/' : [[(0.1,0.0), (0.1, 0.2), (0.5, 0.8), (0.5,1.0)]],
-    '\\': [[(0.0,1.0), (0.6,0.0)]],
-    '-' : [[(0.0,0.5), (0.6,0.5)]],
-    '_' : [[(0.0,0.0), (0.6,0.0)]],
-    '+' : [[(0.0,0.5), (0.6,0.5)], [(0.3,0.2), (0.3, 0.8)]],
-    '=' : [[(0.0,0.3), (0.6,0.3)], [(0.0,0.7), (0.6,0.7)]],
-    '{' : [[(0.4,1.0), (0.3,0.9), (0.3,0.6), (0.2,0.5), (0.3,0.4), (0.3, 0.1), (0.4,0.0)]],
-    '}' : [[(0.2,1.0), (0.3,0.9), (0.3,0.6), (0.4,0.5), (0.3,0.4), (0.3, 0.1), (0.2,0.0)]],
-    '<' : [[(0.5,0.0), (0.1,0.4), (0.5,0.8)]],
-    '>' : [[(0.1,0.0), (0.5,0.4), (0.1,0.8)]],
-    '`' : [[(0.3,1.2), (0.3,0.7)]],
-    '\"': [[(0.1,1.2),(0.2,0.8)],[(0.3,1.2),(0.4,0.8)]],
-    '^' : [[(0.05, 0.8), (0.25, 1.0), (0.35, 1.0), (0.55,0.8)]],
+    '9' : [[(0.6, 0.5), (0.0, 0.5), (0.0, 1.0), (0.4, 1.0)], [(0.3, 1.0), (0.6, 1.0), (0.6, 0.2), (0.4, 0.0), (-0.1, 0.0)]],
+    '.' : [[(0.2, 0.0), (0.4, 0.0)]],
+    ',' : [[(0.15, -0.2), (0.4, 0.1)]],
+    '(' : [[(0.4, 1.0), (0.2, 0.8), (0.2, 0.2), (0.4, 0.0)]],
+    ')' : [[(0.2, 1.0), (0.4, 0.8), (0.4, 0.2), (0.2, 0.0)]],
+    '[' : [[(0.4, 1.0), (0.2, 1.0), (0.2, 0.0), (0.4, 0.0)]],
+    ']' : [[(0.2, 1.0), (0.4, 1.0), (0.4, 0.0), (0.2, 0.0)]],
+    '#' : [[(0.0, 0.6), (0.6, 0.6)], [(0.6, 0.3), (0.0, 0.3)], [(0.15, 0.1), (0.15, 0.8)],  [(0.45, 0.8), (0.45, 0.1)]],
+    '%' : [[(0.0, 0.8), (0.2, 0.8)], [(0.0, 0.2), (0.6, 0.8)], [(0.4, 0.1), (0.6, 0.1)]],
+    '$' : [[(0.0, 0.1), (0.6, 0.1), (0.6, 0.5), (0.0, 0.6), (0.0, 0.9), (0.6, 0.9)], [(0.3, -0.1), (0.3, 1.1)]],
+    '*' : [[(0.0, 0.5), (0.6, 0.5)], [(0.1, 0.9), (0.3, 0.7), (0.3, 0.3), (0.5, 0.1)], [(0.1, 0.1), (0.3, 0.3)], [(0.3, 0.7), (0.5, 0.9)]],
+    ':' : [[(0.2, 0.0), (0.4, 0.0)], [(0.2, 0.4), (0.4, 0.4)]],
+    ';' : [[(0.15, -0.2), (0.4, 0.1)], [(0.2, 0.4), (0.4, 0.4)]],
+    '!' : [[(0.2, 0.0), (0.4, 0.0)], [(0.3, 1.0), (0.3, 0.3)]],
+    '?' : [[(0.2, 0.0), (0.4, 0.0)], [(0.0, 0.8), (0.0, 0.9), (0.1, 1.0), (0.4, 1.0), (0.5, 0.9), (0.5, 0.7), (0.3, 0.5), (0.3, 0.3)]],
+    '/' : [[(0.1, 0.0), (0.1, 0.2), (0.5, 0.8), (0.5, 1.0)]],
+    '\\': [[(0.0, 1.0), (0.6, 0.0)]],
+    '-' : [[(0.0, 0.5), (0.6, 0.5)]],
+    '_' : [[(0.0, 0.0), (0.6, 0.0)]],
+    '+' : [[(0.0, 0.5), (0.6, 0.5)], [(0.3, 0.2), (0.3, 0.8)]],
+    '=' : [[(0.0, 0.3), (0.6, 0.3)], [(0.0, 0.7), (0.6, 0.7)]],
+    '{' : [[(0.4, 1.0), (0.3, 0.9), (0.3, 0.6), (0.2, 0.5), (0.3, 0.4), (0.3, 0.1), (0.4, 0.0)]],
+    '}' : [[(0.2, 1.0), (0.3, 0.9), (0.3, 0.6), (0.4, 0.5), (0.3, 0.4), (0.3, 0.1), (0.2, 0.0)]],
+    '<' : [[(0.5, 0.0), (0.1, 0.4), (0.5, 0.8)]],
+    '>' : [[(0.1, 0.0), (0.5, 0.4), (0.1, 0.8)]],
+    '`' : [[(0.3, 1.2), (0.3, 0.7)]],RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\fonts\compact.py to ipkissat3\ipkiss\primitives\fonts\compact.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\fonts\simple.py

+    '\"': [[(0.1, 1.2), (0.2, 0.8)], [(0.3, 1.2), (0.4, 0.8)]],
+    '^' : [[(0.05, 0.8), (0.25, 1.0), (0.35, 1.0), (0.55, 0.8)]],
     ' ' : []
 }
--- ipkiss24\ipkiss\primitives\fonts\simple.py	(original)
+++ ipkiss24\ipkiss\primitives\fonts\simple.py	(refactored)
@@ -31,55 +31,55 @@
 TEXT_FONT_SIMPLE.ID = 2
 TEXT_FONT_SIMPLE.cell_size = (0.7, 1.0)
 TEXT_FONT_SIMPLE.spacing = 0.15
-TEXT_FONT_SIMPLE.default_char = [(0.0,0.2), (0.0,0.8), (0.6,0.8), (0.6,0.2)]
+TEXT_FONT_SIMPLE.default_char = [(0.0, 0.2), (0.0, 0.8), (0.6, 0.8), (0.6, 0.2)]
 TEXT_FONT_SIMPLE.coords = {
-    ')' : [ [ (0.36,0.0), (0.5,0.14), (0.5,0.86), (0.36,1.0), (0.2,1.0), (0.2,0.86), (0.36,0.72), (0.36,0.28), (0.2,0.14), (0.2,0.0) ], ], 
-    '(' : [ [ (0.5,0.0), (0.5,0.14), (0.36,0.28), (0.36,0.72), (0.5,0.86), (0.5,1.0), (0.36,1.0), (0.2,0.86), (0.2,0.14), (0.36,0.0) ], ], 
-    '+' : [ [ (0.28,0.42), (0.28,0.14), (0.42,0.14), (0.42,0.42), (0.7,0.42), (0.7,0.58), (0.42,0.58), (0.42,0.86), (0.28,0.86), (0.28,0.58), (0.0,0.58), (0.0,0.42) ], ], 
-    '*' : [ [ (0.7,0.44), (0.46,0.44), (0.66,0.24), (0.6,0.18), (0.4,0.38), (0.4,0.14), (0.3,0.14), (0.3,0.38), (0.1,0.18), (0.04,0.24), (0.24,0.44), (0.0,0.44), (0.0,0.56), (0.24,0.56), (0.04,0.76), (0.1,0.82), (0.3,0.62), (0.3,0.86), (0.4,0.86), (0.4,0.62), (0.6,0.82), (0.66,0.76), (0.46,0.56), (0.7,0.56) ], ], 
-    '-' : [ [ (0.0,0.42), (0.7,0.42), (0.7,0.58), (0.0,0.58) ], ], 
-    '/' : [ [ (0.14,0.0), (0.14,0.14), (0.7,0.72), (0.7,1.0), (0.56,1.0), (0.56,0.86), (0.0,0.28), (0.0,0.0) ], ], 
-    '.' : [ [ (0.28,0.0), (0.42,0.0), (0.42,0.14), (0.28,0.14) ], ], 
-    '1' : [ [ (0.64,0.0), (0.64,1.0), (0.5,1.0), (0.06,0.58), (0.06,0.42), (0.2,0.42), (0.5,0.72), (0.5,0.0) ], ], 
-    '0' : [ [ (0.28,0.0), (0.28,0.14), (0.14,0.28), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.28,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0) ], ], 
-    '3' : [ [ (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.64,0.5), (0.7,0.58), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.72), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.36,0.5), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.14,0.28), (0.0,0.28), (0.0,0.14), (0.14,0.0) ], ], 
-    '2' : [ [ (0.7,0.0), (0.7,0.14), (0.28,0.14), (0.7,0.58), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.72), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.0,0.14), (0.0,0.0) ], ], 
-    '5' : [ [ (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.56,0.58), (0.14,0.58), (0.14,0.86), (0.7,0.86), (0.7,1.0), (0.0,1.0), (0.0,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.0,0.14), (0.0,0.0) ], ], 
-    '4' : [ [ (0.42,0.0), (0.42,0.28), (0.7,0.28), (0.7,0.42), (0.42,0.42), (0.42,0.72), (0.28,0.72), (0.28,0.42), (0.14,0.42), (0.14,1.0), (0.0,1.0), (0.0,0.28), (0.28,0.28), (0.28,0.0) ], ], 
-    '7' : [ [ (0.14,0.0), (0.7,0.58), (0.7,1.0), (0.0,1.0), (0.0,0.86), (0.56,0.86), (0.56,0.72), (0.0,0.14), (0.0,0.0) ], ], 
-    '6' : [ [ (0.28,0.0), (0.28,0.14), (0.14,0.28), (0.14,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.28,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.56,0.58), (0.14,0.58), (0.14,0.72), (0.28,0.86), (0.7,0.86), (0.7,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0) ], ], 
-    '9' : [ [ (0.56,0.0), (0.7,0.14), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.58), (0.14,0.42), (0.56,0.42), (0.56,0.58), (0.28,0.58), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.28), (0.42,0.14), (0.0,0.14), (0.0,0.0) ], ], 
-    '8' : [ [ (0.28,0.0), (0.28,0.14), (0.14,0.28), (0.28,0.42), (0.28,0.58), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.42,0.58), (0.28,0.58), (0.28,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.28,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.36), (0.56,0.5), (0.7,0.64), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.64), (0.14,0.5), (0.0,0.36), (0.0,0.14), (0.14,0.0) ], ], 
-    '=' : [ [ (0.0,0.58), (0.7,0.58), (0.7,0.72), (0.0,0.72) ], [ (0.0,0.14), (0.7,0.14), (0.7,0.28), (0.0,0.28) ], ], 
-    'A' : [ [ (0.14,0.0), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.58), (0.14,0.58), (0.14,0.42), (0.56,0.42), (0.56,0.0), (0.7,0.0), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.0) ], ], 
-    'C' : [ [ (0.7,0.14), (0.28,0.14), (0.14,0.28), (0.14,0.72), (0.28,0.86), (0.7,0.86), (0.7,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0), (0.7,0.0) ], ], 
-    'B' : [ [ (0.14,0.0), (0.14,0.86), (0.28,0.86), (0.42,0.72), (0.42,0.58), (0.14,0.58), (0.14,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.14,0.14), (0.14,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.56,0.58), (0.56,0.86), (0.42,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'E' : [ [ (0.7,0.0), (0.7,0.14), (0.14,0.14), (0.14,0.42), (0.56,0.42), (0.56,0.58), (0.14,0.58), (0.14,0.86), (0.7,0.86), (0.7,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'D' : [ [ (0.14,0.0), (0.14,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.28), (0.42,0.14), (0.14,0.14), (0.14,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.86), (0.56,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'G' : [ [ (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.56,0.58), (0.28,0.58), (0.28,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.14,0.28), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.7,0.72), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0) ], ], 
-    'F' : [ [ (0.14,0.0), (0.14,0.42), (0.56,0.42), (0.56,0.58), (0.14,0.58), (0.14,0.86), (0.7,0.86), (0.7,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'I' : [ [ (0.7,0.0), (0.7,0.14), (0.42,0.14), (0.42,0.86), (0.7,0.86), (0.7,1.0), (0.0,1.0), (0.0,0.86), (0.28,0.86), (0.28,0.14), (0.0,0.14), (0.0,0.0) ], ], 
-    'H' : [ [ (0.14,0.0), (0.14,0.42), (0.56,0.42), (0.56,0.0), (0.7,0.0), (0.7,1.0), (0.56,1.0), (0.56,0.58), (0.14,0.58), (0.14,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'K' : [ [ (0.14,0.0), (0.14,0.42), (0.56,0.0), (0.7,0.0), (0.7,0.14), (0.36,0.5), (0.7,0.86), (0.7,1.0), (0.56,1.0), (0.14,0.58), (0.14,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'J' : [ [ (0.56,0.0), (0.7,0.14), (0.7,1.0), (0.56,1.0), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.14,0.28), (0.0,0.28), (0.0,0.14), (0.14,0.0) ], ], 
-    'M' : [ [ (0.14,0.0), (0.14,0.72), (0.34,0.5), (0.56,0.72), (0.56,0.0), (0.7,0.0), (0.7,1.0), (0.56,1.0), (0.34,0.78), (0.14,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'L' : [ [ (0.7,0.0), (0.7,0.14), (0.14,0.14), (0.14,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'O' : [ [ (0.28,0.0), (0.28,0.14), (0.14,0.28), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.28,0.0), (0.56,0.0), (0.7,0.14), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0) ], ], 
-    'N' : [ [ (0.14,0.0), (0.14,0.72), (0.56,0.28), (0.56,0.0), (0.7,0.0), (0.7,1.0), (0.56,1.0), (0.56,0.58), (0.14,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'Q' : [ [ (0.28,0.0), (0.28,0.14), (0.14,0.28), (0.14,0.72), (0.28,0.86), (0.42,0.86), (0.56,0.72), (0.56,0.14), (0.42,0.28), (0.28,0.28), (0.42,0.14), (0.28,0.14), (0.28,0.0), (0.7,0.0), (0.7,0.86), (0.56,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.14), (0.14,0.0) ], ], 
-    'P' : [ [ (0.14,0.0), (0.14,0.86), (0.42,0.86), (0.56,0.72), (0.42,0.58), (0.14,0.58), (0.14,0.42), (0.56,0.42), (0.7,0.58), (0.7,0.86), (0.56,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'S' : [ [ (0.56,0.0), (0.7,0.14), (0.7,0.42), (0.56,0.58), (0.28,0.58), (0.14,0.72), (0.28,0.86), (0.7,0.86), (0.7,1.0), (0.14,1.0), (0.0,0.86), (0.0,0.58), (0.14,0.42), (0.42,0.42), (0.56,0.28), (0.42,0.14), (0.0,0.14), (0.0,0.0) ], ], 
-    'R' : [ [ (0.14,0.0), (0.14,0.86), (0.42,0.86), (0.56,0.72), (0.42,0.58), (0.14,0.58), (0.14,0.42), (0.56,0.0), (0.7,0.0), (0.7,0.14), (0.42,0.42), (0.56,0.42), (0.7,0.58), (0.7,0.86), (0.56,1.0), (0.0,1.0), (0.0,0.0) ], ], 
-    'U' : [ [ (0.56,0.0), (0.7,0.14), (0.7,1.0), (0.56,1.0), (0.56,0.28), (0.42,0.14), (0.28,0.14), (0.14,0.28), (0.14,1.0), (0.0,1.0), (0.0,0.14), (0.14,0.0) ], ], 
-    'T' : [ [ (0.42,0.0), (0.42,0.86), (0.7,0.86), (0.7,1.0), (0.0,1.0), (0.0,0.86), (0.28,0.86), (0.28,0.0) ], ], 
-    'W' : [ [ (0.0,0.14), (0.14,0.0), (0.36,0.22), (0.56,0.0), (0.7,0.14), (0.7,1.0), (0.56,1.0), (0.56,0.28), (0.36,0.5), (0.14,0.28), (0.14,1.0), (0.0,1.0) ], ], 
-    'V' : [ [ (0.0,0.36), (0.36,0.0), (0.7,0.36), (0.7,1.0), (0.56,1.0), (0.56,0.5), (0.36,0.28), (0.14,0.5), (0.14,1.0), (0.0,1.0) ], ], 
-    'Y' : [ [ (0.0,0.72), (0.28,0.42), (0.28,0.0), (0.42,0.0), (0.42,0.42), (0.7,0.72), (0.7,1.0), (0.56,1.0), (0.56,0.86), (0.34,0.64), (0.14,0.86), (0.14,1.0), (0.0,1.0) ], ], 
-    'X' : [ [ (0.14,0.0), (0.14,0.08), (0.36,0.28), (0.56,0.08), (0.56,0.0), (0.7,0.0), (0.7,0.22), (0.42,0.5), (0.7,0.78), (0.7,1.0), (0.56,1.0), (0.56,0.92), (0.36,0.72), (0.14,0.92), (0.14,1.0), (0.0,1.0), (0.0,0.78), (0.28,0.5), (0.0,0.22), (0.0,0.0) ], ], 
-    '[' : [ [ (0.5,0.0), (0.5,0.14), (0.34,0.14), (0.34,0.86), (0.5,0.86), (0.5,1.0), (0.2,1.0), (0.2,0.0) ], ], 
-    'Z' : [ [ (0.7,0.0), (0.7,0.14), (0.14,0.14), (0.7,0.72), (0.7,1.0), (0.0,1.0), (0.0,0.86), (0.56,0.86), (0.0,0.28), (0.0,0.0) ], ], 
-    ']' : [ [ (0.5,0.0), (0.5,1.0), (0.2,1.0), (0.2,0.86), (0.34,0.86), (0.34,0.14), (0.2,0.14), (0.2,0.0) ], ], 
-    '_' : [ [ (0.0,0.0), (0.7,0.0), (0.7,0.16), (0.0,0.16) ], ], 
+    ')' : [ [ (0.36, 0.0), (0.5, 0.14), (0.5, 0.86), (0.36, 1.0), (0.2, 1.0), (0.2, 0.86), (0.36, 0.72), (0.36, 0.28), (0.2, 0.14), (0.2, 0.0) ], ], 
+    '(' : [ [ (0.5, 0.0), (0.5, 0.14), (0.36, 0.28), (0.36, 0.72), (0.5, 0.86), (0.5, 1.0), (0.36, 1.0), (0.2, 0.86), (0.2, 0.14), (0.36, 0.0) ], ], 
+    '+' : [ [ (0.28, 0.42), (0.28, 0.14), (0.42, 0.14), (0.42, 0.42), (0.7, 0.42), (0.7, 0.58), (0.42, 0.58), (0.42, 0.86), (0.28, 0.86), (0.28, 0.58), (0.0, 0.58), (0.0, 0.42) ], ], 
+    '*' : [ [ (0.7, 0.44), (0.46, 0.44), (0.66, 0.24), (0.6, 0.18), (0.4, 0.38), (0.4, 0.14), (0.3, 0.14), (0.3, 0.38), (0.1, 0.18), (0.04, 0.24), (0.24, 0.44), (0.0, 0.44), (0.0, 0.56), (0.24, 0.56), (0.04, 0.76), (0.1, 0.82), (0.3, 0.62), (0.3, 0.86), (0.4, 0.86), (0.4, 0.62), (0.6, 0.82), (0.66, 0.76), (0.46, 0.56), (0.7, 0.56) ], ], 
+    '-' : [ [ (0.0, 0.42), (0.7, 0.42), (0.7, 0.58), (0.0, 0.58) ], ], 
+    '/' : [ [ (0.14, 0.0), (0.14, 0.14), (0.7, 0.72), (0.7, 1.0), (0.56, 1.0), (0.56, 0.86), (0.0, 0.28), (0.0, 0.0) ], ], 
+    '.' : [ [ (0.28, 0.0), (0.42, 0.0), (0.42, 0.14), (0.28, 0.14) ], ], 
+    '1' : [ [ (0.64, 0.0), (0.64, 1.0), (0.5, 1.0), (0.06, 0.58), (0.06, 0.42), (0.2, 0.42), (0.5, 0.72), (0.5, 0.0) ], ], 
+    '0' : [ [ (0.28, 0.0), (0.28, 0.14), (0.14, 0.28), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.28, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0) ], ], 
+    '3' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.64, 0.5), (0.7, 0.58), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.72), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.36, 0.5), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.14, 0.28), (0.0, 0.28), (0.0, 0.14), (0.14, 0.0) ], ], 
+    '2' : [ [ (0.7, 0.0), (0.7, 0.14), (0.28, 0.14), (0.7, 0.58), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.72), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.0, 0.14), (0.0, 0.0) ], ], 
+    '5' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.56, 0.58), (0.14, 0.58), (0.14, 0.86), (0.7, 0.86), (0.7, 1.0), (0.0, 1.0), (0.0, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.0, 0.14), (0.0, 0.0) ], ], 
+    '4' : [ [ (0.42, 0.0), (0.42, 0.28), (0.7, 0.28), (0.7, 0.42), (0.42, 0.42), (0.42, 0.72), (0.28, 0.72), (0.28, 0.42), (0.14, 0.42), (0.14, 1.0), (0.0, 1.0), (0.0, 0.28), (0.28, 0.28), (0.28, 0.0) ], ], 
+    '7' : [ [ (0.14, 0.0), (0.7, 0.58), (0.7, 1.0), (0.0, 1.0), (0.0, 0.86), (0.56, 0.86), (0.56, 0.72), (0.0, 0.14), (0.0, 0.0) ], ], 
+    '6' : [ [ (0.28, 0.0), (0.28, 0.14), (0.14, 0.28), (0.14, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.28, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.56, 0.58), (0.14, 0.58), (0.14, 0.72), (0.28, 0.86), (0.7, 0.86), (0.7, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0) ], ], 
+    '9' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.58), (0.14, 0.42), (0.56, 0.42), (0.56, 0.58), (0.28, 0.58), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.28), (0.42, 0.14), (0.0, 0.14), (0.0, 0.0) ], ], 
+    '8' : [ [ (0.28, 0.0), (0.28, 0.14), (0.14, 0.28), (0.28, 0.42), (0.28, 0.58), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.42, 0.58), (0.28, 0.58), (0.28, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.28, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.36), (0.56, 0.5), (0.7, 0.64), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.64), (0.14, 0.5), (0.0, 0.36), (0.0, 0.14), (0.14, 0.0) ], ], 
+    '=' : [ [ (0.0, 0.58), (0.7, 0.58), (0.7, 0.72), (0.0, 0.72) ], [ (0.0, 0.14), (0.7, 0.14), (0.7, 0.28), (0.0, 0.28) ], ], 
+    'A' : [ [ (0.14, 0.0), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.58), (0.14, 0.58), (0.14, 0.42), (0.56, 0.42), (0.56, 0.0), (0.7, 0.0), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.0) ], ], 
+    'C' : [ [ (0.7, 0.14), (0.28, 0.14), (0.14, 0.28), (0.14, 0.72), (0.28, 0.86), (0.7, 0.86), (0.7, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0), (0.7, 0.0) ], ], 
+    'B' : [ [ (0.14, 0.0), (0.14, 0.86), (0.28, 0.86), (0.42, 0.72), (0.42, 0.58), (0.14, 0.58), (0.14, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.14, 0.14), (0.14, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.56, 0.58), (0.56, 0.86), (0.42, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'E' : [ [ (0.7, 0.0), (0.7, 0.14), (0.14, 0.14), (0.14, 0.42), (0.56, 0.42), (0.56, 0.58), (0.14, 0.58), (0.14, 0.86), (0.7, 0.86), (0.7, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'D' : [ [ (0.14, 0.0), (0.14, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.28), (0.42, 0.14), (0.14, 0.14), (0.14, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.86), (0.56, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'G' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.56, 0.58), (0.28, 0.58), (0.28, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.14, 0.28), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.7, 0.72), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0) ], ], 
+    'F' : [ [ (0.14, 0.0), (0.14, 0.42), (0.56, 0.42), (0.56, 0.58), (0.14, 0.58), (0.14, 0.86), (0.7, 0.86), (0.7, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'I' : [ [ (0.7, 0.0), (0.7, 0.14), (0.42, 0.14), (0.42, 0.86), (0.7, 0.86), (0.7, 1.0), (0.0, 1.0), (0.0, 0.86), (0.28, 0.86), (0.28, 0.14), (0.0, 0.14), (0.0, 0.0) ], ], 
+    'H' : [ [ (0.14, 0.0), (0.14, 0.42), (0.56, 0.42), (0.56, 0.0), (0.7, 0.0), (0.7, 1.0), (0.56, 1.0), (0.56, 0.58), (0.14, 0.58), (0.14, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'K' : [ [ (0.14, 0.0), (0.14, 0.42), (0.56, 0.0), (0.7, 0.0), (0.7, 0.14), (0.36, 0.5), (0.7, 0.86), (0.7, 1.0), (0.56, 1.0), (0.14, 0.58), (0.14, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'J' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 1.0), (0.56, 1.0), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.14, 0.28), (0.0, 0.28), (0.0, 0.14), (0.14, 0.0) ], ], 
+    'M' : [ [ (0.14, 0.0), (0.14, 0.72), (0.34, 0.5), (0.56, 0.72), (0.56, 0.0), (0.7, 0.0), (0.7, 1.0), (0.56, 1.0), (0.34, 0.78), (0.14, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'L' : [ [ (0.7, 0.0), (0.7, 0.14), (0.14, 0.14), (0.14, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'O' : [ [ (0.28, 0.0), (0.28, 0.14), (0.14, 0.28), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.28, 0.0), (0.56, 0.0), (0.7, 0.14), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0) ], ], 
+    'N' : [ [ (0.14, 0.0), (0.14, 0.72), (0.56, 0.28), (0.56, 0.0), (0.7, 0.0), (0.7, 1.0), (0.56, 1.0), (0.56, 0.58), (0.14, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'Q' : [ [ (0.28, 0.0), (0.28, 0.14), (0.14, 0.28), (0.14, 0.72), (0.28, 0.86), (0.42, 0.86), (0.56, 0.72), (0.56, 0.14), (0.42, 0.28), (0.28, 0.28), (0.42, 0.14), (0.28, 0.14), (0.28, 0.0), (0.7, 0.0), (0.7, 0.86), (0.56, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.14), (0.14, 0.0) ], ], 
+    'P' : [ [ (0.14, 0.0), (0.14, 0.86), (0.42, 0.86), (0.56, 0.72), (0.42, 0.58), (0.14, 0.58), (0.14, 0.42), (0.56, 0.42), (0.7, 0.58), (0.7, 0.86), (0.56, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\fonts\simple.py to ipkissat3\ipkiss\primitives\fonts\simple.py.
RefactoringTool: Refactored ipkiss24\ipkiss\primitives\fonts\standard.py

+    'S' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 0.42), (0.56, 0.58), (0.28, 0.58), (0.14, 0.72), (0.28, 0.86), (0.7, 0.86), (0.7, 1.0), (0.14, 1.0), (0.0, 0.86), (0.0, 0.58), (0.14, 0.42), (0.42, 0.42), (0.56, 0.28), (0.42, 0.14), (0.0, 0.14), (0.0, 0.0) ], ], 
+    'R' : [ [ (0.14, 0.0), (0.14, 0.86), (0.42, 0.86), (0.56, 0.72), (0.42, 0.58), (0.14, 0.58), (0.14, 0.42), (0.56, 0.0), (0.7, 0.0), (0.7, 0.14), (0.42, 0.42), (0.56, 0.42), (0.7, 0.58), (0.7, 0.86), (0.56, 1.0), (0.0, 1.0), (0.0, 0.0) ], ], 
+    'U' : [ [ (0.56, 0.0), (0.7, 0.14), (0.7, 1.0), (0.56, 1.0), (0.56, 0.28), (0.42, 0.14), (0.28, 0.14), (0.14, 0.28), (0.14, 1.0), (0.0, 1.0), (0.0, 0.14), (0.14, 0.0) ], ], 
+    'T' : [ [ (0.42, 0.0), (0.42, 0.86), (0.7, 0.86), (0.7, 1.0), (0.0, 1.0), (0.0, 0.86), (0.28, 0.86), (0.28, 0.0) ], ], 
+    'W' : [ [ (0.0, 0.14), (0.14, 0.0), (0.36, 0.22), (0.56, 0.0), (0.7, 0.14), (0.7, 1.0), (0.56, 1.0), (0.56, 0.28), (0.36, 0.5), (0.14, 0.28), (0.14, 1.0), (0.0, 1.0) ], ], 
+    'V' : [ [ (0.0, 0.36), (0.36, 0.0), (0.7, 0.36), (0.7, 1.0), (0.56, 1.0), (0.56, 0.5), (0.36, 0.28), (0.14, 0.5), (0.14, 1.0), (0.0, 1.0) ], ], 
+    'Y' : [ [ (0.0, 0.72), (0.28, 0.42), (0.28, 0.0), (0.42, 0.0), (0.42, 0.42), (0.7, 0.72), (0.7, 1.0), (0.56, 1.0), (0.56, 0.86), (0.34, 0.64), (0.14, 0.86), (0.14, 1.0), (0.0, 1.0) ], ], 
+    'X' : [ [ (0.14, 0.0), (0.14, 0.08), (0.36, 0.28), (0.56, 0.08), (0.56, 0.0), (0.7, 0.0), (0.7, 0.22), (0.42, 0.5), (0.7, 0.78), (0.7, 1.0), (0.56, 1.0), (0.56, 0.92), (0.36, 0.72), (0.14, 0.92), (0.14, 1.0), (0.0, 1.0), (0.0, 0.78), (0.28, 0.5), (0.0, 0.22), (0.0, 0.0) ], ], 
+    '[' : [ [ (0.5, 0.0), (0.5, 0.14), (0.34, 0.14), (0.34, 0.86), (0.5, 0.86), (0.5, 1.0), (0.2, 1.0), (0.2, 0.0) ], ], 
+    'Z' : [ [ (0.7, 0.0), (0.7, 0.14), (0.14, 0.14), (0.7, 0.72), (0.7, 1.0), (0.0, 1.0), (0.0, 0.86), (0.56, 0.86), (0.0, 0.28), (0.0, 0.0) ], ], 
+    ']' : [ [ (0.5, 0.0), (0.5, 1.0), (0.2, 1.0), (0.2, 0.86), (0.34, 0.86), (0.34, 0.14), (0.2, 0.14), (0.2, 0.0) ], ], 
+    '_' : [ [ (0.0, 0.0), (0.7, 0.0), (0.7, 0.16), (0.0, 0.16) ], ], 
     ' ' : []
     }
 
--- ipkiss24\ipkiss\primitives\fonts\standard.py	(original)
+++ ipkiss24\ipkiss\primitives\fonts\standard.py	(refactored)
@@ -31,69 +31,69 @@
 TEXT_FONT_STANDARD.cell_size = (0.6, 1.0)
 TEXT_FONT_STANDARD.spacing = 0.2
 TEXT_FONT_STANDARD.line_width = 0.1
-TEXT_FONT_STANDARD.default_char = [(0.0,0.2), (0.0,0.8), (0.6,0.8), (0.6,0.2), (0.0,0.2), (0.0,0.8)]
+TEXT_FONT_STANDARD.default_char = [(0.0, 0.2), (0.0, 0.8), (0.6, 0.8), (0.6, 0.2), (0.0, 0.2), (0.0, 0.8)]
 TEXT_FONT_STANDARD.coords = {
-    'A' : [[(0.0,0.0), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.0)], [(0.6,0.5), (0.0,0.5)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)]],
-    'B' : [[(0.0,0.0), (0.0,1.0)],[(-0.1,1.0), (0.5,1.0), (0.5,0.5), (0.6,0.5), (0.6, 0.0), (-0.1,0.0)], [(0.0,0.5), (0.6,0.5)]],
-    'C' : [[(0.6,0.1), (0.6,0.0), (0.1,0.0), (0.0,0.1), (0.0,0.9), (0.1,1.0), (0.6, 1.0), (0.6,0.9)]],
-    'D' : [[(0.0,0.0), (0.0,1.0)], [(-0.1,1.0),(0.4,1.0), (0.6,0.8), (0.6,0.2), (0.4,0.0), (-0.1,0.0)]],
-    'E' : [[(0.6,0.1), (0.6,0.0), (0.0,0.0), (0.0,1.0), (0.6,1.0), (0.6,0.9)], [(0.0,0.5), (0.4,0.5)], [(0.4,0.4),(0.4,0.6)]],
-    'F' : [[(0.0,0.0), (0.0,1.0), (0.6,1.0), (0.6, 0.9)], [(0.0,0.5), (0.4,0.5)], [(-0.1,0.0),(0.1,0.0)], [(0.4,0.4),(0.4,0.6)]],
-    'G' : [[(0.3,0.4), (0.3,0.5), (0.6,0.5), (0.6,0.1), (0.5,0.0), (0.1,0.0), (0.0,0.1), (0.0,0.9), (0.1,1.0), (0.6,1.0), (0.6,0.9)]],
-    'H' : [[(0.0,0.0), (0.0,1.0)], [(0.0,0.5), (0.6,0.5)], [(0.6,1.0), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'I' : [[(0.1,0.0), (0.5,0.0)], [(0.3,0.0), (0.3,1.0)], [(0.1,1.0), (0.5,1.0)]],
-    'J' : [[(0.0,0.1), (0.1,0.0), (0.3,0.0), (0.4,0.1), (0.4,1.0)], [(0.2,1.0), (0.6,1.0)]],
-    'K' : [[(0.0,0.0), (0.0,1.0)], [(0.0,0.5), (0.1,0.5), (0.6,1.0)], [(0.1,0.5), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'L' : [[(0.6,0.1), (0.6,0.0), (0.0,0.0), (0.0,1.0)], [(-0.1,1.0), (0.1,1.0)]],
-    'M' : [[(0.0,0.0), (0.0,1.0)],[(-0.1,1.0), (0.1, 1.0), (0.3,0.8), (0.5, 1.0), (0.7,1.0)], [(0.6,1.0), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)]],
-    'N' : [[(0.0,0.0), (0.0,1.0)],[(-0.1,1.0), (0.1, 1.0), (0.5,0.6), (0.6,0.6)], [(0.6,1.0), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)], [(0.5,1.0),(0.7,1.0)]],
-    'O' : [[(0.0,0.2), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.4)], [(0.6,0.5), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0, 0.2), (0.0,0.8)]],
-    'P' : [[(0.0,0.0), (0.0,1.0)],[ (-0.1, 1.0), (0.5,1.0), (0.6,0.9), (0.6,0.5), (0.5,0.4), (0.0,0.4)], [(-0.1,0.0),(0.1,0.0)]],
-    'Q' : [[(0.0,0.2), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0, 0.2)], [(0.4,0.2), (0.6,0.0)]],
-    'R' : [[(0.0,0.0), (0.0,1.0)],[ (-0.1, 1.0), (0.5,1.0), (0.6,0.9), (0.6,0.5), (0.5,0.4), (0.0,0.4)], [(0.4,0.4), (0.4,0.3), (0.6, 0.1), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)]],
-    'S' : [[(0.0,0.1), (0.0,0.0), (0.5,0.0), (0.6,0.1), (0.6,0.4), (0.5,0.5), (0.1,0.5), (0.0,0.6), (0.0,0.9), (0.1,1.0), (0.6,1.0), (0.6,0.9)]],
-    'T' : [[(0.3,0.0), (0.3,1.0)], [(0.0,0.9), (0.0,1.0), (0.6,1.0), (0.6,0.9)],[(0.2,0.0), (0.4,0.0)]],
-    'U' : [[(0.0,1.0), (0.0,0.1), (0.1,0.0), (0.5,0.0), (0.6,0.1), (0.6,1.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'V' : [[(0.0,1.0), (0.0,0.3), (0.3,0.0), (0.6,0.3), (0.6,1.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'W' : [[(0.0,1.0), (0.0,0.1), (0.1,0.0), (0.3,0.2), (0.5,0.0), (0.6,0.1), (0.6,1.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'X' : [[(0.0,0.0), (0.0,0.2), (0.6,0.8), (0.6,1.0)], [(0.0,1.0), (0.0,0.8), (0.6,0.2), (0.6,0.0)], [(-0.1,0.0),(0.1,0.0)], [(0.5,0.0),(0.7,0.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'Y' : [[(0.3,0.0), (0.3,0.5), (0.0,0.8), (0.0,1.0)], [(0.3,0.5), (0.6,0.8), (0.6,1.0)], [(0.2,0.0), (0.4,0.0)], [(-0.1,1.0),(0.1,1.0)], [(0.5,1.0),(0.7,1.0)]],
-    'Z' : [[(0.0,0.9), (0.0,1.0), (0.6,1.0), (0.6,0.8), (0.0,0.2), (0.0,0.0), (0.6,0.0), (0.6,0.1)]],
-    '0' : [[(0.3,0.0), (0.2,0.0), (0.0,0.2), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.4)], [(0.6,0.5), (0.6,0.2), (0.4,0.0), (0.2,0.0), (0.0,0.2), (0.0, 0.5)], [(0.1, 0.1), (0.3, 0.3), (0.3, 0.7), (0.5,0.9)]],
-    '1' : [[(0.1,0.7), (0.4,1.0), (0.5,1.0), (0.5,0.0)],[(0.4,0.0), (0.6,0.0)]],
-    '2' : [[(0.0,0.9), (0.1,1.0), (0.5,1.0), (0.6,0.9), (0.6,0.7), (0.0,0.1), (0.0,0.0), (0.6,0.0), (0.6,0.1)]],
-    '3' : [[(0.0,0.9), (0.1,1.0), (0.5,1.0), (0.6,0.9), (0.6,0.6), (0.5,0.5), (0.3,0.5)], [(0.5,0.5), (0.6,0.4), (0.6,0.1), (0.5,0.0), (0.1,0.0), (0.0,0.1)]],
-    '4' : [[(0.1,1.0), (0.0,1.0), (0.0,0.4), (0.6,0.4)], [(0.4,0.6), (0.4,0.0)], [(0.3,0.0),(0.5,0.0)]],
-    '5' : [[(0.6,0.9), (0.6,1.0), (0.0,1.0), (0.0,0.6), (0.4,0.6), (0.6,0.4), (0.6,0.1), (0.5,0.0), (0.1,0.0), (0.0,0.1)]],
-    '6' : [[(0.0,0.5), (0.5,0.5), (0.6,0.4), (0.6,0.1), (0.5,0.0), (0.2,0.0)], [(0.3,0.0), (0.1, 0.0), (0.0,0.1), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8)]],
-    '7' : [[(0.0,0.9), (0.0,1.0), (0.6,1.0), (0.6,0.8), (0.3,0.5), (0.3,0.0)],[(0.2,0.0), (0.4,0.0)]],
-    '8' : [[(0.1,0.5), (0.0,0.6), (0.0,0.8), (0.2,1.0), (0.4,1.0), (0.6,0.8), (0.6,0.6), (0.5,0.5),(0.2,0.5)], [(0.4,0.5), (0.1,0.5), (0.0,0.4), (0.0,0.1), (0.1,0.0), (0.3,0.0)], [(0.2,0.0), (0.5,0.0), (0.6,0.1), (0.6,0.4), (0.5,0.5)]],
-    '9' : [[(0.6,0.4), (0.1,0.4), (0.0,0.5), (0.0,0.9), (0.1,1.0), (0.3,1.0)], [(0.2,1.0), (0.5,1.0), (0.6,0.9), (0.6,0.1), (0.5,0.0), (0.1,0.0), (0.0,0.1), (0.0,0.2)]],				   '.' : [[(0.25,0.0), (0.35,0.0)]],
-    ',' : [[(0.15,-0.2),(0.35,0.0)]],
-    '(' : [[(0.4,1.0), (0.2,0.8), (0.2,0.2), (0.4,0.0)]],
-    ')' : [[(0.2,1.0), (0.4,0.8), (0.4,0.2), (0.2,0.0)]],
-    '[' : [[(0.4,1.0), (0.2,1.0), (0.2,0.0), (0.4,0.0)]],
-    ']' : [[(0.2,1.0), (0.4,1.0), (0.4,0.0), (0.2,0.0)]],
-    '#' : [[(0.0,0.6), (0.6,0.6)], [(0.6,0.3), (0.0,0.3)], [(0.15,0.1), (0.15,0.8)],  [(0.45,0.8), (0.45,0.1)]],
-    '%' : [[(0.0,1.0), (0.2,1.0), (0.2,0.8), (0.0,0.8), (0.0,1.0), (0.2,1.0)], [(0.0,0.2), (0.6,0.8)], [(0.4,0.2), (0.6,0.2), (0.6,0.0), (0.4,0.0), (0.4,0.2), (0.6,0.2)]],
-    '$' : [[(0.0,0.2), (0.1,0.1), (0.5,0.1), (0.6,0.2), (0.6,0.4), (0.5,0.5), (0.1,0.5), (0.0,0.6), (0.0,0.8), (0.1,0.9), (0.5,0.9), (0.6,0.8)], [(0.3, -0.1), (0.3,1.1)]],
-    '*' : [[(0.0,0.5), (0.6,0.5)], [(0.1,0.8), (0.3, 0.6), (0.3,0.4), (0.5, 0.2)], [(0.1,0.2), (0.3, 0.4)], [(0.3,0.6), (0.5, 0.8)]],
-    ':' : [[(0.25,0.0), (0.35,0.0)], [(0.25,0.4), (0.35,0.4)]],
-    ';' : [[(0.15,-0.2), (0.35,0.0)], [(0.25,0.4), (0.35,0.4)]],
-    '!' : [[(0.25,0.0), (0.35,0.0)], [(0.3,1.0), (0.3,0.3)]],
-    '?' : [[(0.25,0.0), (0.35,0.0)], [(0.0,0.8),(0.0,0.9), (0.1,1.0), (0.4,1.0), (0.5,0.9), (0.5,0.7), (0.3,0.5), (0.3,0.3)]],
-    '/' : [[(0.0,0.0), (0.0,0.2), (0.6,0.8), (0.6,1.0)]],
-    '\\': [[(0.0,1.0), (0.0,0.8), (0.6,0.2), (0.6,0.0)]],
-    '-' : [[(0.1,0.5), (0.5,0.5)]],
-    '_' : [[(0.0,0.0), (0.6,0.0)]],
-    '+' : [[(0.1,0.5), (0.5,0.5)], [(0.3,0.3), (0.3, 0.7)]],
-    '=' : [[(0.1,0.4), (0.5,0.4)], [(0.1,0.6), (0.5,0.6)]],
-    '{' : [[(0.4,1.0), (0.3,0.9), (0.3,0.6), (0.2,0.5), (0.3,0.4), (0.3, 0.1), (0.4,0.0)]],
-    '}' : [[(0.2,1.0), (0.3,0.9), (0.3,0.6), (0.4,0.5), (0.3,0.4), (0.3, 0.1), (0.2,0.0)]],
-    '<' : [[(0.5,0.0), (0.1,0.4), (0.5,0.8)]],
-    '>' : [[(0.1,0.0), (0.5,0.4), (0.1,0.8)]],
-    '`' : [[(0.3,1.2), (0.3,0.7)]],
-    '\"': [[(0.1,1.2),(0.2,0.8)],[(0.3,1.2),(0.4,0.8)]],
-    '^' : [[(0.05, 0.8), (0.25, 1.0), (0.35, 1.0), (0.55,0.8)]],
+    'A' : [[(0.0, 0.0), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.0)], [(0.6, 0.5), (0.0, 0.5)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)]],
+    'B' : [[(0.0, 0.0), (0.0, 1.0)], [(-0.1, 1.0), (0.5, 1.0), (0.5, 0.5), (0.6, 0.5), (0.6, 0.0), (-0.1, 0.0)], [(0.0, 0.5), (0.6, 0.5)]],
+    'C' : [[(0.6, 0.1), (0.6, 0.0), (0.1, 0.0), (0.0, 0.1), (0.0, 0.9), (0.1, 1.0), (0.6, 1.0), (0.6, 0.9)]],
+    'D' : [[(0.0, 0.0), (0.0, 1.0)], [(-0.1, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.2), (0.4, 0.0), (-0.1, 0.0)]],
+    'E' : [[(0.6, 0.1), (0.6, 0.0), (0.0, 0.0), (0.0, 1.0), (0.6, 1.0), (0.6, 0.9)], [(0.0, 0.5), (0.4, 0.5)], [(0.4, 0.4), (0.4, 0.6)]],
+    'F' : [[(0.0, 0.0), (0.0, 1.0), (0.6, 1.0), (0.6, 0.9)], [(0.0, 0.5), (0.4, 0.5)], [(-0.1, 0.0), (0.1, 0.0)], [(0.4, 0.4), (0.4, 0.6)]],
+    'G' : [[(0.3, 0.4), (0.3, 0.5), (0.6, 0.5), (0.6, 0.1), (0.5, 0.0), (0.1, 0.0), (0.0, 0.1), (0.0, 0.9), (0.1, 1.0), (0.6, 1.0), (0.6, 0.9)]],
+    'H' : [[(0.0, 0.0), (0.0, 1.0)], [(0.0, 0.5), (0.6, 0.5)], [(0.6, 1.0), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'I' : [[(0.1, 0.0), (0.5, 0.0)], [(0.3, 0.0), (0.3, 1.0)], [(0.1, 1.0), (0.5, 1.0)]],
+    'J' : [[(0.0, 0.1), (0.1, 0.0), (0.3, 0.0), (0.4, 0.1), (0.4, 1.0)], [(0.2, 1.0), (0.6, 1.0)]],
+    'K' : [[(0.0, 0.0), (0.0, 1.0)], [(0.0, 0.5), (0.1, 0.5), (0.6, 1.0)], [(0.1, 0.5), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'L' : [[(0.6, 0.1), (0.6, 0.0), (0.0, 0.0), (0.0, 1.0)], [(-0.1, 1.0), (0.1, 1.0)]],
+    'M' : [[(0.0, 0.0), (0.0, 1.0)], [(-0.1, 1.0), (0.1, 1.0), (0.3, 0.8), (0.5, 1.0), (0.7, 1.0)], [(0.6, 1.0), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)]],
+    'N' : [[(0.0, 0.0), (0.0, 1.0)], [(-0.1, 1.0), (0.1, 1.0), (0.5, 0.6), (0.6, 0.6)], [(0.6, 1.0), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'O' : [[(0.0, 0.2), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.4)], [(0.6, 0.5), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.2), (0.0, 0.8)]],
+    'P' : [[(0.0, 0.0), (0.0, 1.0)], [ (-0.1, 1.0), (0.5, 1.0), (0.6, 0.9), (0.6, 0.5), (0.5, 0.4), (0.0, 0.4)], [(-0.1, 0.0), (0.1, 0.0)]],
+    'Q' : [[(0.0, 0.2), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.2)], [(0.4, 0.2), (0.6, 0.0)]],
+    'R' : [[(0.0, 0.0), (0.0, 1.0)], [ (-0.1, 1.0), (0.5, 1.0), (0.6, 0.9), (0.6, 0.5), (0.5, 0.4), (0.0, 0.4)], [(0.4, 0.4), (0.4, 0.3), (0.6, 0.1), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)]],
+    'S' : [[(0.0, 0.1), (0.0, 0.0), (0.5, 0.0), (0.6, 0.1), (0.6, 0.4), (0.5, 0.5), (0.1, 0.5), (0.0, 0.6), (0.0, 0.9), (0.1, 1.0), (0.6, 1.0), (0.6, 0.9)]],
+    'T' : [[(0.3, 0.0), (0.3, 1.0)], [(0.0, 0.9), (0.0, 1.0), (0.6, 1.0), (0.6, 0.9)], [(0.2, 0.0), (0.4, 0.0)]],
+    'U' : [[(0.0, 1.0), (0.0, 0.1), (0.1, 0.0), (0.5, 0.0), (0.6, 0.1), (0.6, 1.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'V' : [[(0.0, 1.0), (0.0, 0.3), (0.3, 0.0), (0.6, 0.3), (0.6, 1.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'W' : [[(0.0, 1.0), (0.0, 0.1), (0.1, 0.0), (0.3, 0.2), (0.5, 0.0), (0.6, 0.1), (0.6, 1.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'X' : [[(0.0, 0.0), (0.0, 0.2), (0.6, 0.8), (0.6, 1.0)], [(0.0, 1.0), (0.0, 0.8), (0.6, 0.2), (0.6, 0.0)], [(-0.1, 0.0), (0.1, 0.0)], [(0.5, 0.0), (0.7, 0.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'Y' : [[(0.3, 0.0), (0.3, 0.5), (0.0, 0.8), (0.0, 1.0)], [(0.3, 0.5), (0.6, 0.8), (0.6, 1.0)], [(0.2, 0.0), (0.4, 0.0)], [(-0.1, 1.0), (0.1, 1.0)], [(0.5, 1.0), (0.7, 1.0)]],
+    'Z' : [[(0.0, 0.9), (0.0, 1.0), (0.6, 1.0), (0.6, 0.8), (0.0, 0.2), (0.0, 0.0), (0.6, 0.0), (0.6, 0.1)]],
+    '0' : [[(0.3, 0.0), (0.2, 0.0), (0.0, 0.2), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.4)], [(0.6, 0.5), (0.6, 0.2), (0.4, 0.0), (0.2, 0.0), (0.0, 0.2), (0.0, 0.5)], [(0.1, 0.1), (0.3, 0.3), (0.3, 0.7), (0.5, 0.9)]],
+    '1' : [[(0.1, 0.7), (0.4, 1.0), (0.5, 1.0), (0.5, 0.0)], [(0.4, 0.0), (0.6, 0.0)]],
+    '2' : [[(0.0, 0.9), (0.1, 1.0), (0.5, 1.0), (0.6, 0.9), (0.6, 0.7), (0.0, 0.1), (0.0, 0.0), (0.6, 0.0), (0.6, 0.1)]],
+    '3' : [[(0.0, 0.9), (0.1, 1.0), (0.5, 1.0), (0.6, 0.9), (0.6, 0.6), (0.5, 0.5), (0.3, 0.5)], [(0.5, 0.5), (0.6, 0.4), (0.6, 0.1), (0.5, 0.0), (0.1, 0.0), (0.0, 0.1)]],
+    '4' : [[(0.1, 1.0), (0.0, 1.0), (0.0, 0.4), (0.6, 0.4)], [(0.4, 0.6), (0.4, 0.0)], [(0.3, 0.0), (0.5, 0.0)]],
+    '5' : [[(0.6, 0.9), (0.6, 1.0), (0.0, 1.0), (0.0, 0.6), (0.4, 0.6), (0.6, 0.4), (0.6, 0.1), (0.5, 0.0), (0.1, 0.0), (0.0, 0.1)]],
+    '6' : [[(0.0, 0.5), (0.5, 0.5), (0.6, 0.4), (0.6, 0.1), (0.5, 0.0), (0.2, 0.0)], [(0.3, 0.0), (0.1, 0.0), (0.0, 0.1), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8)]],
+    '7' : [[(0.0, 0.9), (0.0, 1.0), (0.6, 1.0), (0.6, 0.8), (0.3, 0.5), (0.3, 0.0)], [(0.2, 0.0), (0.4, 0.0)]],
+    '8' : [[(0.1, 0.5), (0.0, 0.6), (0.0, 0.8), (0.2, 1.0), (0.4, 1.0), (0.6, 0.8), (0.6, 0.6), (0.5, 0.5), (0.2, 0.5)], [(0.4, 0.5), (0.1, 0.5), (0.0, 0.4), (0.0, 0.1), (0.1, 0.0), (0.3, 0.0)], [(0.2, 0.0), (0.5, 0.0), (0.6, 0.1), (0.6, 0.4), (0.5, 0.5)]],
+    '9' : [[(0.6, 0.4), (0.1, 0.4), (0.0, 0.5), (0.0, 0.9), (0.1, 1.0), (0.3, 1.0)], [(0.2, 1.0), (0.5, 1.0), (0.6, 0.9), (0.6, 0.1), (0.5, 0.0), (0.1, 0.0), (0.0, 0.1), (0.0, 0.2)]],				   '.' : [[(0.25, 0.0), (0.35, 0.0)]],
+    ',' : [[(0.15, -0.2), (0.35, 0.0)]],
+    '(' : [[(0.4, 1.0), (0.2, 0.8), (0.2, 0.2), (0.4, 0.0)]],
+    ')' : [[(0.2, 1.0), (0.4, 0.8), (0.4, 0.2), (0.2, 0.0)]],
+    '[' : [[(0.4, 1.0), (0.2, 1.0), (0.2, 0.0), (0.4, 0.0)]],
+    ']' : [[(0.2, 1.0), (0.4, 1.0), (0.4, 0.0), (0.2, 0.0)]],
+    '#' : [[(0.0, 0.6), (0.6, 0.6)], [(0.6, 0.3), (0.0, 0.3)], [(0.15, 0.1), (0.15, 0.8)],  [(0.45, 0.8), (0.45, 0.1)]],
+    '%' : [[(0.0, 1.0), (0.2, 1.0), (0.2, 0.8), (0.0, 0.8), (0.0, 1.0), (0.2, 1.0)], [(0.0, 0.2), (0.6, 0.8)], [(0.4, 0.2), (0.6, 0.2), (0.6, 0.0), (0.4, 0.0), (0.4, 0.2), (0.6, 0.2)]],
+    '$' : [[(0.0, 0.2), (0.1, 0.1), (0.5, 0.1), (0.6, 0.2), (0.6, 0.4), (0.5, 0.5), (0.1, 0.5), (0.0, 0.6), (0.0, 0.8), (0.1, 0.9), (0.5, 0.9), (0.6, 0.8)], [(0.3, -0.1), (0.3, 1.1)]],
+    '*' : [[(0.0, 0.5), (0.6, 0.5)], [(0.1, 0.8), (0.3, 0.6), (0.3, 0.4), (0.5, 0.2)], [(0.1, 0.2), (0.3, 0.4)], [(0.3, 0.6), (0.5, 0.8)]],
+    ':' : [[(0.25, 0.0), (0.35, 0.0)], [(0.25, 0.4), (0.35, 0.4)]],
+    ';' : [[(0.15, -0.2), (0.35, 0.0)], [(0.25, 0.4), (0.35, 0.4)]],
+    '!' : [[(0.25, 0.0), (0.35, 0.0)], [(0.3, 1.0), (0.3, 0.3)]],
+    '?' : [[(0.25, 0.0), (0.35, 0.0)], [(0.0, 0.8), (0.0, 0.9), (0.1, 1.0), (0.4, 1.0), (0.5, 0.9), (0.5, 0.7), (0.3, 0.5), (0.3, 0.3)]],RefactoringTool: Writing converted ipkiss24\ipkiss\primitives\fonts\standard.py to ipkissat3\ipkiss\primitives\fonts\standard.py.
RefactoringTool: Refactored ipkiss24\ipkiss\process\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\process\__init__.py to ipkissat3\ipkiss\process\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\process\layer.py
RefactoringTool: Writing converted ipkiss24\ipkiss\process\layer.py to ipkissat3\ipkiss\process\layer.py.
RefactoringTool: Refactored ipkiss24\ipkiss\process\layer_map.py

+    '/' : [[(0.0, 0.0), (0.0, 0.2), (0.6, 0.8), (0.6, 1.0)]],
+    '\\': [[(0.0, 1.0), (0.0, 0.8), (0.6, 0.2), (0.6, 0.0)]],
+    '-' : [[(0.1, 0.5), (0.5, 0.5)]],
+    '_' : [[(0.0, 0.0), (0.6, 0.0)]],
+    '+' : [[(0.1, 0.5), (0.5, 0.5)], [(0.3, 0.3), (0.3, 0.7)]],
+    '=' : [[(0.1, 0.4), (0.5, 0.4)], [(0.1, 0.6), (0.5, 0.6)]],
+    '{' : [[(0.4, 1.0), (0.3, 0.9), (0.3, 0.6), (0.2, 0.5), (0.3, 0.4), (0.3, 0.1), (0.4, 0.0)]],
+    '}' : [[(0.2, 1.0), (0.3, 0.9), (0.3, 0.6), (0.4, 0.5), (0.3, 0.4), (0.3, 0.1), (0.2, 0.0)]],
+    '<' : [[(0.5, 0.0), (0.1, 0.4), (0.5, 0.8)]],
+    '>' : [[(0.1, 0.0), (0.5, 0.4), (0.1, 0.8)]],
+    '`' : [[(0.3, 1.2), (0.3, 0.7)]],
+    '\"': [[(0.1, 1.2), (0.2, 0.8)], [(0.3, 1.2), (0.4, 0.8)]],
+    '^' : [[(0.05, 0.8), (0.25, 1.0), (0.35, 1.0), (0.55, 0.8)]],
     ' ' : []
 }
--- ipkiss24\ipkiss\process\__init__.py	(original)
+++ ipkiss24\ipkiss\process\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layer import PPLayer, ProcessPurposeLayer, ProcessProperty, PurposeProperty, ProcessLayer, PatternPurpose
+from .layer import PPLayer, ProcessPurposeLayer, ProcessProperty, PurposeProperty, ProcessLayer, PatternPurpose
--- ipkiss24\ipkiss\process\layer.py	(original)
+++ ipkiss24\ipkiss\process\layer.py	(refactored)
@@ -63,11 +63,10 @@
             DEFINED_PROCESS_LAYERS[extension] = L
             return L
 
-class ProcessLayer(StrongPropertyInitializer):
+class ProcessLayer(StrongPropertyInitializer, metaclass=MetaProcessLayerCreator):
     """ Process layer represents a specific process step which requires a defined mask pattern. 
         Typically this is a lithography step in.
         """
-    __metaclass__ = MetaProcessLayerCreator
     name = StringProperty(required = True)
     extension = IdStringProperty(required = True)
     def __init__(self, name, extension, **kwargs):
@@ -117,11 +116,10 @@
             return L
 
 
-class PatternPurpose(StrongPropertyInitializer):
+class PatternPurpose(StrongPropertyInitializer, metaclass=MetaPatternPurposeCreator):
     """ Pattern Purpose represents what should be done with the geometric patterns which is defined.
         e.g. etch, inversion, comment, ...
         """
-    __metaclass__ = MetaPatternPurposeCreator
     name = StringProperty(required = True)
     extension = IdStringProperty(required = True)
     doc = StringProperty(default="")
@@ -219,9 +217,9 @@
     def __delitem__(self, key):
         if isinstance(key, str):
             for i in range(0, len(self)):
-                if list.__getitem__(self,i).extension == key: return list.__delitem__(self,i)
+                if list.__getitem__(self, i).extension == key: return list.__delitem__(self, i)
                 return
-            return list.__delitem__(self,key)
+            return list.__delitem__(self, key)
         else:
             raise TypeError("Index is wrong type " + str(type(key)) + " in ProcessLayerList")
 
@@ -253,7 +251,7 @@
     def add(self, item, overwrite = False):
         if isinstance(item, ProcessLayer):
             if not item in self:
-                list.append(self,item)
+                list.append(self, item)
             elif overwrite:
                 self[item.extension] = item
                 return
--- ipkiss24\ipkiss\process\layer_map.py	(original)
+++ ipkiss24\ipkiss\process\layer_map.py	(refactored)
@@ -46,7 +46,7 @@
             ln = self.process_layer_map.get(key.process, None)
             dt = self.purpose_datatype_map.get(key.purpose, None)
             if ln is None or dt is None: 
-                for pplayer, gdsiilayer in self.layer_map.items():
+                for pplayer, gdsiilayer in list(self.layer_map.items()):
                     if (key.process == pplayer.process) and (key.purpose == pplayer.purpose):
                         return gdsiilayer
                 self.__warn__(key)
@@ -77,10 +77,10 @@
     def define_layer_map(self):
         lm = dict()
         #iterate over all pplayers in TECH.PPLAYER
-        for pplayer_node_str in TECH.PPLAYER.keys():
+        for pplayer_node_str in list(TECH.PPLAYER.keys()):
             pplayer_node = getattr(TECH.PPLAYER, pplayer_node_str)
             if isinstance(pplayer_node, TechnologyTree):
-                for pplayer_str in pplayer_node.keys():
+                for pplayer_str in list(pplayer_node.keys()):
                     pplayer = getattr(pplayer_node, pplayer_str)
                     if isinstance(pplayer, ProcessPurposeLayer):
                         if pplayer.purpose in self.purpose_layer_map:
@@ -99,7 +99,7 @@
     def __getitem__(self, key, default = None):
         if isinstance(key, ProcessPurposeLayer):
             if not key in self.ignore_pplayer:
-                for pplayer, gdsiilayer in self.layer_map.items():
+                for pplayer, gdsiilayer in list(self.layer_map.items()):
                     if (pplayer == key):
                         return gdsiilayer                
                 self.__warn__(key)
@@ -121,8 +121,8 @@
     ignore_undefined_mappings = BoolProperty(default = False)
     
     def __getitem__(self, key, default = None):
-        if (key.process,key.purpose) in self.pplayer_map:
-            (lay,dat) = self.pplayer_map[(key.process,key.purpose)]
+        if (key.process, key.purpose) in self.pplayer_map:
+            (lay, dat) = self.pplayer_map[(key.process, key.purpose)]
             return GdsiiLayer(number=lay, datatype=dat)
         else:
             error_message = "Warning during GDSII export : no corresponding GDSII layer/datatype found for process = %s and purpose = %s" %(key.process, key.purpose)
@@ -144,16 +144,16 @@
     
     def define_gdsiilayer_map(self):
         lm = {}
-        for k, v in self.pplayer_map.items():
+        for k, v in list(self.pplayer_map.items()):
             if v in lm:
                 LOG.warning("PPLayer to GDSII layer mapping for GDSII %i:%i => %s:%s overwritten with %s:%s"
-                            %(v[0],v[1],lm[v][0],lm[v][1],k[0],k[1]))
+                            %(v[0], v[1], lm[v][0], lm[v][1], k[0], k[1]))
             lm[v] = k
         return lm
 
     def __getitem__(self, key, default = None):
-        if (key.number,key.datatype) in self.gdsiilayer_map:
-            (pl,pp) = self.gdsiilayer_map[(key.number,key.datatype)]
+        if (key.number, key.datatype) in self.gdsiilayer_map:
+            (pl, pp) = self.gdsiilayer_map[(key.number, key.datatype)]
             return PPLayer(process=pl, purpose = pp)
         else:
             error_message = "Warning during GDSII import : no corresponding process/purpose layer found for number = %i and datatype = %s" %(key.number, key.datatype)
@@ -175,13 +175,13 @@
     
     def define_layer_process_map(self):
         lpm = {}
-        for k, v in self.process_layer_map.items():
+        for k, v in list(self.process_layer_map.items()):
             lpm[v] = k
         return lpm
     
     def define_datatype_purpose_map(self):
         dpm = {}
-        for k, v in self.purpose_datatype_map.items():
+        for k, v in list(self.purpose_datatype_map.items()):
             dpm[v] = k        
         return dpm
         
@@ -190,7 +190,7 @@
             pr = self.layer_process_map.get(key.number, None)
             pu = self.datatype_purpose_map.get(key.datatype, None)
             if pr is None or pu is None: 
-                for gdsiilayer,pplayer  in self.layer_map.items():
+                for gdsiilayer, pplayer  in list(self.layer_map.items()):
                     if (key.number == gdsiilayer.number) and (key.datatype == gdsiilayer.datatype):
                         return pplayer                
                 self.__warn__(key)                
@@ -227,13 +227,13 @@
     def define_layer_map(self):
         layer_map = super(GdsiiPPLayerInputMap, self).define_layer_map()
         reverse_layer_map = dict()
-        for pplayer, gdsiilayer in layer_map.items():
-            reverse_layer_map[(gdsiilayer.number,gdsiilayer.datatype)] = pplayerRefactoringTool: Writing converted ipkiss24\ipkiss\process\layer_map.py to ipkissat3\ipkiss\process\layer_map.py.
RefactoringTool: No changes to ipkiss24\ipkiss\technology\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\technology\__init__.py to ipkissat3\ipkiss\technology\__init__.py.
RefactoringTool: Refactored ipkiss24\ipkiss\technology\rules.py
RefactoringTool: Writing converted ipkiss24\ipkiss\technology\rules.py to ipkissat3\ipkiss\technology\rules.py.
RefactoringTool: No changes to ipkiss24\ipkiss\technology\settings.py
RefactoringTool: Writing converted ipkiss24\ipkiss\technology\settings.py to ipkissat3\ipkiss\technology\settings.py.
RefactoringTool: Refactored ipkiss24\ipkiss\technology\technology.py
RefactoringTool: Writing converted ipkiss24\ipkiss\technology\technology.py to ipkissat3\ipkiss\technology\technology.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\__init__.py to ipkissat3\ipkiss\visualisation\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\color.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\color.py to ipkissat3\ipkiss\visualisation\color.py.
RefactoringTool: Refactored ipkiss24\ipkiss\visualisation\display_style.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\display_style.py to ipkissat3\ipkiss\visualisation\display_style.py.
RefactoringTool: Refactored ipkiss24\ipkiss\visualisation\layer.py

+        for pplayer, gdsiilayer in list(layer_map.items()):
+            reverse_layer_map[(gdsiilayer.number, gdsiilayer.datatype)] = pplayer
         return reverse_layer_map
                 
     def __getitem__(self, gdsiilayer, default = None):
-        if (gdsiilayer.number,gdsiilayer.datatype) in self.layer_map:
-            return self.layer_map[(gdsiilayer.number,gdsiilayer.datatype)]
+        if (gdsiilayer.number, gdsiilayer.datatype) in self.layer_map:
+            return self.layer_map[(gdsiilayer.number, gdsiilayer.datatype)]
         else:
             error_message = "Warning during GDSII import : no corresponding process/purpose layer found for number = %i and datatype = %s" %(gdsiilayer.number, gdsiilayer.datatype)
             if self.ignore_undefined_mappings:
--- ipkiss24\ipkiss\technology\rules.py	(original)
+++ ipkiss24\ipkiss\technology\rules.py	(refactored)
@@ -20,13 +20,13 @@
 # Contact: ipkiss@intec.ugent.be
 
 from ipkiss.technology import get_technology
-from ipkiss.primitives.layer import Layer, LayerProperty, LayerList,__GeneratedLayer__
-from ipcore.all import StrongPropertyInitializer, StringProperty, PositiveNumberProperty,MixinBowl, RestrictedProperty, RestrictType, ListProperty
+from ipkiss.primitives.layer import Layer, LayerProperty, LayerList, __GeneratedLayer__
+from ipcore.all import StrongPropertyInitializer, StringProperty, PositiveNumberProperty, MixinBowl, RestrictedProperty, RestrictType, ListProperty
 from ipcore.properties.predefined import RESTRICT_NUMBER, RESTRICT_POSITIVE
 
 TECH = get_technology()
 
-class __DesignRule__(StrongPropertyInitializer,MixinBowl):
+class __DesignRule__(StrongPropertyInitializer, MixinBowl):
     """ Design rule base class """
     doc = StringProperty(default="", doc="Documentation of design rule")
     name = StringProperty(default="")
@@ -45,7 +45,7 @@
 
     def get_layers(self):
         l = LayerList()
-        if isinstance(self.layer,__GeneratedLayer__):
+        if isinstance(self.layer, __GeneratedLayer__):
             l += self.layer.layers()
         else:
             l += self.layer
@@ -58,52 +58,52 @@
     layer2 = LayerProperty(required=True, doc="Second layer the rule applies to")
     def get_layers(self):
         l = LayerList()
-        if isinstance(self.layer1,__GeneratedLayer__):
+        if isinstance(self.layer1, __GeneratedLayer__):
             l += self.layer1.layers()
         else:
             l += self.layer1
-        if isinstance(self.layer2,__GeneratedLayer__):
+        if isinstance(self.layer2, __GeneratedLayer__):
             l += self.layer2.layers()
         else:
             l += self.layer2
         return l
     
     def __str__(self):
-        return "Two layer rule %s %s"%(self.layer1,self.layer2)
+        return "Two layer rule %s %s"%(self.layer1, self.layer2)
 
 class MinimumSpaceDesignRule(__LayerDesignRule__):
     """ Minimum allowed space between two edges or vertices in a single layer """
     minimum_space = PositiveNumberProperty(required=True)
     def __str__(self):
-        return "Minimum space %.3f on layer %s"%(self.minimum_space,self.layer)
+        return "Minimum space %.3f on layer %s"%(self.minimum_space, self.layer)
 
 class MaximumSpaceDesignRule(__LayerDesignRule__):
     """ Maximum allowed space between two edges or vertices in a single layer """
     maximum_space = PositiveNumberProperty(required=True)
     
     def __str__(self):
-        return "Maximum space %.3f on layer %s"%(self.maximum_space,self.layer)
+        return "Maximum space %.3f on layer %s"%(self.maximum_space, self.layer)
 
 class MinimumWidthDesignRule(__LayerDesignRule__):
     """ Minimum allowed width between two edges or vertices in a single layer """
     minimum_width = PositiveNumberProperty(required=True)
     
     def __str__(self):
-        return "Minimum width %.3f on layer %s"%(self.minimum_width,self.layer)
+        return "Minimum width %.3f on layer %s"%(self.minimum_width, self.layer)
 
 class MinimumDiameterDesignRule(__LayerDesignRule__):
     """ Minimum allowed width between two edges or vertices in a single layer """
     minimum_diameter = PositiveNumberProperty(required=True)
     
     def __str__(self):
-        return "Minimum diameter %.3f on layer %s"%(self.minimum_diameter,self.layer)
+        return "Minimum diameter %.3f on layer %s"%(self.minimum_diameter, self.layer)
 
 class MaximumWidthDesignRule(__LayerDesignRule__):
     """ Maximum allowed width between two edges or vertices in a single layer """
     maximum_width = PositiveNumberProperty(required=True)
     
     def __str__(self):
-        return "Maximum width %.3f on layer %s"%(self.maximum_width,self.layer)
+        return "Maximum width %.3f on layer %s"%(self.maximum_width, self.layer)
 
 class AllowedWidthsDesignRule(__LayerDesignRule__):
     """ Allowed width between two edges or vertices in a single layer """
@@ -127,21 +127,21 @@
     
 class NoOverlapDesignRule(__TwoLayerDesignRule__):
     def __str__(self):
-        return "Layer %s not on layer %s"%(self.layer1,self.layer2)
+        return "Layer %s not on layer %s"%(self.layer1, self.layer2)
 
 class OverlapDesignRule(__TwoLayerDesignRule__):
     def __str__(self):
-        return "Layer %s must be on layer %s"%(self.layer1,self.layer2)
+        return "Layer %s must be on layer %s"%(self.layer1, self.layer2)
 
 class InsideDesignRule(__TwoLayerDesignRule__):
     def __str__(self):
-        return "Layer %s must be fully covered by layer %s"%(self.layer1,self.layer2)
+        return "Layer %s must be fully covered by layer %s"%(self.layer1, self.layer2)
     
 class MinimumEnclosureDesignRule(__TwoLayerDesignRule__):
     minimum_enclosure = PositiveNumberProperty(required=True)
     
     def __str__(self):
-        return "Layer %s must be enclosed by layer %s by at least %.3f micron"%(self.layer1,self.layer2,self.minimum_enclosure)
+        return "Layer %s must be enclosed by layer %s by at least %.3f micron"%(self.layer1, self.layer2, self.minimum_enclosure)
 
 class Rule(StrongPropertyInitializer):
     design_rule = DesignRuleProperty(required=True)
--- ipkiss24\ipkiss\technology\technology.py	(original)
+++ ipkiss24\ipkiss\technology\technology.py	(refactored)
@@ -64,15 +64,15 @@
     def get_process_layers(self):
         from ipkiss.process.layer import ProcessLayerList, ProcessLayer
         pl = ProcessLayerList()
-        for k,v in self.__dict__.items():
+        for k, v in list(self.__dict__.items()):
             if isinstance(v, ProcessLayer):
                 pl.append(v)
         return pl
     
     def get_key_from_process_layer(self, layer):
         from ipkiss.process.layer import ProcessLayer
-        for k,v in self.__dict__.items():
-            if isinstance(v,ProcessLayer) and v==layer:
+        for k, v in list(self.__dict__.items()):
+            if isinstance(v, ProcessLayer) and v==layer:
                 return k
         return None
                 
--- ipkiss24\ipkiss\visualisation\display_style.py	(original)
+++ ipkiss24\ipkiss\visualisation\display_style.py	(refactored)
@@ -42,7 +42,7 @@
     visible = BoolProperty(default = True)
     
     def __str__(self):
-        return "DisplayStyle : color: %s - edgecolor: %s - stipple: %s - alpha: %f - edgewidth: %f - visible: %s" %(str(self.color),str(self.edgecolor),str(self.stipple), self.alpha,self.edgewidth,self.visible)
+        return "DisplayStyle : color: %s - edgecolor: %s - stipple: %s - alpha: %f - edgewidth: %f - visible: %s" %(str(self.color), str(self.edgecolor), str(self.stipple), self.alpha, self.edgewidth, self.visible)
 
     def blend(self, other, fraction_first_color = 0.33):
         result_color_red = fraction_first_color * self.color.red + (1.0-fraction_first_color) * other.color.red 
--- ipkiss24\ipkiss\visualisation\layer.py	(original)
+++ ipkiss24\ipkiss\visualisation\layer.py	(refactored)
@@ -31,4 +31,4 @@
 
 Layer.mixin(DisplayLayer)
 cycle_colors = [COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_MAGENTA, COLOR_YELLOW, COLOR_CYAN]RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\layer.py to ipkissat3\ipkiss\visualisation\layer.py.
RefactoringTool: Refactored ipkiss24\ipkiss\visualisation\scaler.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\scaler.py to ipkissat3\ipkiss\visualisation\scaler.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\show.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\show.py to ipkissat3\ipkiss\visualisation\show.py.
RefactoringTool: Refactored ipkiss24\ipkiss\visualisation\stipple.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\stipple.py to ipkissat3\ipkiss\visualisation\stipple.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\manager\__init__.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\manager\__init__.py to ipkissat3\ipkiss\visualisation\manager\__init__.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\manager\basic.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\manager\basic.py to ipkissat3\ipkiss\visualisation\manager\basic.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\manager\matplotlib_figure.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\manager\matplotlib_figure.py to ipkissat3\ipkiss\visualisation\manager\matplotlib_figure.py.
RefactoringTool: No changes to ipkiss24\ipkiss\visualisation\manager\tvtk_polydata.py
RefactoringTool: Writing converted ipkiss24\ipkiss\visualisation\manager\tvtk_polydata.py to ipkissat3\ipkiss\visualisation\manager\tvtk_polydata.py.
RefactoringTool: Refactored ipkiss24\picazzo\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\__init__.py to ipkissat3\picazzo\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\builder.py
RefactoringTool: Writing converted ipkiss24\picazzo\builder.py to ipkissat3\picazzo\builder.py.
RefactoringTool: No changes to ipkiss24\picazzo\log.py
RefactoringTool: Writing converted ipkiss24\picazzo\log.py to ipkissat3\picazzo\log.py.
RefactoringTool: No changes to ipkiss24\picazzo\settings.py
RefactoringTool: Writing converted ipkiss24\picazzo\settings.py to ipkissat3\picazzo\settings.py.
RefactoringTool: Refactored ipkiss24\picazzo\container\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\__init__.py to ipkissat3\picazzo\container\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\container\auto_taper_ports.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\auto_taper_ports.py to ipkissat3\picazzo\container\auto_taper_ports.py.
RefactoringTool: No changes to ipkiss24\picazzo\container\container.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\container.py to ipkissat3\picazzo\container\container.py.
RefactoringTool: No changes to ipkiss24\picazzo\container\extend_ports.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\extend_ports.py to ipkissat3\picazzo\container\extend_ports.py.
RefactoringTool: No changes to ipkiss24\picazzo\container\fanout.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\fanout.py to ipkissat3\picazzo\container\fanout.py.
RefactoringTool: Refactored ipkiss24\picazzo\container\route_ports.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\route_ports.py to ipkissat3\picazzo\container\route_ports.py.
RefactoringTool: No changes to ipkiss24\picazzo\container\suppress_ports.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\suppress_ports.py to ipkissat3\picazzo\container\suppress_ports.py.
RefactoringTool: Refactored ipkiss24\picazzo\container\taper_ports.py
RefactoringTool: Writing converted ipkiss24\picazzo\container\taper_ports.py to ipkissat3\picazzo\container\taper_ports.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\__init__.py to ipkissat3\picazzo\fibcoup\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\basic\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\basic\__init__.py to ipkissat3\picazzo\fibcoup\basic\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\basic\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\basic\layout.py to ipkissat3\picazzo\fibcoup\basic\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\cleave\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\cleave\__init__.py to ipkissat3\picazzo\fibcoup\cleave\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\cleave\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\cleave\layout.py to ipkissat3\picazzo\fibcoup\cleave\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\curved\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\curved\__init__.py to ipkissat3\picazzo\fibcoup\curved\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\curved\curved_basic.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\curved\curved_basic.py to ipkissat3\picazzo\fibcoup\curved\curved_basic.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\curved\layout.py

-DEFAULT_DISPLAY_LAYER_SET = [(D, DisplayStyle(color = cycle_colors[D%len(cycle_colors)], alpha = 0.5)) for D in xrange(256)]
+DEFAULT_DISPLAY_LAYER_SET = [(D, DisplayStyle(color = cycle_colors[D%len(cycle_colors)], alpha = 0.5)) for D in range(256)]
--- ipkiss24\ipkiss\visualisation\scaler.py	(original)
+++ ipkiss24\ipkiss\visualisation\scaler.py	(refactored)
@@ -28,7 +28,7 @@
         self.canvas_size = canvas_size        
         self.scale = float(self.canvas_size[0]) / float(self.box[1] - self.box[0])
         self.box_center = (0.5 * box[0] + 0.5 * box[1], 0.5 * box[2]  + 0.5 * box[3])
-        self.box_south_west = (self.box[0],self.box[2]) 
+        self.box_south_west = (self.box[0], self.box[2]) 
         self.origin_offset = self.__calculate_origin_offset()
         
     def __get_scaled_points(self, shape):
@@ -41,10 +41,10 @@
         return origin_offset    
     
     def map_shape(self, shape):
-        return Shape(numpy.asarray(self.__get_scaled_points(shape) , dtype = numpy.integer))
+        return Shape(numpy.asarray(self.__get_scaled_points(shape), dtype = numpy.integer))
     
     def map_shape_to_list(self, shape):
-        return list(numpy.asarray(numpy.reshape(self.__get_scaled_points(shape) , numpy.size(shape.points)), dtype=numpy.integer))
+        return list(numpy.asarray(numpy.reshape(self.__get_scaled_points(shape), numpy.size(shape.points)), dtype=numpy.integer))
 
     def map_coordinate(self, coordinate):  
         s = Shape(points = [coordinate])
--- ipkiss24\ipkiss\visualisation\stipple.py	(original)
+++ ipkiss24\ipkiss\visualisation\stipple.py	(refactored)
@@ -52,7 +52,7 @@
         self.pattern = pattern
     
     def __eq__(self, other):
-        return numpy.array_equal(self.pattern,other.pattern)
+        return numpy.array_equal(self.pattern, other.pattern)
     
     def __str__(self):
         return self.name
@@ -289,4 +289,4 @@
 STIPPLE_LINES_V_BOLD = StipplePattern(name = "LINES_V_BOLD", pattern = __PATTERN_LINES_V_BOLD)
 STIPPLE_LINES_DIAGONAL_L = StipplePattern(name = "LINES_DIAG_L", pattern = __PATTERN_LINES_DIAG_L, matplotlib_hatch='/')
 STIPPLE_LINES_DIAGONAL_R = StipplePattern(name = "LINES_DIAG_R", pattern = __PATTERN_LINES_DIAG_R, matplotlib_hatch='\\')
-STIPPLE_TRIANGLE = StipplePattern(name = "TRIANGLE", pattern = __PATTERN_TRIANGLE , matplotlib_hatch='*')
+STIPPLE_TRIANGLE = StipplePattern(name = "TRIANGLE", pattern = __PATTERN_TRIANGLE, matplotlib_hatch='*')
--- ipkiss24\picazzo\__init__.py	(original)
+++ ipkiss24\picazzo\__init__.py	(refactored)
@@ -24,6 +24,6 @@
 from .log import PICAZZO_LOG as LOG #enable logging output
 from . import settings 
 import sys
-print >>sys.stderr,settings.START_MESSAGE
+print(settings.START_MESSAGE, file=sys.stderr)
 
 
--- ipkiss24\picazzo\container\__init__.py	(original)
+++ ipkiss24\picazzo\container\__init__.py	(refactored)
@@ -19,10 +19,10 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from extend_ports import *
-from fanout import *
-from route_ports import *
-from suppress_ports import *
-from taper_ports import *
-from auto_taper_ports import *
+from .extend_ports import *
+from .fanout import *
+from .route_ports import *
+from .suppress_ports import *
+from .taper_ports import *
+from .auto_taper_ports import *
 
--- ipkiss24\picazzo\container\route_ports.py	(original)
+++ ipkiss24\picazzo\container\route_ports.py	(refactored)
@@ -182,19 +182,19 @@
         return west_routes + east_routes
     
     def define_elements(self, elems):
-        return super(RoutePortsEastWest,self).define_elements(elems)
+        return super(RoutePortsEastWest, self).define_elements(elems)
     
     def define_ports(self, port_list):
         from copy import deepcopy
         SPL= self.get_structure_port_list()
         west_routes = self.__get_west_routes__()
-        for port_ref,R in zip(self.ports_to_west, west_routes):
+        for port_ref, R in zip(self.ports_to_west, west_routes):
             new_port = deepcopy(SPL[port_ref])
             new_port.position = R.points[-1]
             new_port.angle = R.angles_deg()[-2]
             port_list += new_port
         east_routes = self.__get_east_routes__()  
-        for port_ref,R in zip(self.ports_to_east, east_routes):
+        for port_ref, R in zip(self.ports_to_east, east_routes):
             new_port = deepcopy(SPL[port_ref])
             new_port.position = R.points[-1]
             new_port.angle = R.angles_deg()[-2]
--- ipkiss24\picazzo\container\taper_ports.py	(original)
+++ ipkiss24\picazzo\container\taper_ports.py	(refactored)
@@ -22,7 +22,7 @@
 
 from .container import __StructureContainerWithPortLabels__
 from picazzo.wg.wgdefs.wg_fc.tapers import WgElPortTaperLinear, WgElPortTaperFromShallow
-from ipkiss.plugins.photonics.port.port import InOpticalPort,OutOpticalPort
+from ipkiss.plugins.photonics.port.port import InOpticalPort, OutOpticalPort
 from ipkiss.plugins.photonics.port.port_list import OpticalPortList
 from ipkiss.plugins.photonics.wg.definition import WaveguideDefProperty
 from ipkiss.plugins.photonics.wg.basic import WgElDefinition
@@ -39,7 +39,7 @@
     tapers = DefinitionProperty(fdef_name = "define_tapers")    
     
     def define_elements(self, elems):
-        super(__TaperPorts__,self).define_elements(elems)
+        super(__TaperPorts__, self).define_elements(elems)
         elems += self.tapers
         return elems
         
--- ipkiss24\picazzo\fibcoup\basic\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\basic\layout.py	(refactored)
@@ -70,13 +70,13 @@
         (grating, grating_transform) = self.__get_grating__()
         return  grating
 
-class FiberCouplerGrating(__Socket__ , __Grating__, FiberCoupler):
+class FiberCouplerGrating(__Socket__, __Grating__, FiberCoupler):
     """ fiber coupler grating base class, which combines a grating on top of a socket """
     __name_prefix__ = "FIBCOUPG"
         
     def define_elements(self, elems):
         elems += SRef(self.socket, self.socket_position)
-        E = SRef(self.grating, position = (0.0, 0.0) , transformation = self.grating_transform)
+        E = SRef(self.grating, position = (0.0, 0.0), transformation = self.grating_transform)
         if self.grating_transform is None or self.grating_transform.is_orthogonal():
             elems  += E
         else:
@@ -85,10 +85,10 @@
 
     def define_ports(self, ports):
         ports = self.socket.ports.move_copy(self.socket_position)
-        fibcoup_pos = Coord2(0.0,0.0)
+        fibcoup_pos = Coord2(0.0, 0.0)
         if self.grating_transform:
             fibcoup_pos.transform(self.grating_transform)
-        ports.append(VerticalOpticalPort(position=(fibcoup_pos.x,fibcoup_pos.y,0.0),inclination=0.0, angle=0.0)) # FIXME: use port given by the grating
+        ports.append(VerticalOpticalPort(position=(fibcoup_pos.x, fibcoup_pos.y, 0.0), inclination=0.0, angle=0.0)) # FIXME: use port given by the grating
         return ports
 
     
--- ipkiss24\picazzo\fibcoup\curved\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\curved\layout.py	(refactored)
@@ -21,7 +21,7 @@
 
 from .curved_basic import CurveDimension, CurvedGrating
 from ..basic import FiberCouplerGrating
-from math import tan, floor, ceil, asin, cos, sin, atan,sqrt
+from math import tan, floor, ceil, asin, cos, sin, atan, sqrt
 from ipkiss.all import *
 
 __all__ = ["ConcentricCurvedGrating",
@@ -90,7 +90,7 @@
 def FiberCouplerConcentricCurvedGratingBox(min_r_h, min_r_v, h_period, v_period, n_o_trenches, trench_width, box_width, socket , process = TECH.PROCESS.FC, socket_position=(0.0, 0.0)):
     """ Concentric elliptical curved grating fit inside a rectangular box """
     grating = ConcentricCurvedGratingBox(min_r_h, min_r_v, h_period, v_period, n_o_trenches, trench_width, box_width, process )
-    return FiberCouplerGrating(socket=socket,socket_position=socket_position, grating=grating)
+    return FiberCouplerGrating(socket=socket, socket_position=socket_position, grating=grating)
 
 ##############################################################RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\curved\layout.py to ipkissat3\picazzo\fibcoup\curved\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\grating\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\grating\__init__.py to ipkissat3\picazzo\fibcoup\grating\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\grating\layout.py

 
@@ -124,8 +124,8 @@
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle
         This can be a set of arbitraty lines and x-positions. The ellipses are made confocal, and the h_v_ratio gives the ratio of the vertical versus the 
         horizontal size of the ellipses. (Should be between zero and one) """
-    grating = ConfocalCurvedGratingBoxGeneric(line_widths_positions, focus_position, box_width, v_h_ratio , process = process)
-    return FiberCouplerGrating(socket=socket,socket_position=socket_position, grating=grating)
+    grating = ConfocalCurvedGratingBoxGeneric(line_widths_positions, focus_position, box_width, v_h_ratio, process = process)
+    return FiberCouplerGrating(socket=socket, socket_position=socket_position, grating=grating)
 
 ##############################################################
 
@@ -156,8 +156,8 @@
 
 def FiberCouplerConfocalCurvedGratingBox(min_index,  h_period, v_period, n_o_trenches, box_width, socket, fill_factor = 0.5, process = TECH.PROCESS.FC, socket_position=(0.0, 0.0)):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle"""
-    grating = ConfocalCurvedGratingBox(min_index,  h_period, v_period, n_o_trenches, box_width, fill_factor , process = process)
-    return FiberCouplerGrating(socket=socket, socket_position = socket_position,grating= grating)
+    grating = ConfocalCurvedGratingBox(min_index,  h_period, v_period, n_o_trenches, box_width, fill_factor, process = process)
+    return FiberCouplerGrating(socket=socket, socket_position = socket_position, grating= grating)
 ##############################################################
 
 def ConfocalCurvedGratingBoxApodized(min_index,  h_period, v_period, n_o_trenches, box_width, fill_factor = 0.5, apo_func = lambda t:t, chirp_func  = lambda p:p, process = TECH.PROCESS.FC):
@@ -193,8 +193,8 @@
 
 def FiberCouplerConfocalCurvedGratingBoxApodized(min_index,  h_period, v_period, n_o_trenches, box_width, socket, fill_factor = 0.5, apo_func = lambda t:t, chirp_func = lambda p:p, process = TECH.PROCESS.FC, socket_position=(0.0, 0.0)):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle"""
-    grating = ConfocalCurvedGratingBox(min_index,  h_period, v_period, n_o_trenches, box_width, fill_factor , apo_func, chirp_func, process = process)
-    return FiberCouplerGrating(socket=socket, socket_position = socket_position,grating= grating)
+    grating = ConfocalCurvedGratingBox(min_index,  h_period, v_period, n_o_trenches, box_width, fill_factor, apo_func, chirp_func, process = process)
+    return FiberCouplerGrating(socket=socket, socket_position = socket_position, grating= grating)
 
 ##############################################################
 
@@ -207,20 +207,20 @@
 
 def FiberCouplerMinXConfocalCurvedGratingBox(min_x, h_period, v_period, box_length, box_width,  socket, fill_factor = 0.5, process = TECH.PROCESS.FC, socket_position=(0.0, 0.0)):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle, starting from a given distance from the focus point"""
-    grating = MinXConfocalCurvedGratingBox(min_x, h_period, v_period, box_length, box_width, fill_factor , process )
-    return FiberCouplerGrating(socket=socket,socket_position=socket_position ,grating= grating)
+    grating = MinXConfocalCurvedGratingBox(min_x, h_period, v_period, box_length, box_width, fill_factor, process )
+    return FiberCouplerGrating(socket=socket, socket_position=socket_position, grating= grating)
 
 ##############################################################
 
 def AngleConfocalCurvedGratingBox(h_period, v_period, box_length, box_width, angle, fill_factor = 0.5, extra_width = 0.0, process = TECH.PROCESS.FC,**kwargs):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle, with focus distance calculated from the aperture spread angle"""
     min_x = 0.5 * box_width / tan(0.5*angle*DEG2RAD) - 0.5 * box_length
-    return MinXConfocalCurvedGratingBox(min_x, h_period, v_period, box_length, box_width + extra_width, fill_factor, process,**kwargs)
-
-def FiberCouplerAutoConfocalCurvedGratingBox(h_period, v_period, box_length, box_width,  socket, fill_factor = 0.5, extra_width = 0.0, process = TECH.PROCESS.FC,socket_position = (0.0,0.0),**kwargs):
+    return MinXConfocalCurvedGratingBox(min_x, h_period, v_period, box_length, box_width + extra_width, fill_factor, process, **kwargs)
+
+def FiberCouplerAutoConfocalCurvedGratingBox(h_period, v_period, box_length, box_width,  socket, fill_factor = 0.5, extra_width = 0.0, process = TECH.PROCESS.FC,socket_position = (0.0, 0.0),**kwargs):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle, with focus distance calculated from the aperture spread angle"""
-    grating = AngleConfocalCurvedGratingBox(h_period, v_period, box_length, box_width, socket.angle_deg(), fill_factor , extra_width , process )    
-    return FiberCouplerGrating(socket=socket,socket_position=socket_position, grating=grating,**kwargs)
+    grating = AngleConfocalCurvedGratingBox(h_period, v_period, box_length, box_width, socket.angle_deg(), fill_factor, extra_width, process )    
+    return FiberCouplerGrating(socket=socket, socket_position=socket_position, grating=grating, **kwargs)
 
 ##############################################################
 def MinXConfocalCurvedGratingBoxApodized(min_x, h_period, v_period, box_length, box_width, fill_factor = 0.5, apo_func = lambda t:t, chirp_func = lambda p:p, process = TECH.PROCESS.FC):
@@ -233,12 +233,12 @@
 def AngleConfocalCurvedGratingBoxApodized(h_period, v_period, box_length, box_width, angle, fill_factor = 0.5, apo_func = lambda t:t, chirp_func = lambda p:p, extra_width = 0.0, process = TECH.PROCESS.FC,**kwargs):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle, with focus distance calculated from the aperture spread angle"""
     min_x = 0.5 * box_width / tan(0.5*angle*DEG2RAD) - 0.5 * box_length
-    return MinXConfocalCurvedGratingBoxApodized(min_x, h_period, v_period, box_length, box_width + extra_width, fill_factor, apo_func, chirp_func, process,**kwargs)
-
-def FiberCouplerAutoConfocalCurvedGratingBoxApodized(h_period, v_period, box_length, box_width,  socket, fill_factor = 0.5, apo_func = lambda t:t, chirp_func =  lambda p:p, extra_width = 0.0, process = TECH.PROCESS.FC,socket_position = (0.0,0.0),**kwargs):
+    return MinXConfocalCurvedGratingBoxApodized(min_x, h_period, v_period, box_length, box_width + extra_width, fill_factor, apo_func, chirp_func, process, **kwargs)
+
+def FiberCouplerAutoConfocalCurvedGratingBoxApodized(h_period, v_period, box_length, box_width,  socket, fill_factor = 0.5, apo_func = lambda t:t, chirp_func =  lambda p:p, extra_width = 0.0, process = TECH.PROCESS.FC,socket_position = (0.0, 0.0),**kwargs):
     """ Confocal elliptical curved grating (all ellipses share the east focus point) fit inside a rectangle, with focus distance calculated from the aperture spread angle"""
-    grating = AngleConfocalCurvedGratingBoxApodized(h_period, v_period, box_length, box_width, socket.angle_deg(), fill_factor , apo_func, chirp_func, extra_width , process )    
-    return FiberCouplerGrating(socket=socket,socket_position=socket_position, grating=grating,**kwargs)
+    grating = AngleConfocalCurvedGratingBoxApodized(h_period, v_period, box_length, box_width, socket.angle_deg(), fill_factor, apo_func, chirp_func, extra_width, process )    
+    return FiberCouplerGrating(socket=socket, socket_position=socket_position, grating=grating, **kwargs)
 ##############################################################
 
 # FIXME - not working, to be looked at by Wim or Pieter 
--- ipkiss24\picazzo\fibcoup\grating\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\grating\layout.py	(refactored)
@@ -49,8 +49,7 @@
     cells_positions = RestrictedProperty(restriction = RestrictType(dict), required = True) # should be elaborated?RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\grating\layout.py to ipkissat3\picazzo\fibcoup\grating\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\inverted_taper\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\inverted_taper\__init__.py to ipkissat3\picazzo\fibcoup\inverted_taper\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\inverted_taper\layout.py

 
     def define_elements(self, elems):
-        k = self.cells_positions.keys() 
-        k.sort() #to ensure a deterministic build-up of the elements. -- FIXME : this should not be required, but the best solution right now to get the unit testing framework in order
+        k = sorted(list(self.cells_positions.keys())) 
         for cell in k:
             positions = self.cells_positions[cell]
             for p in positions:
@@ -81,9 +80,9 @@
 
     def define_name(self):
         L = []
-        L.extend([str(int(self.origin[0]*1000)) , str(int(self.origin[0]*1000))])
-        L.extend([str(int(self.period[0]*1000)) , str(int(self.period[0]*1000))])
-        L.extend([str(self.n_o_periods[0]) , str(self.n_o_periods[0])])
+        L.extend([str(int(self.origin[0]*1000)), str(int(self.origin[0]*1000))])
+        L.extend([str(int(self.period[0]*1000)), str(int(self.period[0]*1000))])
+        L.extend([str(self.n_o_periods[0]), str(self.n_o_periods[0])])
         return "%s_%s_%d" % (self.__name_prefix__,
                              self.unit_cell.name,
                              do_hash("_".join(L))
@@ -95,7 +94,7 @@
     
 def GratingUniformLine(line_width, line_length, period, n_o_periods, purpose = TECH.PURPOSE.DF.TRENCH, process = TECH.PROCESS.FC):
     """ 1-D grating (X-direction) with uniform lines"""
-    unit_cell = Structure("line"+ str(int(line_width * 1000)) + "_" + str(int(line_length * 1000)) + "_" + str(PPLayer(process,purpose)).replace(" ","_").replace("-","_"), 
+    unit_cell = Structure("line"+ str(int(line_width * 1000)) + "_" + str(int(line_length * 1000)) + "_" + str(PPLayer(process, purpose)).replace(" ", "_").replace("-", "_"), 
                              Rectangle(PPLayer(process, purpose), (-0.5*line_width, 0.0), (line_width, line_length)))
     origin = (- 0.5 * (n_o_periods-1)*period, 0.0)
     return GratingUniform(unit_cell = unit_cell, 
--- ipkiss24\picazzo\fibcoup\inverted_taper\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\inverted_taper\layout.py	(refactored)
@@ -40,8 +40,8 @@
 class InvertedTaper(FiberCoupler):
     
     process = ProcessProperty(default = TECH.PROCESS.WG)
-    wg_def_start = WaveguideDefProperty(default = WgElDefinition(wg_width = TECH.WG.WIRE_WIDTH,trench_width = TECH.WG.TRENCH_WIDTH))
-    wg_def_end = WaveguideDefProperty(default = WgElDefinition(wg_width = 0.080 ,trench_width = 11.46))
+    wg_def_start = WaveguideDefProperty(default = WgElDefinition(wg_width = TECH.WG.WIRE_WIDTH, trench_width = TECH.WG.TRENCH_WIDTH))
+    wg_def_end = WaveguideDefProperty(default = WgElDefinition(wg_width = 0.080, trench_width = 11.46))
     tip_length = PositiveNumberProperty(default = 250.0)
     tip_offset = NonNegativeNumberProperty(default = 300.0)
     nitride_clearance = NonNegativeNumberProperty(default = 50.0)
@@ -66,7 +66,7 @@
                             end_wg_def = wg_def_stop)
         if self.extension > 0:
             wg_def = WgElDefinition(wg_width = self.wg_def_end.wg_width, trench_width = 0.5*(self.y_spacing-self.wg_def_end.wg_width)-1.0, process = self.process)
-            elems += wg_def([(self.tip_offset - self.extension , 0.0), (self.tip_offset, 0.0)])
+            elems += wg_def([(self.tip_offset - self.extension, 0.0), (self.tip_offset, 0.0)])
         
         #assist lines for tip
         for i in range(self.assist_lines):
@@ -99,14 +99,14 @@
         return self.nitride_only_length
         
     def define_elements(self, elems):
-        elems += super(NitrideInvertedTaper,self).define_elements(elems)
+        elems += super(NitrideInvertedTaper, self).define_elements(elems)
         # WG
-        elems += Line(PPLayer(self.process,TECH.PURPOSE.LF_AREA), 
-                        (0.0, 0.0), (self.nitride_only_length - self.extension , 0.0), 
+        elems += Line(PPLayer(self.process, TECH.PURPOSE.LF_AREA), 
+                        (0.0, 0.0), (self.nitride_only_length - self.extension, 0.0), 
                         self.y_spacing)
         # NT
         elems += Line(PPLayer(self.nt_process, TECH.PURPOSE.LF.LINE), 
-                        (0.0, 0.0), (self.nitride_only_length + self.tip_length + 100.0 , 0.0), 
+                        (0.0, 0.0), (self.nitride_only_length + self.tip_length + 100.0, 0.0), 
                         self.nitride_width )
         return elems
     
@@ -118,8 +118,8 @@
 class InvertedTaperShallow(InvertedTaper):
     process = DefinitionProperty(fdef_name = "define_process")
     
-    wg_def_sh_start = WaveguideDefProperty(default = WgElDefinition(wg_width = 1.0 ,trench_width = TECH.WG.TRENCH_WIDTH))
-    wg_def_sh_end = WaveguideDefProperty(default = WgElDefinition(wg_width = 0.080 ,trench_width = TECH.WG.TRENCH_WIDTH))
+    wg_def_sh_start = WaveguideDefProperty(default = WgElDefinition(wg_width = 1.0, trench_width = TECH.WG.TRENCH_WIDTH))
+    wg_def_sh_end = WaveguideDefProperty(default = WgElDefinition(wg_width = 0.080, trench_width = TECH.WG.TRENCH_WIDTH))
 
     deep_process = ProcessProperty(default = TECH.PROCESS.WG)
     shallow_process = ProcessProperty(default = TECH.PROCESS.FC)
@@ -133,7 +133,7 @@
         
     def define_elements(self, elems):
         # WG
-        wg_def_stop = WgElDefinition(wg_width = self.wg_def_end.wg_width,trench_width =  self.wg_def_start.trench_width)
+        wg_def_stop = WgElDefinition(wg_width = self.wg_def_end.wg_width, trench_width =  self.wg_def_start.trench_width)
 
         shallow_tip_width = self.wg_def_sh_end.wg_width
         shallow_tip_start_width = self.wg_def_sh_start.wg_width
@@ -154,25 +154,25 @@
                             process = self.shallow_process)
         if self.extension > 0:
             wg_def = WgElDefinition(wg_width = self.shallow_tip_width, trench_width = 0.5*(self.y_spacing-shallow_tip_width)-1.0, process = self.shallow_process)
-            elems += wg_def([(s_o_length - self.extension , 0.0), (s_o_length, 0.0)])
+            elems += wg_def([(s_o_length - self.extension, 0.0), (s_o_length, 0.0)])
         #assist lines for tip
         for i in range(self.assist_lines):
             elems += Path(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), 
                             [(self.shallow_tip_length + s_o_length, (0.5*shallow_tip_start_width +0.5 + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width)), 
                              (s_o_length, + (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width)),
-                             (s_o_length- self.extension , + (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width))
+                             (s_o_length- self.extension, + (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width))
                             ], self.assist_width)
             elems += Path(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), 
                             [(self.shallow_tip_length + s_o_length, - (0.5*shallow_tip_start_width+0.5+ (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width)), 
                              (s_o_length,  - (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width)),
-                             (s_o_length- self.extension ,  - (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width))
+                             (s_o_length- self.extension,  - (0.5*shallow_tip_width + (i+1)*(self.assist_width+ self.assist_spacing) - 0.5*self.assist_width))
                             ], self.assist_width)
         return elems
             
 
     def define_ports(self, ports):
         wg_def = WgElDefinition(wg_width = self.shallow_tip_start_width, trench_width = self.wg_def_start.trench_width, process = self.deep_process)
-        ports +=  [OpticalPort(position = (self.tip_length + self.tip_offset+ self.shallow_tip_length , 0.0), angle = 0.0, wg_definition = wg_def)]
+        ports +=  [OpticalPort(position = (self.tip_length + self.tip_offset+ self.shallow_tip_length, 0.0), angle = 0.0, wg_definition = wg_def)]RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\inverted_taper\layout.py to ipkissat3\picazzo\fibcoup\inverted_taper\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\line_grating\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\line_grating\__init__.py to ipkissat3\picazzo\fibcoup\line_grating\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\line_grating\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\line_grating\layout.py to ipkissat3\picazzo\fibcoup\line_grating\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\segmented\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\segmented\__init__.py to ipkissat3\picazzo\fibcoup\segmented\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\segmented\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\segmented\layout.py to ipkissat3\picazzo\fibcoup\segmented\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\socket\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\socket\__init__.py to ipkissat3\picazzo\fibcoup\socket\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\socket\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\socket\layout.py to ipkissat3\picazzo\fibcoup\socket\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\socket_2d\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\socket_2d\__init__.py to ipkissat3\picazzo\fibcoup\socket_2d\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\socket_2d\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\socket_2d\layout.py to ipkissat3\picazzo\fibcoup\socket_2d\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\uniform\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\uniform\__init__.py to ipkissat3\picazzo\fibcoup\uniform\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\uniform\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\uniform\layout.py to ipkissat3\picazzo\fibcoup\uniform\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\fibcoup\uniform_2d\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\uniform_2d\__init__.py to ipkissat3\picazzo\fibcoup\uniform_2d\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\fibcoup\uniform_2d\layout.py

         return ports
     
 
@@ -185,18 +185,18 @@
 
     def define_elements(self, elems):
         # WG
-        elems += Line(PPLayer(self.deep_process,TECH.PURPOSE.LF_AREA), 
-                        (0.0, 0.0), (self.nitride_only_length - self.extension , 0.0), 
+        elems += Line(PPLayer(self.deep_process, TECH.PURPOSE.LF_AREA), 
+                        (0.0, 0.0), (self.nitride_only_length - self.extension, 0.0), 
                         self.y_spacing)
         # FC
         s_o_length = self.tip_offset + self.tip_length
         elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), 
-                        (0.0, 0.0), (s_o_length- self.extension , 0.0), 
+                        (0.0, 0.0), (s_o_length- self.extension, 0.0), 
                         self.y_spacing)
 
         # NT
         elems += Line(PPLayer(self.nt_process, TECH.PURPOSE.LF.LINE), 
-                        (0.0, 0.0), (self.nitride_only_length + self.tip_length + self.shallow_tip_length + 50.0 , 0.0), 
+                        (0.0, 0.0), (self.nitride_only_length + self.tip_length + self.shallow_tip_length + 50.0, 0.0), 
                         self.nitride_width )
         return elems
 
--- ipkiss24\picazzo\fibcoup\line_grating\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\line_grating\layout.py	(refactored)
@@ -31,7 +31,7 @@
     line_length = PositiveNumberProperty(required = True)
     purpose = PurposeProperty(default = TECH.PURPOSE.DF.TRENCH)
 
-class GratingLine(__GratingLine__,Structure):
+class GratingLine(__GratingLine__, Structure):
     """ grating with lines, with given widths and positions, and given length.
         line_widths_positions should be a list of tuples:
         [ (w1, x1), (w2, x2), (w3, x3), ...] with w the line width and x the x position
@@ -40,11 +40,11 @@
     process = ProcessProperty(default = TECH.PROCESS.FC)
 
     def define_elements(self, elems):
-        for (w,x) in self.line_widths_positions:
+        for (w, x) in self.line_widths_positions:
             elems += Line(PPLayer(self.process, self.purpose), (x, 0.0), (x + w, 0.0), self.line_length)
         return elems
 
-class FiberCouplerGratingLine(FiberCouplerGratingAuto,GratingLine):
+class FiberCouplerGratingLine(FiberCouplerGratingAuto, GratingLine):
     """ grating line on a socket """
     __name_prefix__ = "fc_gratingl_"
         
--- ipkiss24\picazzo\fibcoup\segmented\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\segmented\layout.py	(refactored)
@@ -81,5 +81,5 @@
     c_x = 0.5 * n_o_periods * period
     segmentations = []
     for i in range(n_o_periods):
-        segmentations.append(equal_segmentation((0.0 - c_x + i * period, 0.0),grating_width, n_o_segments, fill_factors[i], line_width))
+        segmentations.append(equal_segmentation((0.0 - c_x + i * period, 0.0), grating_width, n_o_segments, fill_factors[i], line_width))
     return segmented_trench_grating(name, segmentations)
--- ipkiss24\picazzo\fibcoup\socket\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\socket\layout.py	(refactored)
@@ -56,12 +56,12 @@
     wg_length = PositiveNumberProperty(default = 50.0)
 
     def define_name(self):
-        return "%s_%d_%d_%d_%s"%(self.__name_prefix__,self.wg_definition.wg_width*1000,
+        return "%s_%d_%d_%d_%s"%(self.__name_prefix__, self.wg_definition.wg_width*1000,
                                  self.wg_definition.trench_width*1000, self.wg_length*1000,
                                  self.wg_definition.process.extension)
     
     def define_elements(self, elems):
-        elems += self.wg_definition(shape = [(0.0,0.0), (self.wg_length, 0.0)])
+        elems += self.wg_definition(shape = [(0.0, 0.0), (self.wg_length, 0.0)])
         return elems
     
     def define_ports(self, ports):
@@ -101,7 +101,7 @@
         end_wg_def = WgElDefinition(wg_width = extended_start_width, trench_width = self.end_wg_definition.trench_width, process = self.end_wg_definition.process)
         end_wg_def_ext = WgElDefinition(wg_width = extended_start_width+0.05, trench_width = self.end_wg_definition.trench_width-0.05, process = self.end_wg_definition.process)
 
-        elems += WgElTaperLinear(start_position = (self.center[0] - self.extension ,self.center[1]),
+        elems += WgElTaperLinear(start_position = (self.center[0] - self.extension, self.center[1]),
                                  end_position = (self.center[0] + self.length, self.center[1]), 
                                  start_wg_def = end_wg_def,
                                  end_wg_def = self.start_wg_definition,
@@ -114,7 +114,7 @@
                                      straight_extension = (0.0, 0.0))
    
         if self.straight_entrance > 0.0:
-            elems += self.start_wg_definition(shape = [(self.center[0] + self.length ,self.center[1]), (self.center[0] + self.length + self.straight_entrance, self.center[1])])
+            elems += self.start_wg_definition(shape = [(self.center[0] + self.length, self.center[1]), (self.center[0] + self.length + self.straight_entrance, self.center[1])])
 
         return elems
     
--- ipkiss24\picazzo\fibcoup\socket_2d\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\socket_2d\layout.py	(refactored)
@@ -162,7 +162,7 @@
 
 def BroadWgSocket2d(wg_definition, wg_length, dev_angle, **kwargs):
     """ broad waveguide socket for 2-D fiber coupler with west-east symmetry for outcoupling """
-    return BroadWgSocket2dAsymmetric(wg_definitions = (wg_definition,wg_definition), wg_lengths = (wg_length,wg_length), dev_angles = (dev_angle, dev_angle), **kwargs)
+    return BroadWgSocket2dAsymmetric(wg_definitions = (wg_definition, wg_definition), wg_lengths = (wg_length, wg_length), dev_angles = (dev_angle, dev_angle), **kwargs)
 
 
 class BroadWgSocket3Port(WgSocket2d):
--- ipkiss24\picazzo\fibcoup\uniform_2d\layout.py	(original)
+++ ipkiss24\picazzo\fibcoup\uniform_2d\layout.py	(refactored)
@@ -80,15 +80,15 @@
     hole_diameter = PositiveNumberProperty(required = True)
     
     def define_unit_cell(self):
-        s = ShapeRectangle((0.0,0.0),(self.hole_diameter,self.hole_diameter))
-        return Structure(self.name + "_hp", Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE),s))
+        s = ShapeRectangle((0.0, 0.0), (self.hole_diameter, self.hole_diameter))
+        return Structure(self.name + "_hp", Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE), s))
         
     def define_elements(self, elems):
         # FCW
         sqrt2_2 = 0.5*sqrt(2)
         side=self.period*self.n_o_periods
-        my_shape = Shape([(0.0, side*sqrt2_2),(side*sqrt2_2, 0.0),(0.0, -side*sqrt2_2),(-side*sqrt2_2,0.0)])
-        elems += Boundary(PPLayer(self.process, TECH.PURPOSE.DF.TRENCH),coordinates = my_shape) 
+        my_shape = Shape([(0.0, side*sqrt2_2), (side*sqrt2_2, 0.0), (0.0, -side*sqrt2_2), (-side*sqrt2_2, 0.0)])
+        elems += Boundary(PPLayer(self.process, TECH.PURPOSE.DF.TRENCH), coordinates = my_shape) 
         return elems
 
 class UniformRect2dGrating(__AutoUnitCell__, BiaxialUniform2dGrating):
@@ -96,11 +96,11 @@
     hole_diameters = Size2Property(required = True)
 
     def define_unit_cell(self):
-        s = ShapeRectangle(center = (0.0,0.0), box_size = (self.hole_diameters[0],self.hole_diameters[1]))       
+        s = ShapeRectangle(center = (0.0, 0.0), box_size = (self.hole_diameters[0], self.hole_diameters[1]))       
         s.transform(Rotation(rotation=45.0))
-        return Structure(self.name+"_hpr",Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE),s))
-
-class UniformLongOctagon2dGrating(__AutoUnitCell__,BiaxialUniform2dGrating):
+        return Structure(self.name+"_hpr", Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE), s))
+
+class UniformLongOctagon2dGrating(__AutoUnitCell__, BiaxialUniform2dGrating):
     """uniformt 2D grating with irregular octagonal unit cell """
     hole_diameters = Size2Property(required = True)
 
@@ -109,16 +109,16 @@
         s = Shape()
         d0 = 0.5*self.hole_diameters[0]
         d1 = 0.5*self.hole_diameters[1]RefactoringTool: Writing converted ipkiss24\picazzo\fibcoup\uniform_2d\layout.py to ipkissat3\picazzo\fibcoup\uniform_2d\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\__init__.py to ipkissat3\picazzo\filters\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\mmi\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\mmi\__init__.py to ipkissat3\picazzo\filters\mmi\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\mmi\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\mmi\layout.py to ipkissat3\picazzo\filters\mmi\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\mmi_shallow\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\mmi_shallow\__init__.py to ipkissat3\picazzo\filters\mmi_shallow\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\mmi_shallow\layout.py

-        s += (-d0+stub,d1)
-        s += (d0-stub,d1)
-        s += (d0,d1-stub)
-        s += (d0,-d1+stub)
-        s += (d0-stub,-d1)
-        s += (-d0+stub,-d1)
-        s += (-d0,-d1+stub)
-        s += (-d0,d1-stub)      
+        s += (-d0+stub, d1)
+        s += (d0-stub, d1)
+        s += (d0, d1-stub)
+        s += (d0, -d1+stub)
+        s += (d0-stub, -d1)
+        s += (-d0+stub, -d1)
+        s += (-d0, -d1+stub)
+        s += (-d0, d1-stub)      
         s.transform(Rotation(rotation=-45.0))
-        return Structure(self.name+"_hpr",Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE),s))
+        return Structure(self.name+"_hpr", Boundary(PPLayer(self.process, TECH.PURPOSE.DF.SQUARE), s))
     
 
 class UniformDodec2dGrating(__AutoUnitCell__, Uniform2dGrating):
@@ -190,34 +190,34 @@
 
     def __get_grating__(self):
         sqrt2_2 = 0.5*sqrt(2)
-        pitch = snap_value(self.period*sqrt2_2 * 2,self.unit/self.grid)
-        positions = [Coord2(-0.5 * (self.n_o_periods-1 ) * pitch + t * pitch , 0.0) for t in range((self.truncate_periods_3port+1)/2, self.n_o_periods)]
-        for i in range(1,self.n_o_periods):
+        pitch = snap_value(self.period*sqrt2_2 * 2, self.unit/self.grid)
+        positions = [Coord2(-0.5 * (self.n_o_periods-1 ) * pitch + t * pitch, 0.0) for t in range((self.truncate_periods_3port+1)/2, self.n_o_periods)]
+        for i in range(1, self.n_o_periods):
             N = self.n_o_periods - i + max(0, i/2 - self.truncate_periods_3port)
             positions += [Coord2(-0.5 * (self.n_o_periods-1-i%2) * pitch + t * pitch, 0.5 * i * pitch) for t in range((self.truncate_periods_3port+1-i%2)/2, self.n_o_periods - (i+1)/2)]
             positions += [Coord2(-0.5 * (self.n_o_periods-1-i%2) * pitch + t * pitch, -0.5 * i * pitch) for t in range((self.truncate_periods_3port+1-i%2)/2, self.n_o_periods - (i+1)/2)]
-        return (GratingUnitCell(unit_cell = self.unit_cell,positions = positions), None)
-        
-class SymmetricUniformRect2dGrating(__SymmetricSocket2dGrating__,UniformDodec2dGrating):
+        return (GratingUnitCell(unit_cell = self.unit_cell, positions = positions), None)
+        
+class SymmetricUniformRect2dGrating(__SymmetricSocket2dGrating__, UniformDodec2dGrating):
     """ uniform 2D grating with rectangular unit cell and 2 symmetry planes """
 
-class SymmetricUniformBiaxialRect2dGrating(__SymmetricSocket2dGrating__,UniformRect2dGrating):
+class SymmetricUniformBiaxialRect2dGrating(__SymmetricSocket2dGrating__, UniformRect2dGrating):
     """ biaxial uniform 2D grating with rectangula unit cell and 2 symmetry planes """
 
     def __get_grating__(self):
         return UniformRect2dGrating.__get_grating__(self)
 
-class SymmetricUniformBiaxialLongOctagon2dGrating(__SymmetricSocket2dGrating__,UniformLongOctagon2dGrating):
+class SymmetricUniformBiaxialLongOctagon2dGrating(__SymmetricSocket2dGrating__, UniformLongOctagon2dGrating):
     """ biaxial uniform 2D grating with rectangula unit cell and 2 symmetry planes """
 
     def __get_grating__(self):
         return UniformLongOctagon2dGrating.__get_grating__(self)
     
-class AsymmetricUniformRect2dGrating(AsymmetricUniform2dGrating,UniformDodec2dGrating):
+class AsymmetricUniformRect2dGrating(AsymmetricUniform2dGrating, UniformDodec2dGrating):
     """ uniform 2D grating with rectangular unit cell and 1 symmetry plane """
 
 
-class ThreeportUniformRect2dGrating(ThreeportUniform2dGrating,UniformDodec2dGrating):
+class ThreeportUniformRect2dGrating(ThreeportUniform2dGrating, UniformDodec2dGrating):
     """ uniform 2D grating with rectangular unit cell and 3 ports """
 
      
--- ipkiss24\picazzo\filters\mmi\layout.py	(original)
+++ ipkiss24\picazzo\filters\mmi\layout.py	(refactored)
@@ -113,14 +113,14 @@
     input_y_positions = RestrictedProperty(restriction = RestrictList(RESTRICT_NUMBER), default = [])
     output_y_positions = RestrictedProperty(restriction = RestrictList(RESTRICT_NUMBER), default = [])
     taper_width = NonNegativeNumberProperty(required=True)
-    straight_extension = Size2Property(default = (0.0,TECH.TECH.MINIMUM_LINE))
+    straight_extension = Size2Property(default = (0.0, TECH.TECH.MINIMUM_LINE))
     
 class MmiTaperPorts(TaperDeepPorts):
     """ a deep-etch generic MMI with tapers  """
     pass
 
 
-class MmiTapered(__MmiTaperPorts__,MmiTaperPorts):    
+class MmiTapered(__MmiTaperPorts__, MmiTaperPorts):    
     
     def define_structure(self):        
         twg = WgElDefinition(wg_width = self.taper_width, process = self.end_wg_def.process, 
@@ -135,37 +135,37 @@
 class __MmiSymmetric__(object):
     wg_offset = NonNegativeNumberProperty(required=True)
     
-class Mmi1x2(__MmiSymmetric__,Mmi):
+class Mmi1x2(__MmiSymmetric__, Mmi):
     def define_input_y_positions(self):
         return [0.0]
     def define_output_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
 
-class Mmi2x1(__MmiSymmetric__,Mmi):
+class Mmi2x1(__MmiSymmetric__, Mmi):
     def define_input_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
         return [0.0]
 
-class Mmi2x2(__MmiSymmetric__,Mmi):
+class Mmi2x2(__MmiSymmetric__, Mmi):
     def define_input_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
 
-class Mmi1x2Tapered(__MmiSymmetric__,MmiTapered):    
+class Mmi1x2Tapered(__MmiSymmetric__, MmiTapered):    
     def define_input_y_positions(self):
         return [0.0]
     def define_output_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     
-class Mmi2x1Tapered(__MmiSymmetric__,MmiTapered):    
+class Mmi2x1Tapered(__MmiSymmetric__, MmiTapered):    
     def define_input_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
         return [0.0]
     
-class Mmi2x2Tapered(__MmiSymmetric__,MmiTapered):
+class Mmi2x2Tapered(__MmiSymmetric__, MmiTapered):
     def define_input_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
--- ipkiss24\picazzo\filters\mmi_shallow\layout.py	(original)
+++ ipkiss24\picazzo\filters\mmi_shallow\layout.py	(refactored)
@@ -86,11 +86,11 @@
             if y_excess > 0:
                 average = 0.5*(y1 + y2)
                 L = y_excess * TL  / (self.deep_only_width - self.end_wg_def.wg_width) + E
-                elems += Line(PPLayer(self.deep_process,TECH.PURPOSE.LF.LINE), (x_i, average), (x_i-L, average), TECH.TECH.MINIMUM_SPACE + 0.14)
+                elems += Line(PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), (x_i, average), (x_i-L, average), TECH.TECH.MINIMUM_SPACE + 0.14)
 
         x_o = self.structure.length + TL - E
         o_y = [p.position.y  for p in self.structure.out_ports.y_sorted()]
-        for (y1,y2) in zip(o_y[:-1], o_y[1:]):
+        for (y1, y2) in zip(o_y[:-1], o_y[1:]):
             y_excess = self.deep_only_width + TECH.TECH.MINIMUM_SPACE - (y2 - y1) 
             if y_excess > 0:
                 average = 0.5*(y1 + y2)
@@ -103,7 +103,7 @@
 
 from ..mmi import __MmiTaperPorts__
 
-class ShallowMmiTapered(__MmiTaperPorts__,ShallowMmiTaperPorts):
+class ShallowMmiTapered(__MmiTaperPorts__, ShallowMmiTaperPorts):
     shallow_wg_definition = WaveguideDefProperty(default = TECH.WGDEF.FC_WIRE)
     
     def define_structure(self):        
@@ -118,20 +118,20 @@
 
 from ..mmi import __MmiSymmetric__    
 
-class ShallowMmi1x2Tapered(__MmiSymmetric__,ShallowMmiTapered):    
+class ShallowMmi1x2Tapered(__MmiSymmetric__, ShallowMmiTapered):    
     def define_input_y_positions(self):
         return [0.0]
     def define_output_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     
-class ShallowMmi2x1Tapered(__MmiSymmetric__,ShallowMmiTapered):
+class ShallowMmi2x1Tapered(__MmiSymmetric__, ShallowMmiTapered):
     def define_input_y_positions(self):RefactoringTool: Writing converted ipkiss24\picazzo\filters\mmi_shallow\layout.py to ipkissat3\picazzo\filters\mmi_shallow\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\multi_ring\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\multi_ring\__init__.py to ipkissat3\picazzo\filters\multi_ring\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\multi_ring\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\multi_ring\layout.py to ipkissat3\picazzo\filters\multi_ring\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\multi_ring\multi_ring_base.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\multi_ring\multi_ring_base.py to ipkissat3\picazzo\filters\multi_ring\multi_ring_base.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\mzi\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\mzi\__init__.py to ipkissat3\picazzo\filters\mzi\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\mzi\layout.py

         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
         return [0.0]
     
     
-class ShallowMmi2x2Tapered(__MmiSymmetric__,ShallowMmiTapered):
+class ShallowMmi2x2Tapered(__MmiSymmetric__, ShallowMmiTapered):
     def define_input_y_positions(self):
         return [-self.wg_offset, self.wg_offset]
     def define_output_y_positions(self):
--- ipkiss24\picazzo\filters\multi_ring\layout.py	(original)
+++ ipkiss24\picazzo\filters\multi_ring\layout.py	(refactored)
@@ -60,7 +60,7 @@
 
 def MultiRingRect180DropFilter(coupler_spacings, 
                                ring_wg_definition = TECH.WGDEF.WIRE,
-                               coupler_wg_definitions = [TECH.WGDEF.WIRE,TECH.WGDEF.WIRE],
+                               coupler_wg_definitions = [TECH.WGDEF.WIRE, TECH.WGDEF.WIRE],
                                bend_radius= TECH.WG.BEND_RADIUS, 
                                straights = (TECH.WG.SHORT_STRAIGHT, TECH.WG.SHORT_STRAIGHT), 
                                **kwargs):
--- ipkiss24\picazzo\filters\multi_ring\multi_ring_base.py	(original)
+++ ipkiss24\picazzo\filters\multi_ring\multi_ring_base.py	(refactored)
@@ -130,7 +130,7 @@
                               #ring_transformations = ring_transformations
                               #)
 class MultiRingIdenticalWithSpacings(MultiRingIdentical):
-    spacings = ListDefinitionProperty(allowed_types = [int,float], restriction = RESTRICT_POSITIVE)
+    spacings = ListDefinitionProperty(allowed_types = [int, float], restriction = RESTRICT_POSITIVE)
     ring_transformations = DefinitionProperty(fdef_name="define_ring_transformations")
     def define_ring_transformations(self):
         ring_transformations = [IdentityTransform()]
--- ipkiss24\picazzo\filters\mzi\layout.py	(original)
+++ ipkiss24\picazzo\filters\mzi\layout.py	(refactored)
@@ -80,7 +80,7 @@
         return WgY90Splitter(bend_radius = self.bend_radius, wg_definition = self.wg_definition)
     
     def define_combiner(self):
-        return WgY90Combiner(bend_radius = self.bend_radius,wg_definition = self.wg_definition)
+        return WgY90Combiner(bend_radius = self.bend_radius, wg_definition = self.wg_definition)
     
     def define_splitter_transform(self):
         return IdentityTransform()
@@ -89,7 +89,7 @@
         return Translation(translation = (4 * self.bend_radius, 0.0))
 
     def define_elements(self, elems):
-        elems = WgMzi.define_elements(self,elems)
+        elems = WgMzi.define_elements(self, elems)
         R = RouteManhattan(input_port = self.splitter_ref.north_ports[0],
                            output_port = self.combiner_ref.north_ports[0],
                            bend_radius = self.bend_radius,
@@ -97,7 +97,7 @@
                            min_straight = 0.0,
                            start_straight = self.straight1,
                            end_straight = self.straight1)
-        elems += RouteConnector(route = R,manhattan = self.manhattan)        
+        elems += RouteConnector(route = R, manhattan = self.manhattan)        
         R = RouteManhattan(input_port = self.splitter_ref.south_ports[0], 
                            output_port = self.combiner_ref.south_ports[0],
                            bend_radius = self.bend_radius,
@@ -105,7 +105,7 @@
                            min_straight = 0.0,
                            start_straight = self.straight2,
                            end_straight = self.straight2)
-        elems += RouteConnector(route = R,manhattan = self.manhattan)
+        elems += RouteConnector(route = R, manhattan = self.manhattan)
         return elems
         
 
@@ -129,14 +129,14 @@
     def define_connectors(self):
         bs1, bs2 = self.get_bend90_size()
         s = Shape()
-        s += (-self.extension,0.0)
-        s += (0.0,0.0)
-        s += (bs1,0.0)
-        s += (bs1,bs1+bs2+self.straight)
-        s += (2*bs1+bs2,bs1+bs2+self.straight)
-        s += (2*bs1+bs2,0.0)
-        s += (2*bs1+2*bs2,0.0)
-        s += (2*bs1+2*bs2+self.extension,0.0)
+        s += (-self.extension, 0.0)
+        s += (0.0, 0.0)
+        s += (bs1, 0.0)
+        s += (bs1, bs1+bs2+self.straight)
+        s += (2*bs1+bs2, bs1+bs2+self.straight)
+        s += (2*bs1+bs2, 0.0)
+        s += (2*bs1+2*bs2, 0.0)
+        s += (2*bs1+2*bs2+self.extension, 0.0)
 
         wgdef = WaveguidePointRoundedConnectElementDefinition(wg_definition = self.wg_definition,
                                                               bend_radius = self.bend_radius,
@@ -145,7 +145,7 @@
         return [wgdef(shape = s)]
         
     def define_ports(self, ports):
-        ports += self.connectors[0].in_ports.move_copy((0.0,0.0)) + self.connectors[-1].out_ports.move_copy((0.0,0.0))
+        ports += self.connectors[0].in_ports.move_copy((0.0, 0.0)) + self.connectors[-1].out_ports.move_copy((0.0, 0.0))
         return ports
 
 class __MziDelaySpiral__(__RoundedWaveguide__, Structure):
@@ -173,11 +173,11 @@
         
     def define_elements(self, elems):
         for c in self.connectors:
-            elems += SRef(c,(0.0,0.0))
+            elems += SRef(c, (0.0, 0.0))
         return elems
         
     def define_ports(self, ports):
-        ports = self.connectors[0].in_ports.move_copy((0.0,0.0)) + self.connectors[-1].out_ports.move_copy((0.0,0.0))
+        ports = self.connectors[0].in_ports.move_copy((0.0, 0.0)) + self.connectors[-1].out_ports.move_copy((0.0, 0.0))
         return ports
         
 
@@ -323,7 +323,7 @@
         ports += self.in_coupler_ref.in_ports + self.out_coupler_ref.out_ports
         return ports
 
-class __WgMzi__(__RoundedWaveguideManhattan__, __MziBase__,Structure):
+class __WgMzi__(__RoundedWaveguideManhattan__, __MziBase__, Structure):
     """ Generic MZI that connects its couplers and arm elements with simple waveguides"""
     __name_prefix__ = "MZIWG"
 
@@ -357,8 +357,8 @@
         if A is None:
             A = Structure(name = "%s_BLANK"%(self.name),
                            elements = [],
-                           ports = [OpticalPort(position = (0.0,0.0),wg_definition = self.wg_definition, angle_deg = 180.0),
-                                    OpticalPort(position = (0.0,0.0),wg_definition = self.wg_definition, angle_deg = 0.0)])
+                           ports = [OpticalPort(position = (0.0, 0.0), wg_definition = self.wg_definition, angle_deg = 180.0),
+                                    OpticalPort(position = (0.0, 0.0), wg_definition = self.wg_definition, angle_deg = 0.0)])
             
         # if widths not identical,add tapers
         if A.west_ports[0].wg_definition.wg_width == self.CPin[1].wg_definition.wg_width and A.east_ports[0].wg_definition.wg_width == self.CPout[1].wg_definition.wg_width:
@@ -375,7 +375,7 @@
             else:
                 T2 = WgElPortTaperExtended(start_port = A.east_ports[0], end_wg_def = self.CPout[1].wg_definition, length = self.automatic_taper_east_length)
                 
-            AC = Structure(elements = [ SRef(A, (0.0, 0.0)), T1,T2], 
+            AC = Structure(elements = [ SRef(A, (0.0, 0.0)), T1, T2], 
                            ports = [T1.west_ports[0], 
                                     T2.east_ports[0]]                          
                        )
@@ -415,21 +415,21 @@
         L1 = self.A1C.east_ports[0].x - self.A1C.west_ports[0].x 
         L2 = self.A2C.east_ports[0].x - self.A2C.west_ports[0].x 
         #L = max(L1 + S1in.width + S1out.width , L2 + S2in.width + S2out.width) + 0.5
-        L = max(L1 + R1w + R3w , L2 + R2w + R4w) + 0.5
+        L = max(L1 + R1w + R3w, L2 + R2w + R4w) + 0.5
 
         OPin_max = max(self.R1.out_ports[0].x, self.R2.out_ports[0].x)
         OPout_max = min(R3.out_ports[0].x, R4.out_ports[0].x)
-        arm1_pos = Coord2(OPin_max , y_1) - self.A1C.west_ports[0].position
-        arm2_pos = Coord2(OPin_max  , y_2) - self.A2C.west_ports[0].position
+        arm1_pos = Coord2(OPin_max, y_1) - self.A1C.west_ports[0].positionRefactoringTool: Writing converted ipkiss24\picazzo\filters\mzi\layout.py to ipkissat3\picazzo\filters\mzi\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\parallel_ring\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\parallel_ring\__init__.py to ipkissat3\picazzo\filters\parallel_ring\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\parallel_ring\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\parallel_ring\layout.py to ipkissat3\picazzo\filters\parallel_ring\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\ring\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring\__init__.py to ipkissat3\picazzo\filters\ring\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\ring\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring\layout.py to ipkissat3\picazzo\filters\ring\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\ring_ccw\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring_ccw\__init__.py to ipkissat3\picazzo\filters\ring_ccw\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\ring_ccw\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring_ccw\layout.py to ipkissat3\picazzo\filters\ring_ccw\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\ring_xing\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring_xing\__init__.py to ipkissat3\picazzo\filters\ring_xing\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\ring_xing\layout.py

+        arm2_pos = Coord2(OPin_max, y_2) - self.A2C.west_ports[0].position
 
         out_coupler_pos = Coord2(max(L1, L2) + OPin_max - OPout_max, 0.0)
         R3.move(out_coupler_pos)
         R4.move(out_coupler_pos)
         
-        return (in_coupler_pos,self.R1,self.R2,R3,R4,arm1_pos,arm2_pos,out_coupler_pos)
+        return (in_coupler_pos, self.R1, self.R2, R3, R4, arm1_pos, arm2_pos, out_coupler_pos)
         
     def define_in_coupler_pos(self):
-        return Coord2(0.0,0.0)
+        return Coord2(0.0, 0.0)
     
     def define_R1(self):
         if self.separation is None:
@@ -554,19 +554,19 @@
         elems += SRef(self.A1C, self.arm1_pos)
         elems += SRef(self.A2C, self.arm2_pos)
         
-        R1,R2,R3,R4 = self.R1, self.R2, self.R3, self.R4
+        R1, R2, R3, R4 = self.R1, self.R2, self.R3, self.R4
         
         R1 += self.A1C.west_ports[0].position.move_copy(self.arm1_pos)
-        elems +=RouteConnector(R1,manhattan = self.manhattan)
+        elems +=RouteConnector(R1, manhattan = self.manhattan)
         
         R2 += self.A2C.west_ports[0].position.move_copy(self.arm2_pos)
-        elems +=RouteConnector(R2,manhattan = self.manhattan)
+        elems +=RouteConnector(R2, manhattan = self.manhattan)
         
         R3 += self.A1C.east_ports[0].position.move_copy(self.arm1_pos)
-        elems +=RouteConnector(R3,manhattan = self.manhattan)
+        elems +=RouteConnector(R3, manhattan = self.manhattan)
         
         R4 += self.A2C.east_ports[0].position.move_copy(self.arm2_pos)
-        elems +=RouteConnector(R4,manhattan = self.manhattan)
+        elems +=RouteConnector(R4, manhattan = self.manhattan)
         return elems        
     
     def define_ports(self, ports):
@@ -616,7 +616,7 @@
         arm_name = self.name+"_arm1"
         from ipkiss.plugins.photonics.wg.basic import WgElDefinition
         wg_def = WgElDefinition()
-        wg = wg_def(shape = [(0.0,0.0),(self.arm_length,0.0)])
+        wg = wg_def(shape = [(0.0, 0.0), (self.arm_length, 0.0)])
         wg_struct = Structure(name = arm_name, elements = [wg], ports = wg.ports)
         return wg_struct
     
@@ -672,7 +672,7 @@
     """ 1x1 MZI with simple waveguides and Y splitters. Container for given arms. """
     __name_prefix__ = "MZI11WG_Y90"
 
-class WgMzi1x1Y90Symmetric(__Mzi11Y90__,__WgMziSymmetric__):
+class WgMzi1x1Y90Symmetric(__Mzi11Y90__, __WgMziSymmetric__):
     """ symmetric 1x1 MZI with Y splitters and simple waveguides """
     __name_prefix__ = "MZI11WG_Y90_symm"
 
--- ipkiss24\picazzo\filters\parallel_ring\layout.py	(original)
+++ ipkiss24\picazzo\filters\parallel_ring\layout.py	(refactored)
@@ -118,7 +118,7 @@
         
         x = self.simple_rings[-1].east_ports.y_sorted()[-1].transform_copy(self.transformations[-1]).position.x
         
-        for (r, t) in reversed(zip(self.simple_rings, self.transformations)):
+        for (r, t) in reversed(list(zip(self.simple_rings, self.transformations))):
             y_r = r.west_ports.y_sorted()[-1].transform_copy(t).position.y
             s = y - y_r - 2 * self.rbend_radius 
             
--- ipkiss24\picazzo\filters\ring\layout.py	(original)
+++ ipkiss24\picazzo\filters\ring\layout.py	(refactored)
@@ -65,7 +65,7 @@
     
     
     def define_elements(self, elems):
-        elems += [SRef(reference = c, transformation = t) for (c,t) in zip(self.couplers, self.coupler_transformations)]
+        elems += [SRef(reference = c, transformation = t) for (c, t) in zip(self.couplers, self.coupler_transformations)]
         elems += self.get_ring()
         
         if self.area_layer_on:
@@ -324,7 +324,7 @@
                                                length = l,
                                                bend_radius = r,
                                                rounding_algorithm = ra,
-                                               coupler_angles = (ca,ca),
+                                               coupler_angles = (ca, ca),
                                                manhattan = self.manhattan
                                                )
                         ]
@@ -357,7 +357,7 @@
                                                length = l,
                                                bend_radius = r,
                                                rounding_algorithm = ra,
-                                               coupler_angles = (ca,ca),
+                                               coupler_angles = (ca, ca),
                                                sbend_straight = cs,
                                                manhattan = self.manhattan
                                                )
@@ -435,7 +435,7 @@
     """ rectangular ring filter with one straight access waveguide (notch filter) """
     __name_prefix__ = "RINGRECT_180DROP"
 
-class RingRect90DropFilter(__RingStraightCouplers__, __Ring90CouplerTransformation2__,__RingWaveguideCouplers2__,  RingRect):
+class RingRect90DropFilter(__RingStraightCouplers__, __Ring90CouplerTransformation2__, __RingWaveguideCouplers2__,  RingRect):
     """ rectangular ring filter with two straight access waveguides (drop filter) """
     __name_prefix__ = "RINGRECT_90DROP"
     
@@ -444,11 +444,11 @@
     __name_prefix__ = "RINGRECTSYMM_NOTCH"
         
     
-class RingRectSymm180DropFilter(__RingSymmCouplers__, __Ring180CouplerTransformation2__,__RingWaveguideCouplers2__,  RingRect):
+class RingRectSymm180DropFilter(__RingSymmCouplers__, __Ring180CouplerTransformation2__, __RingWaveguideCouplers2__,  RingRect):
     """ rectangular ring filter with two access waveguides (drop filter) """
     __name_prefix__ = "RINGRECTSYMM_180DROP"
 
-class RingRectSymm90DropFilter(__RingSymmCouplers__, __Ring90CouplerTransformation2__,__RingWaveguideCouplers2__,  RingRect):
+class RingRectSymm90DropFilter(__RingSymmCouplers__, __Ring90CouplerTransformation2__, __RingWaveguideCouplers2__,  RingRect):
     """ rectangular ring filter with two access waveguides (drop filter) """
     __name_prefix__ = "RINGRECTSYMM_90DROP"
     
@@ -457,7 +457,7 @@
     __name_prefix__ = "RINGRECTBENT_NOTCH"
         
     
-class RingRectBent180DropFilter(__RingBentCouplers__, __Ring180CouplerTransformation2__,__RingWaveguideCouplers2__,  RingRect):
+class RingRectBent180DropFilter(__RingBentCouplers__, __Ring180CouplerTransformation2__, __RingWaveguideCouplers2__,  RingRect):
     """ rectangular ring filter with two conformally curved access waveguides (drop filter) """
     __name_prefix__ = "RINGRECTBENT_180DROP"
       
@@ -467,7 +467,7 @@
     __name_prefix__ = "RINGRECTSBEND_NOTCH"
         
     
-class RingRectSBend180DropFilter(__RingSBendCouplers__, __Ring180CouplerTransformation2__,__RingWaveguideCouplers2__,  RingRect):
+class RingRectSBend180DropFilter(__RingSBendCouplers__, __Ring180CouplerTransformation2__, __RingWaveguideCouplers2__,  RingRect):
     """ rectangular ring filter with two S-curved access waveguides (drop filter) """
     __name_prefix__ = "RINGRECTSBEND_180DROP"
 
--- ipkiss24\picazzo\filters\ring_ccw\layout.py	(original)
+++ ipkiss24\picazzo\filters\ring_ccw\layout.py	(refactored)
@@ -33,7 +33,7 @@
 from ipkiss.all import *
 from ipkiss.plugins.photonics.wg.basic import WgDefProperty
 
-__all__ = ["CoupledRingRectSymm","CoupledRingGeneric"]
+__all__ = ["CoupledRingRectSymm", "CoupledRingGeneric"]
 
 class CoupledRingGeneric(Structure):
     """ CCW of horizontally stacked rings (composed of vertically stacked rings, but rotated -90 degrees """
@@ -70,7 +70,7 @@
     middle_ring = DefinitionProperty()
     
     def __init__(self, spacings = [TECH.WG.SPACING], **kwargs):
-        super(CoupledRingRectSymm,self).__init__(spacings = spacings[1:-1],**kwargs)     
+        super(CoupledRingRectSymm, self).__init__(spacings = spacings[1:-1], **kwargs)     
         self._first_spacing = spacings[0]
         self._last_spacing = spacings[-1]
 
--- ipkiss24\picazzo\filters\ring_xing\layout.py	(original)
+++ ipkiss24\picazzo\filters\ring_xing\layout.py	(refactored)RefactoringTool: Writing converted ipkiss24\picazzo\filters\ring_xing\layout.py to ipkissat3\picazzo\filters\ring_xing\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\filters\spline_ring\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\spline_ring\__init__.py to ipkissat3\picazzo\filters\spline_ring\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\filters\spline_ring\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\filters\spline_ring\layout.py to ipkissat3\picazzo\filters\spline_ring\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\io\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\__init__.py to ipkissat3\picazzo\io\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\adapter.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\adapter.py to ipkissat3\picazzo\io\adapter.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\block.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\block.py to ipkissat3\picazzo\io\block.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\column.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\column.py to ipkissat3\picazzo\io\column.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\block_structure\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\block_structure\__init__.py to ipkissat3\picazzo\io\block_structure\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\block_structure\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\block_structure\layout.py to ipkissat3\picazzo\io\block_structure\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\cleave\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\cleave\__init__.py to ipkissat3\picazzo\io\cleave\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\io\cleave\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\cleave\layout.py to ipkissat3\picazzo\io\cleave\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\column_set\__init__.py

@@ -122,7 +122,7 @@
     
     def define_elements(self, elems):
         elems = super(RingCrossingBendGeneric, self).define_elements(self, elems)
-        elems += Boundary(PPLayer(self.process,TECH.PURPOSE.LF_AREA), self.wg_h.size_info().bounding_box)
+        elems += Boundary(PPLayer(self.process, TECH.PURPOSE.LF_AREA), self.wg_h.size_info().bounding_box)
         elems += Boundary(PPLayer(self.process, TECH.PURPOSE.LF_AREA), self.wg_v.size_info().bounding_box)
         return elems
         
--- ipkiss24\picazzo\filters\spline_ring\layout.py	(original)
+++ ipkiss24\picazzo\filters\spline_ring\layout.py	(refactored)
@@ -27,11 +27,11 @@
 
 import functools
 
-__all__ = ["RingAdiabaticSpline","RingSplineNotchFilter","RingSpline180DropFilter","RingSpline90DropFilter"]
+__all__ = ["RingAdiabaticSpline", "RingSplineNotchFilter", "RingSpline180DropFilter", "RingSpline90DropFilter"]
 
 def PartialProperty(internal_member_name= None, restriction = None,**kwargs):    
     R = restrictions.RestrictType(functools.partial) & restriction
-    P = RestrictedProperty(internal_member_name, restriction = R,**kwargs)   
+    P = RestrictedProperty(internal_member_name, restriction = R, **kwargs)   
     P.__get_default__ = lambda : P.default
     return P
 
@@ -66,25 +66,25 @@
         return (bend_size[0]+0.01, bend_size[1]+0.01)
     
     def define_straights(self):
-        (bs1,bs2) = self.get_bend90_size()
+        (bs1, bs2) = self.get_bend90_size()
         rect_size = (2 * bs1, 2 * bs2)
         S = ShapeRectangle(center = (0.0, 0.0), box_size = rect_size)
         S = ShapeRoundAdiabaticSplineGeneric(original_shape = S,
                                              radii = [self.bend_radius, self.bend_radius, self.bend_radius, self.bend_radius],
-                                             adiabatic_angles_list = [(self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler),(self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring),
+                                             adiabatic_angles_list = [(self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler), (self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring),
                                                                       (self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler), (self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring)]
                                              )
         L = S.length()
         straight1 = 0.5*(self.length-L) - self.straight
-        return (self.straight,straight1)
+        return (self.straight, straight1)
         
     def define_shape(self):
-        (bs1,bs2) = self.get_bend90_size()
+        (bs1, bs2) = self.get_bend90_size()
         rect_size = (2*bs1+self.straights[0], 2*bs2+self.straights[1])
         S = ShapeRectangle(center = (0.0, 0.0), box_size = rect_size)
         S = ShapeRoundAdiabaticSplineGeneric(original_shape = S,
                                              radii = [self.bend_radius, self.bend_radius, self.bend_radius, self.bend_radius],
-                                             adiabatic_angles_list = [(self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler),(self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring),
+                                             adiabatic_angles_list = [(self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler), (self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring),
                                                                       (self.adiabatic_angle_in_ring, self.adiabatic_angle_in_coupler), (self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_ring)]
                                              )
 
--- ipkiss24\picazzo\io\adapter.py	(original)
+++ ipkiss24\picazzo\io\adapter.py	(refactored)
@@ -44,8 +44,8 @@
     
 
     def define_name(self):
-        return "%s_%s_T%s_%d" % (self.__name_prefix__ ,
-                                          self.struct.name ,
+        return "%s_%s_T%s_%d" % (self.__name_prefix__,
+                                          self.struct.name,
                                           self.struct_transformation.id_string(),
                                           do_hash(str((str(self.offset) + str(self.y_spacing) + str(self.south_west) + str(self.south_east))))
                                       )
--- ipkiss24\picazzo\io\block.py	(original)
+++ ipkiss24\picazzo\io\block.py	(refactored)
@@ -65,7 +65,7 @@
         return SizeInfo(self.south_west[0], 
                              self.south_east[0], 
                              max(self.south_west[1] + self.count_west * self.y_spacing, self.south_east[1], self.south_east[1] + self.count_east * self.y_spacing),
-                             min(self.south_west[1] , self.south_east[1])
+                             min(self.south_west[1], self.south_east[1])
                              )
     
 
@@ -118,7 +118,7 @@
 ##########################################################
 
 class BlocksDefinitionProperty(DefinitionProperty):
-    __allowed_keyword_arguments__ = ["required","restriction","default","fdef_name"]
+    __allowed_keyword_arguments__ = ["required", "restriction", "default", "fdef_name"]
     
     def __init__(self, **kwargs):        
         super(BlocksDefinitionProperty, self).__init__(**kwargs)    
@@ -135,7 +135,7 @@
         except KeyError:
             stored_value = BlockList()
         value = f(stored_value)
-        DefinitionProperty.__set__(self,obj, value)
+        DefinitionProperty.__set__(self, obj, value)
         return value        
                 
 
--- ipkiss24\picazzo\io\column.py	(original)
+++ ipkiss24\picazzo\io\column.py	(refactored)
@@ -102,12 +102,12 @@
     def is_full(self):
         return (self.count_west >= self.n_o_lines[0]) or (self.count_east>= self.n_o_lines[1])
 
-    def get_block_and_pos_by_name(self,name):
+    def get_block_and_pos_by_name(self, name):
         for i in range(len(self.blocks)):
             B = self.blocks[i]
             p = self.blocks_pos[i]
-            if hasattr(B,'name') and B.name == name:
-                return [B,p]
+            if hasattr(B, 'name') and B.name == name:
+                return [B, p]
         return None
     
 
@@ -117,7 +117,7 @@
         for i in range(len(self.blocks)):
             B = self.blocks[i]
             pos = self.blocks_pos[i]
-            if hasattr(B,'vertical_optical_ports'):
+            if hasattr(B, 'vertical_optical_ports'):
                 for p in B.vertical_optical_ports:
                     ports += p.move_copy(pos)
         return ports
--- ipkiss24\picazzo\io\block_structure\__init__.py	(original)
+++ ipkiss24\picazzo\io\block_structure\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\block_structure\layout.py	(original)
+++ ipkiss24\picazzo\io\block_structure\layout.py	(refactored)
@@ -89,7 +89,7 @@
         title = Structure(self.name + "_1", PolygonText(PPLayer(self.process, TECH.PURPOSE.DF.TEXT), 
                                                         self.text, 
                                                         (0.0, 0.0), 
-                                                        alignment = (TEXT_ALIGN_CENTER, TEXT_ALIGN_MIDDLE) , 
+                                                        alignment = (TEXT_ALIGN_CENTER, TEXT_ALIGN_MIDDLE), 
                                                         font = TEXT_FONT_COMPACT, 
                                                         height = 0.7 * self.y_spacing))
         w = title.size_info().width
--- ipkiss24\picazzo\io\cleave\__init__.py	(original)
+++ ipkiss24\picazzo\io\cleave\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\column_set\__init__.py	(original)
+++ ipkiss24\picazzo\io\column_set\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.beRefactoringTool: Writing converted ipkiss24\picazzo\io\column_set\__init__.py to ipkissat3\picazzo\io\column_set\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\io\column_set\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\column_set\layout.py to ipkissat3\picazzo\io\column_set\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\fibcoup\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\fibcoup\__init__.py to ipkissat3\picazzo\io\fibcoup\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\fibcoup\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\fibcoup\layout.py to ipkissat3\picazzo\io\fibcoup\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\fibcoup_2d\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\fibcoup_2d\__init__.py to ipkissat3\picazzo\io\fibcoup_2d\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\fibcoup_2d\layout.py

 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\fibcoup\__init__.py	(original)
+++ ipkiss24\picazzo\io\fibcoup\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\fibcoup\layout.py	(original)
+++ ipkiss24\picazzo\io\fibcoup\layout.py	(refactored)
@@ -89,7 +89,7 @@
         for ypos in self.y_west:
             fc = self.west_fibcoups[i%len(self.west_fibcoups)]
             west_fibcoup_position = (self.west_fibcoup_offsets[i%len(self.west_fibcoup_offsets)], ypos - fc.east_ports[0].y)
-            west_fibcoup_and_position.append((fc,west_fibcoup_position,IdentityTransform()))
+            west_fibcoup_and_position.append((fc, west_fibcoup_position, IdentityTransform()))
             i += 1
         return west_fibcoup_and_position
     
@@ -99,17 +99,17 @@
         for ypos in self.y_east:
             fc = self.east_fibcoups[i%len(self.east_fibcoups)]
             east_fibcoup_position = (self.width - self.east_fibcoup_offsets[i%len(self.east_fibcoup_offsets)], ypos - fc.east_ports[0].y)
-            east_fibcoup_and_position.append((fc,east_fibcoup_position,HMirror()))
+            east_fibcoup_and_position.append((fc, east_fibcoup_position, HMirror()))
             i += 1
         return east_fibcoup_and_position
                 
     def define_elements(self, elems):
         super(IoFibcoupGeneric, self).define_elements(elems)    
         T = HMirror() # for east couplers
-        for fc,pos,tf in self.west_fibcoups_transforms_and_positions:
-            elems += SRef(fc,pos,tf)
-        for fc,pos,tf in self.east_fibcoups_transforms_and_positions:
-            elems += SRef(fc,pos,tf)
+        for fc, pos, tf in self.west_fibcoups_transforms_and_positions:
+            elems += SRef(fc, pos, tf)
+        for fc, pos, tf in self.east_fibcoups_transforms_and_positions:
+            elems += SRef(fc, pos, tf)
             
         #i = 0
         
@@ -161,7 +161,7 @@
             t_pos = (west - west_connect_length-TECH.WG.SHORT_STRAIGHT, self.y_west[i])
             #small piece of waveguide at the end
             wg_def = WgElDefinition(wg_width = ip.wg_definition.wg_width, trench_width = ip.wg_definition.trench_width, process = west_process)            
-            W = wg_def([t_pos, (t_pos[0] +TECH.WG.SHORT_STRAIGHT , t_pos[1])])
+            W = wg_def([t_pos, (t_pos[0] +TECH.WG.SHORT_STRAIGHT, t_pos[1])])
             elems += W
             # taper to the cleave waveguide            
             start_wg_def1 = WgElDefinition(wg_width = ip.wg_definition.wg_width, trench_width = ip.wg_definition.trench_width, process = west_process)            
@@ -253,7 +253,7 @@
             # position taper
             t_pos = (east + east_connect_length+TECH.WG.SHORT_STRAIGHT, self.y_east[i])
             wg_def = WgElDefinition(wg_width = op.wg_definition.wg_width, trench_width = op.wg_definition.trench_width, process = east_process)
-            W = wg_def([t_pos, (t_pos[0] -TECH.WG.SHORT_STRAIGHT , t_pos[1])])
+            W = wg_def([t_pos, (t_pos[0] -TECH.WG.SHORT_STRAIGHT, t_pos[1])])
             elems += W
             start_wg_def3 = WgElDefinition(wg_width = op.wg_definition.wg_width, trench_width = op.wg_definition.trench_width, process = east_process) 
             end_wg_def3 = WgElDefinition(wg_width = east_wg_width, trench_width = east_trench_width, process = east_process) 
@@ -321,27 +321,27 @@
         cntwest = 0
         cnteast = 0
         for i in range(len(self.y_west)):
-            fc,pos,tf = self.west_fibcoups_transforms_and_positions[i]
+            fc, pos, tf = self.west_fibcoups_transforms_and_positions[i]
             for p in fc.ports:
-                if isinstance(p,VerticalOpticalPort):
+                if isinstance(p, VerticalOpticalPort):
                     vop = p.transform_copy(tf).move_copy(pos)
-                    vop.name = "%s_W%d"%(self.name,cntwest)
+                    vop.name = "%s_W%d"%(self.name, cntwest)
                     pl += vop
                     cntwest += 1
         for i in range(len(self.y_east)):
-            fc,pos,tf = self.east_fibcoups_transforms_and_positions[i]
+            fc, pos, tf = self.east_fibcoups_transforms_and_positions[i]
             for p in fc.ports:
-                if isinstance(p,VerticalOpticalPort):
+                if isinstance(p, VerticalOpticalPort):
                     vop = p.transform_copy(tf).move_copy(pos)
-                    vop.name = "%s_E%d"%(self.name,cnteast)
+                    vop.name = "%s_E%d"%(self.name, cnteast)
                     pl += vop
                     cnteast += 1
         (struct_position, struct_west_ports, struct_east_ports) = self.position_west_east_ports
         cnt_c = 0
         for p in self.struct.ports:
-            if isinstance(p,VerticalOpticalPort):
+            if isinstance(p, VerticalOpticalPort):
                 vop = p.transform_copy(self.struct_transformation).move_copy(struct_position)
-                vop.name = "%s_C%d"%(self.name,cnt_c)
+                vop.name = "%s_C%d"%(self.name, cnt_c)
                 pl += vop
                 cnt_c += 1
         return pl
--- ipkiss24\picazzo\io\fibcoup_2d\__init__.py	(original)
+++ ipkiss24\picazzo\io\fibcoup_2d\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\fibcoup_2d\layout.py	(original)
+++ ipkiss24\picazzo\io\fibcoup_2d\layout.py	(refactored)
@@ -58,7 +58,7 @@
     
     
     def define_elements(self, elems):
-        elems += SRef(self.fibcoup,(0.0,0.0))
+        elems += SRef(self.fibcoup, (0.0, 0.0))
         return elems
     
     @cache()
@@ -77,12 +77,12 @@
     def define_end_coords(self):
         return self.start_coords_end_coords[1]    
                        
-    def add_taper(self,elems, angle_start,angle_end):
-        sp = self.start_coords.get_ports_within_angles(angle_start,angle_end)
-        ep = self.end_coords.get_ports_within_angles(angle_start,angle_end)
+    def add_taper(self, elems, angle_start, angle_end):
+        sp = self.start_coords.get_ports_within_angles(angle_start, angle_end)
+        ep = self.end_coords.get_ports_within_angles(angle_start, angle_end)
         
         wg_ext = 0.1
-        for i in range(0,len(sp)):
+        for i in range(0, len(sp)):
             elems += WgElTaperParabolic(start_position = sp[i].position, end_position = ep[i].position, 
                                         start_wg_def = sp[i].wg_definition, end_wg_def = ep[i].wg_definition)
         return elems
@@ -93,30 +93,30 @@
     __name_prefix__ = "Io2dFibcoup_ss"
     
     def define_elements(self, elems):
-        elems += SRef(self.fibcoup,(0.0,0.0))
-        elems = self.add_taper(elems, 0.0,90.0)
-        elems = self.add_taper(elems, 270.0,360.0)
+        elems += SRef(self.fibcoup, (0.0, 0.0))
+        elems = self.add_taper(elems, 0.0, 90.0)
+        elems = self.add_taper(elems, 270.0, 360.0)
         return elems
                     
     def define_ports(self, ports):
-        for port in self.end_coords.get_ports_within_angles(270.0,90.0):
+        for port in self.end_coords.get_ports_within_angles(270.0, 90.0):
             port = OutOpticalPort(wg_definition = port.wg_definition, position = port.position, angle = port.angle)
             ports += port
         return ports
         
             
 def IoSingleSided2dFibcoup(wg_definition = TECH.WGDEF.WIRE, taper_length=250.0):
-    return IoSingleSided2dFibcoupBase(fibcoup = TECH.IO.FIBCOUP.DEFAULT_2D_GRATING,wg_definition = wg_definition,taper_length = taper_length)
+    return IoSingleSided2dFibcoupBase(fibcoup = TECH.IO.FIBCOUP.DEFAULT_2D_GRATING, wg_definition = wg_definition, taper_length = taper_length)
 
 class IoDoubleSided2dFibcoupBase(Io2dFibcoup):
     __name_prefix__ = "Io2dFibcoup_ds"
         
     def define_elements(self, elems):
-        elems += SRef(self.fibcoup,(0.0,0.0))RefactoringTool: Writing converted ipkiss24\picazzo\io\fibcoup_2d\layout.py to ipkissat3\picazzo\io\fibcoup_2d\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\io_array\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\io_array\__init__.py to ipkissat3\picazzo\io\io_array\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\io\io_array\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\io\io_array\layout.py to ipkissat3\picazzo\io\io_array\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\markers\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\markers\__init__.py to ipkissat3\picazzo\markers\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\markers\file_marker.py
RefactoringTool: Writing converted ipkiss24\picazzo\markers\file_marker.py to ipkissat3\picazzo\markers\file_marker.py.
RefactoringTool: No changes to ipkiss24\picazzo\markers\marker.py
RefactoringTool: Writing converted ipkiss24\picazzo\markers\marker.py to ipkissat3\picazzo\markers\marker.py.
RefactoringTool: Refactored ipkiss24\picazzo\markers\vernier.py

-        elems = self.add_taper(elems,0.0,90.0)
-        elems = self.add_taper(elems,90.0,180.0)
-        elems = self.add_taper(elems,180.0,270.0)
-        elems = self.add_taper(elems,270.0,360.0)
+        elems += SRef(self.fibcoup, (0.0, 0.0))
+        elems = self.add_taper(elems, 0.0, 90.0)
+        elems = self.add_taper(elems, 90.0, 180.0)
+        elems = self.add_taper(elems, 180.0, 270.0)
+        elems = self.add_taper(elems, 270.0, 360.0)
         return elems
                     
     def define_ports(self, ports):
@@ -124,7 +124,7 @@
         return ports
 
 def IoDoubleSided2dFibcoup(wg_definition = TECH.WGDEF.WIRE, taper_length=250.0):
-    return IoDoubleSided2dFibcoupBase(fibcoup = TECH.IO.FIBCOUP.DEFAULT_2D_GRATING,wg_definition = wg_definition, taper_length = taper_length)
+    return IoDoubleSided2dFibcoupBase(fibcoup = TECH.IO.FIBCOUP.DEFAULT_2D_GRATING, wg_definition = wg_definition, taper_length = taper_length)
 
 
 class FibcoupDuplex4Port(Io2dFibcoup):
@@ -133,11 +133,11 @@
     
         
     def define_elements(self, elems):
-        elems += SRef(self.fibcoup,(0.0,0.0))
-        elems = self.add_taper(elems,0.0,90.0)
-        elems = self.add_taper(elems,90.0,180.0)
-        elems = self.add_taper(elems,180.0,270.0)
-        elems = self.add_taper(elems,270.0,360.0)
+        elems += SRef(self.fibcoup, (0.0, 0.0))
+        elems = self.add_taper(elems, 0.0, 90.0)
+        elems = self.add_taper(elems, 90.0, 180.0)
+        elems = self.add_taper(elems, 180.0, 270.0)
+        elems = self.add_taper(elems, 270.0, 360.0)
         return elems
         
     def define_ports(self, ports):
@@ -149,10 +149,10 @@
     __name_prefix__ = "FibcoupDuplex3Port"
                
     def define_elements(self, elems):
-        elems += SRef(self.fibcoup,(0.0,0.0))
-        elems = self.add_taper(elems,0.0,90.0)
-        elems = self.add_taper(elems,270.0,360.0)
-        elems = self.add_taper(elems,135.0,225.0)
+        elems += SRef(self.fibcoup, (0.0, 0.0))
+        elems = self.add_taper(elems, 0.0, 90.0)
+        elems = self.add_taper(elems, 270.0, 360.0)
+        elems = self.add_taper(elems, 135.0, 225.0)
         return elems
         
     def define_ports(self, ports):
@@ -166,12 +166,12 @@
 ############################################
            
 def IoSingleSided2dFibcoupArray(num_fibcoup=4, wg_definition = TECH.WGDEF.WIRE, spacing=250.0):
-    FC = IoSingleSided2dFibcoup(wg_definition,140.0) 
+    FC = IoSingleSided2dFibcoup(wg_definition, 140.0) 
     return IoPeriodicArray(FC, num_fibcoup, spacing)
 
            
 def IoDoubleSided2dFibcoupArray(num_fibcoup=4, wg_definition =TECH.WGDEF.WIRE, spacing=250.0):
-    FC = IoDoubleSided2dFibcoup(wg_definition,140.0) 
+    FC = IoDoubleSided2dFibcoup(wg_definition, 140.0) 
     return IoPeriodicArray(FC, num_fibcoup, spacing, library)
 
         
--- ipkiss24\picazzo\io\io_array\__init__.py	(original)
+++ ipkiss24\picazzo\io\io_array\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\io\io_array\layout.py	(original)
+++ ipkiss24\picazzo\io\io_array\layout.py	(refactored)
@@ -42,11 +42,11 @@
     
     def define_elements(self, elems):       
         for i in range(len(self.fibcoups)):
-            elems += SRef(self.fibcoups[i],self.positions[i])
+            elems += SRef(self.fibcoups[i], self.positions[i])
         return elems
             
     def define_ports(self, ports):
-        for i in range(0,len(self.fibcoups)):
+        for i in range(0, len(self.fibcoups)):
             ports += self.io_fibcoups[i].ports.move_copy(self.positions[i])
         return ports
 
@@ -63,15 +63,15 @@
             self.spacing)
     
     def define_positions(self):
-        return [(0.0,i * self.spacing) for i in range(len(self.fibcoups))]
+        return [(0.0, i * self.spacing) for i in range(len(self.fibcoups))]
     
     def define_elements(self, elems):       
         for i in range(len(self.fibcoups)):
-            elems += SRef(self.fibcoups[i],self.positions[i])
+            elems += SRef(self.fibcoups[i], self.positions[i])
         return elems
             
     def define_ports(self, ports):
-        for i in range(0,len(self.fibcoups)):
+        for i in range(0, len(self.fibcoups)):
             ports += self.fibcoups[i].ports.move_copy(self.positions[i])
         return ports
 
@@ -94,10 +94,10 @@
         return [self.fibcoup for i in range(self.n_o_fibcoup)]
     
     def define_elements(self, elems):       
-        elems += ARefY(self.fibcoup,(0.0,0.0),self.spacing,self.n_o_fibcoup)
+        elems += ARefY(self.fibcoup, (0.0, 0.0), self.spacing, self.n_o_fibcoup)
         return elems
             
     def define_ports(self, ports):
-        for i in range(0,self.n_o_fibcoup):
+        for i in range(0, self.n_o_fibcoup):
             ports += self.fibcoup.ports.move_copy(self.positions[i])
         return ports
--- ipkiss24\picazzo\markers\file_marker.py	(original)
+++ ipkiss24\picazzo\markers\file_marker.py	(refactored)
@@ -36,7 +36,7 @@
     prefix = StringProperty(default="")
 
     def define_name(self):
-        return "%s_%s%s" % (self.__name_prefix__,self.prefix, 
+        return "%s_%s%s" % (self.__name_prefix__, self.prefix, 
                              os.path.splitext(os.path.split(self.filename)[1])[0])
 
     @cache()
@@ -45,7 +45,7 @@
         filesize = os.path.getsize(self.filename)
         LOG.info("size: %d KB"%(filesize/1024))
         if os.path.exists(self.filename):
-            F = open(self.filename,"rb")
+            F = open(self.filename, "rb")
             input = InputGdsii(F, stop_on_unknown_gds_layer=False, log_bufsize = filesize)
             input.layer_map = self.layer_map
             L = input.read()
@@ -78,7 +78,7 @@
         return "%s_%s" % (super(SingleProcessFileMarker, self).define_name(), self.process.extension)
 
     def define_elements(self, elems):
-        f = open(self.filename,"rb")
+        f = open(self.filename, "rb")
         I = InputGdsii(f, stop_on_unknown_gds_layer = False)
         I.prefix = "%s_"%(self.process.extension)
         if self.layer_map != None:
--- ipkiss24\picazzo\markers\vernier.py	(original)
+++ ipkiss24\picazzo\markers\vernier.py	(refactored)
@@ -36,16 +36,16 @@
     def define_inner_pitch(self):
         return self.outer_pitch - (self.outer_marks_width - self.inner_marks_width)/(self.n_o_lines-1)
     
-class VernierMarkerH(OverlayMarker,__VernierMarker__):
+class VernierMarkerH(OverlayMarker, __VernierMarker__):
     __name_prefix__ = "VERNIER_H"
     
     def define_elements(self, elems):
         if self.overlay_process != TECH.PROCESS.NONE:
-            HI1 = VernierMarkHI(layer=PPLayer(self.overlay_process, self.overlay_purpose),marks_width=self.inner_marks_width,marks_length=self.marks_length)
+            HI1 = VernierMarkHI(layer=PPLayer(self.overlay_process, self.overlay_purpose), marks_width=self.inner_marks_width, marks_length=self.marks_length)
             elems += ARefX(HI1, (self.outer_pitch + self.outer_marks_width - self.inner_marks_width, 0.0), self.inner_pitch, self.n_o_lines)
 
         if self.master_process != TECH.PROCESS.NONE:
-            HO1 = VernierMarkHO(layer=PPLayer(self.master_process, self.master_purpose),marks_width=self.outer_marks_width,marks_length=self.marks_length)
+            HO1 = VernierMarkHO(layer=PPLayer(self.master_process, self.master_purpose), marks_width=self.outer_marks_width, marks_length=self.marks_length)
             elems += ARefX(HO1, (self.outer_pitch, 0.0), self.outer_pitch, self.n_o_lines)
         si = elems.size_info()
         elems += Rectangle(layer = PPLayer(TECH.PROCESS.NONE, TECH.PURPOSE.NO_FILL),
@@ -59,17 +59,17 @@
 
         return elems
 
-class VernierMarkerV(OverlayMarker,__VernierMarker__):
+class VernierMarkerV(OverlayMarker, __VernierMarker__):
     __name_prefix__ = "VERNIER_V"
 
     def define_elements(self, elems):RefactoringTool: Writing converted ipkiss24\picazzo\markers\vernier.py to ipkissat3\picazzo\markers\vernier.py.
RefactoringTool: No changes to ipkiss24\picazzo\phc\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\phc\__init__.py to ipkissat3\picazzo\phc\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\phc\hetero.py
RefactoringTool: Writing converted ipkiss24\picazzo\phc\hetero.py to ipkissat3\picazzo\phc\hetero.py.
RefactoringTool: Refactored ipkiss24\picazzo\phc\holes.py
RefactoringTool: Writing converted ipkiss24\picazzo\phc\holes.py to ipkissat3\picazzo\phc\holes.py.
RefactoringTool: Refactored ipkiss24\picazzo\phc\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\phc\layout.py to ipkissat3\picazzo\phc\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\phc\w1.py
RefactoringTool: Writing converted ipkiss24\picazzo\phc\w1.py to ipkissat3\picazzo\phc\w1.py.
RefactoringTool: No changes to ipkiss24\picazzo\process\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\process\__init__.py to ipkissat3\picazzo\process\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\slab\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\slab\__init__.py to ipkissat3\picazzo\slab\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\slab\aperture_mounting.py
RefactoringTool: Writing converted ipkiss24\picazzo\slab\aperture_mounting.py to ipkissat3\picazzo\slab\aperture_mounting.py.
RefactoringTool: No changes to ipkiss24\picazzo\slab\star_coupler.py
RefactoringTool: Writing converted ipkiss24\picazzo\slab\star_coupler.py to ipkissat3\picazzo\slab\star_coupler.py.
RefactoringTool: No changes to ipkiss24\picazzo\tools\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\tools\__init__.py to ipkissat3\picazzo\tools\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\tools\import_layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\tools\import_layout.py to ipkissat3\picazzo\tools\import_layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\tools\view_2d.py

         elems = ElementList()
         if self.overlay_process != TECH.PROCESS.NONE:
-            VI1 = VernierMarkVI(layer=PPLayer(self.overlay_process, self.overlay_purpose),marks_width=self.inner_marks_width,marks_length=self.marks_length)
+            VI1 = VernierMarkVI(layer=PPLayer(self.overlay_process, self.overlay_purpose), marks_width=self.inner_marks_width, marks_length=self.marks_length)
             elems += ARefY(VI1, (0.0, self.outer_pitch + self.outer_marks_width - self.inner_marks_width ),  self.inner_pitch, self.n_o_lines)
 
         if self.master_process != TECH.PROCESS.NONE:
-            VO1 = VernierMarkVO(layer=PPLayer(self.master_process, self.master_purpose),marks_width=self.outer_marks_width,marks_length=self.marks_length)
+            VO1 = VernierMarkVO(layer=PPLayer(self.master_process, self.master_purpose), marks_width=self.outer_marks_width, marks_length=self.marks_length)
             elems += ARefY(VO1, (0.0, self.outer_pitch ), self.outer_pitch, self.n_o_lines)
         si = elems.size_info()
         elems += Rectangle(layer = PPLayer(TECH.PROCESS.NONE, TECH.PURPOSE.NO_FILL),
--- ipkiss24\picazzo\phc\hetero.py	(original)
+++ ipkiss24\picazzo\phc\hetero.py	(refactored)
@@ -67,7 +67,7 @@
         return Coord2(0.0, 0.0)
     
     def define_cavity_pos(self):
-        return Coord2(self.mirror_pitch * (self.n_o_mirror_periods) - 0.5*(self.mirror_pitch - self.cavity_pitch) , 0.0)
+        return Coord2(self.mirror_pitch * (self.n_o_mirror_periods) - 0.5*(self.mirror_pitch - self.cavity_pitch), 0.0)
             
     def define_elements(self, elems):
         elems += SRef(self.mirror, self.mirror_pos)
--- ipkiss24\picazzo\phc\holes.py	(original)
+++ ipkiss24\picazzo\phc\holes.py	(refactored)
@@ -31,10 +31,10 @@
     purpose = PurposeProperty(default = TECH.PURPOSE.DF.HOLE)
     
     def define_name(self):
-        return "%s_%d_C%d_%d_A%d_P%s_PP%s" % (self.__name_prefix__ , 
+        return "%s_%d_C%d_%d_A%d_P%s_PP%s" % (self.__name_prefix__, 
                                      self.radius * 1000, 
                                      self.center.x * 1000, self.center.y * 1000,
-                                     self.angle*1000,self.process.extension,self.purpose.extension)
+                                     self.angle*1000, self.process.extension, self.purpose.extension)
 
 class HexHole(__RoundHole__):
     __name_prefix__ = "HEX"
--- ipkiss24\picazzo\phc\layout.py	(original)
+++ ipkiss24\picazzo\phc\layout.py	(refactored)
@@ -106,7 +106,7 @@
         
         return elems
 
-    def define_ports(self,prts):
+    def define_ports(self, prts):
         from ipkiss.plugins.photonics.port.port import OpticalPort
         for coord, angle, wg_def in self.ports_coordinates:
             p = OpticalPort(position = (self.pitches[0] * coord[0], self.pitches[1] * coord[1]),
@@ -124,7 +124,7 @@
         pitches = (0.5 * self.lattice_pitches[0], sqrt(0.75)*self.lattice_pitches[1])
         return pitches
 
-    def define_ports(self,prts):
+    def define_ports(self, prts):
         from ipkiss.plugins.photonics.port.port import OpticalPort
         for coord, angle, wg_def in self.ports_coordinates:
             p = OpticalPort(position = (self.lattice_pitches[0] * coord[0], self.lattice_pitches[1]*sqrt(3.0) * coord[1]),
--- ipkiss24\picazzo\phc\w1.py	(original)
+++ ipkiss24\picazzo\phc\w1.py	(refactored)
@@ -44,7 +44,7 @@
         cells = {}
         cell_letters = "ABCDEFGHIJKLMNOPQRSTUVWXY"
         L = len(self.unit_cells)
-        for i in range(0,L):
+        for i in range(0, L):
             H1 = cell_letters[2*i]
             C = self.unit_cells[i]
             if not C is None:
@@ -189,7 +189,7 @@
             else:
                 maplist.append(" /%s /" % (H))        
         mymap = "\n".join(maplist)        
-        return (cells,mymap)
+        return (cells, mymap)
     
 
     def define_ports_coordinates(self):
@@ -202,7 +202,7 @@
         port_col = self.port_offset / self.pitches[0]
         
         return [((-port_col, -port_row), -180, wg_def),
-                ((port_col , -port_row), 0.0, wg_def)
+                ((port_col, -port_row), 0.0, wg_def)
                  ]
     #def define_ports(self, prts):
         #if self.port_row is None: 
@@ -270,7 +270,7 @@
                 maplist.append(" /%d,%s /" % (self.n_o_periods-1, H))
         
         mymap = "\n".join(maplist)
-        return (cells,mymap)
+        return (cells, mymap)
 
     def define_ports_coordinates(self):
         from ipkiss.plugins.photonics.wg.basic import WgElDefinition
@@ -309,7 +309,7 @@
     
     def define_ports_coordinates(self):
         from ipkiss.plugins.photonics.wg.basic import WgElDefinition
-        wg_def = WgElDefinition(wg_width = sqrt(3.0)*self.pitch ,
+        wg_def = WgElDefinition(wg_width = sqrt(3.0)*self.pitch,
                                 trench_width = TECH.WG.TRENCH_WIDTH,
                                 process = TECH.PROCESS.WG
                                 )
@@ -411,7 +411,7 @@
             hole_sizes['Z'] = self.defect_diameter
         cav_str = ""
         for i in range(len(self.cavity_holes)):
-            hole_sizes[chr(66+i)] = self.cavity_holes.values()[i]
+            hole_sizes[chr(66+i)] = list(self.cavity_holes.values())[i]
             cav_str += chr(66+i) + " "
         cav_str += "  "
         for i in range(len(self.cavity_holes), 0, -1):
--- ipkiss24\picazzo\slab\aperture_mounting.py	(original)
+++ ipkiss24\picazzo\slab\aperture_mounting.py	(refactored)
@@ -48,7 +48,7 @@
     """ Generates a tuple of (positions, angles), with positions and angles lists, for 
     apertures ojn a Rowland circle wit a given pole and direction of the pole (a vector), 
     and the apertures pointing to the pole and for given angles with respect to the pole """
-    vectors = [Vector(position = (pole_vector[0] + 2*radius * cos(DEG2RAD* (a-pole_vector.angle_deg)) * cos(DEG2RAD * a) , 
+    vectors = [Vector(position = (pole_vector[0] + 2*radius * cos(DEG2RAD* (a-pole_vector.angle_deg)) * cos(DEG2RAD * a), 
                            pole_vector[1] + 2*radius * cos(DEG2RAD* (a-pole_vector.angle_deg)) * sin(DEG2RAD*a)),
                        angle = a) 
                         for a in angles]
--- ipkiss24\picazzo\tools\import_layout.py	(original)
+++ ipkiss24\picazzo\tools\import_layout.py	(refactored)
@@ -45,7 +45,7 @@
 
     def read(self):
         if os.path.exists(self.filename):
-            F = open(self.filename,"rb")
+            F = open(self.filename, "rb")
             input = InputGdsii(F)
             input.layer_map = self.layermap
             input.prefix = self.name + "_"
@@ -71,7 +71,7 @@
                 from gzip import GzipFile
                 F = GzipFile(self.filename, mode = "rb")
             else:
-                F = open(self.filename,"rb")
+                F = open(self.filename, "rb")
             input = InputGdsiiHeader(F)
             input.layer_map = self.layer_map
             input.prefix = self.prefix
@@ -91,7 +91,7 @@
                 from gzip import GzipFile
                 F = GzipFile(self.filename, mode = "rb")
             else:
-                F = open(self.filename,"rb")
+                F = open(self.filename, "rb")
             input = self.input_handler(F, stop_on_unknown_gds_layer=False, log_bufsize = filesize)
             input.layer_map = self.layer_map
             input.prefix = self.prefix
@@ -105,7 +105,7 @@
     def get_library_top_level(self):
         L = self.get_file_library()
         if self.toplevel!="":
-            S = L["%s%s"%(input.prefix,self.toplevel)]
+            S = L["%s%s"%(input.prefix, self.toplevel)]
         else:
             S = L.top_layout()      
         return S
--- ipkiss24\picazzo\tools\view_2d.py	(original)
+++ ipkiss24\picazzo\tools\view_2d.py	(refactored)
@@ -25,10 +25,10 @@
 import sys
 
 def vfabrication_for_gds(gds_file):
-    print "Reading %s..."%(gds_file)
+    print("Reading %s..."%(gds_file))RefactoringTool: Writing converted ipkiss24\picazzo\tools\view_2d.py to ipkissat3\picazzo\tools\view_2d.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\__init__.py to ipkissat3\picazzo\wg\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\aperture\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\aperture\__init__.py to ipkissat3\picazzo\wg\aperture\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\aperture\layout.py

     I = InputGdsii(file(gds_file, "rb"))
     L = I.read()
-    print "Done reading the gds. Now starting the virtual fabrication..."
+    print("Done reading the gds. Now starting the virtual fabrication...")
     L.visualize_structures_2d()
 
     
--- ipkiss24\picazzo\wg\aperture\__init__.py	(original)
+++ ipkiss24\picazzo\wg\aperture\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\aperture\layout.py	(original)
+++ ipkiss24\picazzo\wg\aperture\layout.py	(refactored)
@@ -112,28 +112,28 @@
         apt = self.aperture_wg_definition.trench_width
         ww = self.wg_definition.wg_width
         wt = self.wg_definition.trench_width
-        elems += Wedge(PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF.LINE), 
-                       (self.center[0] ,  self.center[1]),
-                       (self.center[0] + self.taper_length , self.center[1]), 
+        elems += Wedge(PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF.LINE), 
+                       (self.center[0],  self.center[1]),
+                       (self.center[0] + self.taper_length, self.center[1]), 
                        apw, 
                        ww)
         S = Shape([(0.0, + 0.5*apw),
                        (-0.1, + 0.5*apw+ 0.5*apt),
                        (0.0, + 0.5*apw+ apt),
-                       (0.5*self.taper_length ,0.25*(ww +apw) + max(wt, apt)),
-                       (self.taper_length ,+ 0.5*ww + wt),
-                       (self.taper_length +0.1,+ 0.5*ww+ 0.5*wt),
-                       (self.taper_length ,+ 0.5*ww),
-                       (self.taper_length ,- 0.5*ww),
-                       (self.taper_length +0.1,- 0.5*ww -0.5* wt),
-                       (self.taper_length ,- 0.5*ww - wt),
-                       (0.5*self.taper_length ,- 0.25*(ww +apw) - max(wt, apt)),
-                       (0.0,- 0.5*apw- apt),
-                       (-0.1,- 0.5*apw- 0.5*apt),
-                       (0.0,- 0.5*apw)],
+                       (0.5*self.taper_length, 0.25*(ww +apw) + max(wt, apt)),
+                       (self.taper_length, + 0.5*ww + wt),
+                       (self.taper_length +0.1, + 0.5*ww+ 0.5*wt),
+                       (self.taper_length, + 0.5*ww),
+                       (self.taper_length, - 0.5*ww),
+                       (self.taper_length +0.1, - 0.5*ww -0.5* wt),
+                       (self.taper_length, - 0.5*ww - wt),
+                       (0.5*self.taper_length, - 0.25*(ww +apw) - max(wt, apt)),
+                       (0.0, - 0.5*apw- apt),
+                       (-0.1, - 0.5*apw- 0.5*apt),
+                       (0.0, - 0.5*apw)],
                       closed = True)
         S.translate(self.center)
-        elems += Boundary(PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF_AREA), S)
+        elems += Boundary(PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF_AREA), S)
         return elems
 
     def aperture_shape(self, process):
@@ -160,33 +160,33 @@
         wt = self.wg_definition.trench_width
 
         # shallow part
-        W = Wedge(PPLayer(self.shallow_process,TECH.PURPOSE.LF.LINE), 
-                               (self.center[0] , self.center[1]), 
-                               (self.center[0] + self.taper_length , self.center[1]), 
+        W = Wedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), 
+                               (self.center[0], self.center[1]), 
+                               (self.center[0] + self.taper_length, self.center[1]), 
                                apw, 
                                self.shallow_wg_width)
         elems += W
         S = Shape([(0.0, + 0.5*apw),
-                       (- 0.1 , 0.5*apw + 0.5* apt),                       
+                       (- 0.1, 0.5*apw + 0.5* apt),                       
                        (0.0, + 0.5*apw+ apt),
-                       (0.5*self.taper_length ,0.25*(self.shallow_wg_width +apw) + max(wt, apt)),
-                       (self.taper_length ,+ 0.5*self.shallow_wg_width + wt),
-                       (self.taper_length +0.1 ,+ 0.5*self.shallow_wg_width+ 0.5 *wt),
-                       (self.taper_length ,+ 0.5*self.shallow_wg_width),
-                       (self.taper_length ,- 0.5*self.shallow_wg_width),
-                       (self.taper_length +0.1 ,- 0.5*self.shallow_wg_width- 0.5 * wt),
-                       (self.taper_length ,- 0.5*self.shallow_wg_width - wt),
-                       (0.5*self.taper_length ,- 0.25*(self.shallow_wg_width +apw) - max(wt, apt)),
-                       (0.0,- 0.5*apw- apt),
+                       (0.5*self.taper_length, 0.25*(self.shallow_wg_width +apw) + max(wt, apt)),
+                       (self.taper_length, + 0.5*self.shallow_wg_width + wt),
+                       (self.taper_length +0.1, + 0.5*self.shallow_wg_width+ 0.5 *wt),
+                       (self.taper_length, + 0.5*self.shallow_wg_width),
+                       (self.taper_length, - 0.5*self.shallow_wg_width),
+                       (self.taper_length +0.1, - 0.5*self.shallow_wg_width- 0.5 * wt),
+                       (self.taper_length, - 0.5*self.shallow_wg_width - wt),
+                       (0.5*self.taper_length, - 0.25*(self.shallow_wg_width +apw) - max(wt, apt)),
+                       (0.0, - 0.5*apw- apt),
                        (- 0.1, -0.5*apw - 0.5* apt),                       
-                       (0.0,- 0.5*apw)],
+                       (0.0, - 0.5*apw)],
                       closed = True)
         S.translate(self.center)
         elems += Boundary(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), S)
 
         # deep part
-        W = Wedge(PPLayer(self.deep_process,TECH.PURPOSE.LF.LINE), 
-                        (self.center[0] +  (self.taper_length - self.deep_taper_length),self.center[1]), 
+        W = Wedge(PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
+                        (self.center[0] +  (self.taper_length - self.deep_taper_length), self.center[1]), 
                         (self.center[0] + self.taper_length, self.center[1]), 
                         self.deep_taper_width, 
                         ww)
@@ -194,17 +194,17 @@
         S = Shape([(self.taper_length - self.deep_taper_length, + 0.5*self.deep_taper_width),
                        (self.taper_length - self.deep_taper_length-0.1, + 0.5*self.deep_taper_width + 0.5*apt),
                        (self.taper_length - self.deep_taper_length, + 0.5*self.deep_taper_width + apt),
-                       (self.taper_length - 0.5*self.deep_taper_length  ,0.25*(ww +self.deep_taper_width) + wt),
-                       (self.taper_length ,+ 0.5*ww + wt),
-                       (self.taper_length +0.1,+ 0.5*ww + 0.5*wt),
-                       (self.taper_length ,+ 0.5*ww),
-                       (self.taper_length ,- 0.5*ww),
-                       (self.taper_length +0.1,- 0.5*ww-0.5* wt),
-                       (self.taper_length ,- 0.5*ww - wt),
-                       (self.taper_length - 0.5*self.deep_taper_length  ,- 0.25*(ww +self.deep_taper_width) - wt),
-                       (self.taper_length - self.deep_taper_length,- 0.5*self.deep_taper_width- apt),
+                       (self.taper_length - 0.5*self.deep_taper_length, 0.25*(ww +self.deep_taper_width) + wt),
+                       (self.taper_length, + 0.5*ww + wt),
+                       (self.taper_length +0.1, + 0.5*ww + 0.5*wt),
+                       (self.taper_length, + 0.5*ww),
+                       (self.taper_length, - 0.5*ww),
+                       (self.taper_length +0.1, - 0.5*ww-0.5* wt),
+                       (self.taper_length, - 0.5*ww - wt),
+                       (self.taper_length - 0.5*self.deep_taper_length, - 0.25*(ww +self.deep_taper_width) - wt),
+                       (self.taper_length - self.deep_taper_length, - 0.5*self.deep_taper_width- apt),
                        (self.taper_length - self.deep_taper_length-0.1, - 0.5*self.deep_taper_width - 0.5*apt),
-                       (self.taper_length - self.deep_taper_length,- 0.5*self.deep_taper_width)],RefactoringTool: Writing converted ipkiss24\picazzo\wg\aperture\layout.py to ipkissat3\picazzo\wg\aperture\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\aperture_multi\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\aperture_multi\__init__.py to ipkissat3\picazzo\wg\aperture_multi\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\aperture_multi\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\aperture_multi\layout.py to ipkissat3\picazzo\wg\aperture_multi\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\bend\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\bend\__init__.py to ipkissat3\picazzo\wg\bend\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\bend\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\bend\layout.py to ipkissat3\picazzo\wg\bend\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\coupler\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\coupler\__init__.py to ipkissat3\picazzo\wg\coupler\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\coupler\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\coupler\layout.py to ipkissat3\picazzo\wg\coupler\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\crossing\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\crossing\__init__.py to ipkissat3\picazzo\wg\crossing\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\crossing\layout.py

+                       (self.taper_length - self.deep_taper_length, - 0.5*self.deep_taper_width)],
                       closed = True)
         S.translate(self.center)
         elems += Boundary(PPLayer(self.deep_process, TECH.PURPOSE.LF_AREA), S)
@@ -219,7 +219,7 @@
                               (0, -0.5*self.deep_taper_width),
                               (0, 0.5*self.deep_taper_width),
                               (0, 0.5*self.deep_taper_width+ self.ap_def.trench_width)]
-                              ).rotate((0.0,0.0),self.aperture_angle).move(self.center)
+                              ).rotate((0.0, 0.0), self.aperture_angle).move(self.center)
                 
         
     def define_ports(self, ports):
--- ipkiss24\picazzo\wg\aperture_multi\__init__.py	(original)
+++ ipkiss24\picazzo\wg\aperture_multi\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\aperture_multi\layout.py	(original)
+++ ipkiss24\picazzo\wg\aperture_multi\layout.py	(refactored)
@@ -42,7 +42,7 @@
     trans = DefinitionProperty(fdef_name = "define_trans")
 
     def define_name(self):
-        p  = "".join(["%f,%f,%f" %(v.x, v.y,v.angle_deg) for v in self.vectors])
+        p  = "".join(["%f,%f,%f" %(v.x, v.y, v.angle_deg) for v in self.vectors])
         dl = "".join([str(i) for i in self.dummy_list])
         
         return "%s_V%d_%d" % (self.__name_prefix__, 
@@ -66,10 +66,10 @@
     apertures_1d = RestrictedListProperty(allowed_types = [__WgAperture__], required = True)
     
     def define_name(self):
-        p  = "".join(["%f,%f,%f" %(v.x, v.y,v.angle_deg) for v in self.vectors])
+        p  = "".join(["%f,%f,%f" %(v.x, v.y, v.angle_deg) for v in self.vectors])
         n = "".join([A.name for A in self.apertures_1d])
         dl = "".join([str(i) for i in self.dummy_list])        
-        return "%s_%d_V%d_%d" % (self.__name_prefix__,do_hash(n), do_hash(p) , do_hash(dl))
+        return "%s_%d_V%d_%d" % (self.__name_prefix__, do_hash(n), do_hash(p), do_hash(dl))
 
     def define_elements(self, elems):
         for i in range(len(self.trans)):
@@ -94,7 +94,7 @@
     
     
     def define_name(self):
-        p  = "".join(["%f,%f,%f" %(v.x, v.y,v.angle_deg) for v in self.vectors])
+        p  = "".join(["%f,%f,%f" %(v.x, v.y, v.angle_deg) for v in self.vectors])
         dl = "".join([str(i) for i in self.dummy_list])
         return "%s_%s_V%d_%d" % (self.__name_prefix__, self.aperture_1d.name, do_hash(p), do_hash(dl))
     
@@ -240,7 +240,7 @@
             
     if D < 1.5*TECH.TECH.MINIMUM_SPACE:
         # too close for technology: add correction
-        es = ShapeStub(original_shape = [S1[0], intersection(S1[0], S1[1], S0[0], S0[1]), S0[0]], stub_width = max(D,TECH.TECH.MINIMUM_SPACE)+2*0.015)
+        es = ShapeStub(original_shape = [S1[0], intersection(S1[0], S1[1], S0[0], S0[1]), S0[0]], stub_width = max(D, TECH.TECH.MINIMUM_SPACE)+2*0.015)
         astub = angle_deg(es[1], es[2])
         sh0 = Shape([S0[1], S1[1], es[1].move_polar_copy(0.015, astub+180.0), es[2].move_polar_copy(0.015, astub), es[2].move_polar_copy(TECH.TECH.MINIMUM_SPACE, A0[0]+180.0) ])
         sh1 = Shape([S1[1], S0[1], es[2].move_polar_copy(0.015, astub), es[1].move_polar_copy(0.015, astub+180.0), es[1].move_polar_copy(TECH.TECH.MINIMUM_SPACE, A1[0]+180.0) ])
@@ -372,19 +372,19 @@
             ##### T1 #####
             shape0 = Shape([S0[2], S0[1], S0[0]])
             shape1 = Shape([S1[-1], S1[0], S1[1]])
-            (T1sh, el, sh0, sh1) = hull_inversion_segment(shape0, shape1, in_trench_width,stub_sharp_angles[0])
+            (T1sh, el, sh0, sh1) = hull_inversion_segment(shape0, shape1, in_trench_width, stub_sharp_angles[0])
             T1 += T1sh
             elements += el
 
             ##### T2 #####
             shape0 = Shape([S0[L0-1], S0[L0], S0[L0+1]])
             shape1 = Shape([S1[(L1+2)%(2*L1)], S1[L1+1], S1[L1]])
-            (T2sh, el, sh2, sh3) = hull_inversion_segment(shape0, shape1, out_trench_width,stub_sharp_angles[1])
+            (T2sh, el, sh2, sh3) = hull_inversion_segment(shape0, shape1, out_trench_width, stub_sharp_angles[1])
             T2 += T2sh
             elements += el
 
             # add local inversion layer (not one monolithic shape to avoid cutting
-            elements += Boundary(PPLayer(process,TECH.PURPOSE.LF_AREA), T1 + T2.reversed())
+            elements += Boundary(PPLayer(process, TECH.PURPOSE.LF_AREA), T1 + T2.reversed())
             T1 = T1sh
             T2 = T2sh
 
@@ -420,7 +420,7 @@
         p2 = p1.move_polar_copy(in_trench_width, A1[0] )
         shape0 = Shape([S1[2], S1[1], S1[0]])
         shape1 = Shape([p0, p1, p2])
-        (T1sh, el, sh0, sh1) = hull_inversion_segment(shape0, shape1, in_trench_width,stub_sharp_angles[0])
+        (T1sh, el, sh0, sh1) = hull_inversion_segment(shape0, shape1, in_trench_width, stub_sharp_angles[0])
         T1 += T1sh
         T1 += [p0]
                             
--- ipkiss24\picazzo\wg\bend\__init__.py	(original)
+++ ipkiss24\picazzo\wg\bend\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\bend\layout.py	(original)
+++ ipkiss24\picazzo\wg\bend\layout.py	(refactored)
@@ -76,7 +76,7 @@
     @cache()
     def get_connect_wg_definition(self):
         return WaveguidePointRoundedConnectElementDefinition(wg_definition = self.wg_definition, 
-                                                             bend_radius = self.bend_radius ,
+                                                             bend_radius = self.bend_radius,
                                                              rounding_algorithm = self.rounding_algorithm,
                                                              manhattan = self.manhattan) 
 
@@ -128,7 +128,7 @@
             start_angle = (self.quadrant) * 90
 
         return WgElBend(start_angle = start_angle,
-                        bend_radius = self.bend_radius ,
+                        bend_radius = self.bend_radius,
                         angle = angle,
                         wg_definition = self.wg_definition,
                         rounding_algorithm = self.rounding_algorithm,
--- ipkiss24\picazzo\wg\coupler\__init__.py	(original)
+++ ipkiss24\picazzo\wg\coupler\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\coupler\layout.py	(original)
+++ ipkiss24\picazzo\wg\coupler\layout.py	(refactored)
@@ -64,8 +64,8 @@
 
     def define_waveguides(self):
         waveguides = [
-            self.wg_definition1([(0.0, -0.5*self.spacing ),(self.length, -0.5*self.spacing )]),
-            self.wg_definition2([(0.0, +0.5*self.spacing ),(self.length, 0.5*self.spacing )])
+            self.wg_definition1([(0.0, -0.5*self.spacing ), (self.length, -0.5*self.spacing )]),
+            self.wg_definition2([(0.0, +0.5*self.spacing ), (self.length, 0.5*self.spacing )])
             ]
         return waveguides 
         
--- ipkiss24\picazzo\wg\crossing\__init__.py	(original)
+++ ipkiss24\picazzo\wg\crossing\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\crossing\layout.py	(original)
+++ ipkiss24\picazzo\wg\crossing\layout.py	(refactored)
@@ -86,7 +86,7 @@
                                 end_width = self.deep_width)
         elems += ParabolicWedge(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
                                 begin_coord = (0.0, 0.0), 
-                                end_coord = (0.5*length , 0.0), 
+                                end_coord = (0.5*length, 0.0), 
                                 begin_width = self.deep_width, 
                                 end_width = wg_width)
         elems += ParabolicWedge(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), RefactoringTool: Writing converted ipkiss24\picazzo\wg\crossing\layout.py to ipkissat3\picazzo\wg\crossing\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\grating\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\grating\__init__.py to ipkissat3\picazzo\wg\grating\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\grating\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\grating\layout.py to ipkissat3\picazzo\wg\grating\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\sbend\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\sbend\__init__.py to ipkissat3\picazzo\wg\sbend\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\sbend\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\sbend\layout.py to ipkissat3\picazzo\wg\sbend\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\spiral\__init__.py

@@ -102,7 +102,7 @@
         if self.straight_stub > 0.0:
             elems += Line(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
                           begin_coord = ( - self.straight_stub -0.5*length, 0.0), 
-                          end_coord = (0.5*self.length,0.0), 
+                          end_coord = (0.5*self.length, 0.0), 
                           line_width = wg_width)
             elems += Line(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
                           begin_coord = (0.0, -0.5 * length - self.straight_stub ), 
@@ -110,7 +110,7 @@
                           line_width = wg_width)
             elems += Line(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
                           begin_coord = ( 0.5*length, 0.0), 
-                          end_coord = (0.5*length + self.straight_stub,0.0), 
+                          end_coord = (0.5*length + self.straight_stub, 0.0), 
                           line_width = wg_width)
             elems += Line(layer = PPLayer(self.deep_process, TECH.PURPOSE.LF.LINE), 
                           begin_coord = (0.0, 0.5 * length + self.straight_stub), 
@@ -132,24 +132,24 @@
         
         # FC
         elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (-0.5*length, 0.0), (0.0, 0.0), wg_width, self.shallow_width)
-        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.0), (0.5*length , 0.0), self.shallow_width, wg_width)
+        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.0), (0.5*length, 0.0), self.shallow_width, wg_width)
         elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.5*length), (0.0, 0.0), wg_width, self.shallow_width)
-        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.0), (0.0 , -0.5*length), self.shallow_width, wg_width)
+        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.0), (0.0, -0.5*length), self.shallow_width, wg_width)
         W1 = min(wg_width + 2*self.shallow_trench_width, self.length)
         W2 = min(self.deep_width+ 2*self.shallow_trench_width, self.length)
         elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (-0.5*length, 0.0), (0.0, 0.0), W1, W2)
-        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.0), (0.5*length , 0.0), W2, W1)
+        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.0), (0.5*length, 0.0), W2, W1)
         elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.5*length), (0.0, 0.0), W1, W2)
-        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.0), (0.0 , -0.5*length), W2, W1)
+        elems += ParabolicWedge(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.0), (0.0, -0.5*length), W2, W1)
         
-        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), ( - self.straight_stub -0.5*length, 0.0), (-0.5*self.length,0.0), wg_width)
+        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), ( - self.straight_stub -0.5*length, 0.0), (-0.5*self.length, 0.0), wg_width)
         elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, -0.5 * length - self.straight_stub ), (0.0, -0.5 * length), wg_width)
-        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), ( 0.5*length, 0.0), (0.5*length + self.straight_stub,0.0), wg_width)
+        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), ( 0.5*length, 0.0), (0.5*length + self.straight_stub, 0.0), wg_width)
         elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF.LINE), (0.0, 0.5 * length + self.straight_stub), (0.0*length, 0.5 * length), wg_width)
 
-        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), ( - self.straight_stub -0.5*length, 0.0), (-0.5*self.length,0.0), W1)
+        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), ( - self.straight_stub -0.5*length, 0.0), (-0.5*self.length, 0.0), W1)
         elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, -0.5 * length - self.straight_stub ), (0.0, -0.5 * length), W1)
-        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), ( 0.5*length, 0.0), (0.5*length + self.straight_stub,0.0), W1)
+        elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), ( 0.5*length, 0.0), (0.5*length + self.straight_stub, 0.0), W1)
         elems += Line(PPLayer(self.shallow_process, TECH.PURPOSE.LF_AREA), (0.0, 0.5 * length + self.straight_stub), (0.0*length, 0.5 * length), W1)
         return elems
         
--- ipkiss24\picazzo\wg\grating\__init__.py	(original)
+++ ipkiss24\picazzo\wg\grating\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\grating\layout.py	(original)
+++ ipkiss24\picazzo\wg\grating\layout.py	(refactored)
@@ -54,7 +54,7 @@
     
     def define_ports(self, prts):
         prts += [OpticalPort(position = (0.0, 0.0), angle = -180.0, wg_definition = self.wg_definition),
-                OpticalPort(position = (self.length,0.0), angle = 0.0, wg_definition = self.wg_definition)]
+                OpticalPort(position = (self.length, 0.0), angle = 0.0, wg_definition = self.wg_definition)]
         return prts
         
     
@@ -88,7 +88,7 @@
         
 def wg_grating_period_rect(length, wg_width, wide_width, narrow_width, fill_factor = 0.5, trench_width=2.0, process = TECH.PROCESS.WG):
     """ a waveguide grating period with a rectagular tooth """
-    return WgGratingPeriodBlocks(wg_width, [Coord2(narrow_width, 0.5*length * (1-fill_factor)), Coord2(wide_width, length * fill_factor), Coord2(narrow_width, 0.5*length * (1-fill_factor))], trench_width, process , library)
+    return WgGratingPeriodBlocks(wg_width, [Coord2(narrow_width, 0.5*length * (1-fill_factor)), Coord2(wide_width, length * fill_factor), Coord2(narrow_width, 0.5*length * (1-fill_factor))], trench_width, process, library)
 
 
 class WgGratingPeriodShallow(__WgGratingPeriod__):
@@ -100,7 +100,7 @@
         
     def define_elements(self, elems):
         elems += self.wg_definition(shape = [(0.0, 0.0), (self.length, 0.0) ])
-        elems += Rectangle(PPLayer(self.shallow_process, TECH.PURPOSE.DF.TRENCH),(0.5*self.length, 0.0), (self.fill_factor * self.length, 2* self.wg_definition.wg_width))
+        elems += Rectangle(PPLayer(self.shallow_process, TECH.PURPOSE.DF.TRENCH), (0.5*self.length, 0.0), (self.fill_factor * self.length, 2* self.wg_definition.wg_width))
         return elems
 
     def define_ports(self, prts):
@@ -116,8 +116,8 @@
         
     def define_elements(self, elems):
         elems += self.wg_definition(shape = [(0.0, 0.0), (self.length, 0.0) ])
-        elems += Rectangle(PPLayer(self.process, TECH.PURPOSE.LF.LINE),(0.5*self.length, 0.5* self.wg_definition.wg_width + self.block_spacing + 0.5 * self.block_size[1]), self.block_size)
-        elems += Rectangle(PPLayer(self.process, TECH.PURPOSE.LF.LINE),(0.5*self.length, -0.5* self.wg_definition.wg_width - self.block_spacing - 0.5 * self.block_size[1]), self.block_size)
+        elems += Rectangle(PPLayer(self.process, TECH.PURPOSE.LF.LINE), (0.5*self.length, 0.5* self.wg_definition.wg_width + self.block_spacing + 0.5 * self.block_size[1]), self.block_size)
+        elems += Rectangle(PPLayer(self.process, TECH.PURPOSE.LF.LINE), (0.5*self.length, -0.5* self.wg_definition.wg_width - self.block_spacing - 0.5 * self.block_size[1]), self.block_size)
         return elems
 
     def define_ports(self, prts):
--- ipkiss24\picazzo\wg\sbend\__init__.py	(original)
+++ ipkiss24\picazzo\wg\sbend\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\spiral\__init__.py	(original)RefactoringTool: Writing converted ipkiss24\picazzo\wg\spiral\__init__.py to ipkissat3\picazzo\wg\spiral\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\spiral\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\spiral\layout.py to ipkissat3\picazzo\wg\spiral\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\spline_coupler\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\spline_coupler\__init__.py to ipkissat3\picazzo\wg\spline_coupler\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\spline_coupler\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\spline_coupler\layout.py to ipkissat3\picazzo\wg\spline_coupler\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\splitter_tree\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\splitter_tree\__init__.py to ipkissat3\picazzo\wg\splitter_tree\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\splitter_tree\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\splitter_tree\layout.py to ipkissat3\picazzo\wg\splitter_tree\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\splitters\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\splitters\__init__.py to ipkissat3\picazzo\wg\splitters\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\splitters\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\splitters\layout.py to ipkissat3\picazzo\wg\splitters\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\taper\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\taper\__init__.py to ipkissat3\picazzo\wg\taper\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\taper\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\taper\layout.py to ipkissat3\picazzo\wg\taper\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\taper_extended\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\taper_extended\__init__.py to ipkissat3\picazzo\wg\taper_extended\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\taper_extended\layout.py

+++ ipkiss24\picazzo\wg\spiral\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\spiral\layout.py	(original)
+++ ipkiss24\picazzo\wg\spiral\layout.py	(refactored)
@@ -254,7 +254,7 @@
             #L_out = self.spacing + bs2
         else:
             L_out = self.spacing + bs2
-        sh = Shape([(0.0,0.0), 
+        sh = Shape([(0.0, 0.0), 
                         (self.inc_length + OS - S, 0.0),
                         (self.inc_length + OS - S, self.spiral_center.y  - 0.5 * OLS[1] - S + bs1)
                     ])
@@ -287,7 +287,7 @@
     def n_o_bends(self):
         return super(WaveguideDoubleSpiralWithIncoupling, self).n_o_bends() + 2
 
-    def define_ports(self,prts):
+    def define_ports(self, prts):
         prts += self.waveguides[-2].in_ports 
         #prts += self.waveguides[-1].in_ports.invert_copy()
         prts += self.waveguides[-1].out_ports
--- ipkiss24\picazzo\wg\spline_coupler\layout.py	(original)
+++ ipkiss24\picazzo\wg\spline_coupler\layout.py	(refactored)
@@ -31,7 +31,7 @@
 
 def PartialProperty(internal_member_name= None, restriction = None,**kwargs):    
     R = restrictions.RestrictType(functools.partial) & restriction
-    P = RestrictedProperty(internal_member_name, restriction = R,**kwargs)   
+    P = RestrictedProperty(internal_member_name, restriction = R, **kwargs)   
     P.__get_default__ = lambda : P.default
     return P
 
@@ -51,17 +51,17 @@
         return (bend_size[0]+0.01, bend_size[1]+0.01)
 
     def define_elements(self, elems):
-        super(SplineDirectionalCoupler,self).define_elements(elems)
+        super(SplineDirectionalCoupler, self).define_elements(elems)
         SI = elems.size_info()
-        elems += Rectangle(layer = PPLayer(self.wg_definition1.process,TECH.PURPOSE.LF_AREA),
+        elems += Rectangle(layer = PPLayer(self.wg_definition1.process, TECH.PURPOSE.LF_AREA),
                            center = SI.center, box_size = (SI.width, SI.height))
         return elems
     
     def define_waveguides(self):
-        (bs1,bs2) = self.get_bend90_size()
+        (bs1, bs2) = self.get_bend90_size()
         rect_size = (bs1+self.length, bs2)
-        S = Shape([(-bs1-0.5*self.length,-bs2),(-bs1-0.5*self.length,0.0),(-0.5*self.length,0.0),
-                   (0.5*self.length,0.0),(bs1+0.5*self.length,0.0),(bs1+0.5*self.length,-bs2)])
+        S = Shape([(-bs1-0.5*self.length, -bs2), (-bs1-0.5*self.length, 0.0), (-0.5*self.length, 0.0),
+                   (0.5*self.length, 0.0), (bs1+0.5*self.length, 0.0), (bs1+0.5*self.length, -bs2)])
         S = ShapeRoundAdiabaticSplineGeneric(original_shape = S,
                                              radii = [self.bend_radius for i in range(len(S))],
                                              adiabatic_angles_list = [(self.adiabatic_angle_in_access, self.adiabatic_angle_in_access),
@@ -71,7 +71,7 @@
                                                                       (self.adiabatic_angle_in_coupler, self.adiabatic_angle_in_access),
                                                                       (self.adiabatic_angle_in_access, self.adiabatic_angle_in_access)]
                                              )
-        S.move((0.0,-0.5*self.spacing))
+        S.move((0.0, -0.5*self.spacing))
         S2 = S.transform_copy(VMirror())
         waveguides = [self.wg_definition1(shape = S),
                       self.wg_definition2(shape = S2)
--- ipkiss24\picazzo\wg\splitter_tree\__init__.py	(original)
+++ ipkiss24\picazzo\wg\splitter_tree\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\splitter_tree\layout.py	(original)
+++ ipkiss24\picazzo\wg\splitter_tree\layout.py	(refactored)
@@ -115,9 +115,9 @@
                 c2i = c2.in_ports[0]
                 c1o = c1.out_ports[0]
                 c2o = c2.out_ports[0]
-                xl = min(c1i.position.x,c2i.position.x)+0.5*c1.shape.start_straight
+                xl = min(c1i.position.x, c2i.position.x)+0.5*c1.shape.start_straight
                 yl = 0.5*(c1i.position.y+c2i.position.y)
-                xr = max(c1o.position.x,c2o.position.x)-0.5*c1.shape.end_straight
+                xr = max(c1o.position.x, c2o.position.x)-0.5*c1.shape.end_straight
                 wp = abs(c2o.position.y-c1o.position.y)+0.5*(c1o.wg_definition.wg_width+c2o.wg_definition.wg_width)+c1o.wg_definition.trench_width+c2o.wg_definition.trench_width
                 ## patches necessary??? probably depends on the splitter you take
                 #P += [Line(layer=PPLayer(self.splitter.wg_definition.process, TECH.PURPOSE.LF_AREA),begin_coord=(xl,yl),end_coord=(xr,yl),line_width=wp)]
@@ -129,7 +129,7 @@
             patches += [P]
             splitter_transforms += T2
             T = T2
-        return (patches,connectors,splitter_transforms)
+        return (patches, connectors, splitter_transforms)
         
     def define_patches(self):        
         return self.patches_connectors_splitter_transforms[0]
--- ipkiss24\picazzo\wg\splitters\__init__.py	(original)
+++ ipkiss24\picazzo\wg\splitters\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\splitters\layout.py	(original)
+++ ipkiss24\picazzo\wg\splitters\layout.py	(refactored)
@@ -79,7 +79,7 @@
         a1 = RAD2DEG * acos((self.bend_radius-0.07+ 0.5*wg_width)/(self.bend_radius+0.5 * wg_width + trench_width))
         shape_inv = ShapeArc(center = (0.0, 0.5 * wg_width + self.bend_radius), 
                                radius = self.bend_radius + 0.5 * wg_width + trench_width, 
-                               start_angle = -90.0+a1 , 
+                               start_angle = -90.0+a1, 
                                end_angle = 0, 
                                clockwise = False)
 
--- ipkiss24\picazzo\wg\taper\__init__.py	(original)
+++ ipkiss24\picazzo\wg\taper\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\taper_extended\__init__.py	(original)
+++ ipkiss24\picazzo\wg\taper_extended\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\taper_extended\layout.py	(original)
+++ ipkiss24\picazzo\wg\taper_extended\layout.py	(refactored)
@@ -45,50 +45,50 @@
     
     def define_taper(self) :
         tech = get_technology()
-        if hasattr(tech.PROCESS,'RFC'): # FIXME: dirty modular import
+        if hasattr(tech.PROCESS, 'RFC'): # FIXME: dirty modular import
             hasraised = True
         else:
             hasraised = False
         # Case: same waveguide definitions ...
-        if type(self.end_wg_def)==type(self.start_port.wg_definition) :
+        if isinstance(self.end_wg_def, type(self.start_port.wg_definition)) :
             taper = WgElPortTaperLinear(start_port=self.start_port, end_wg_def=self.end_wg_def, straight_extension=self.straight_extension)
         # Case: special tapering structures ...
-        elif (hasraised and type(self.start_port.wg_definition) == RaisedWGFCWgElDefinition) and (type(self.end_wg_def) == WGFCWgElDefinition) :
+        elif (hasraised and isinstance(self.start_port.wg_definition, RaisedWGFCWgElDefinition)) and (isinstance(self.end_wg_def, WGFCWgElDefinition)) :
                 taper = RaisedWGFCToWGFCPortTaper(start_port=self.start_port, 
                                                  end_wg_def=self.end_wg_def, 
                                                  straight_extension=self.straight_extension)
-        elif (hasraised and type(self.start_port.wg_definition) == WGFCWgElDefinition) and (type(self.end_wg_def) == RaisedWGFCWgElDefinition) :
+        elif (hasraised and isinstance(self.start_port.wg_definition, WGFCWgElDefinition)) and (isinstance(self.end_wg_def, RaisedWGFCWgElDefinition)) :RefactoringTool: Writing converted ipkiss24\picazzo\wg\taper_extended\layout.py to ipkissat3\picazzo\wg\taper_extended\layout.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\tapers\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\__init__.py to ipkissat3\picazzo\wg\tapers\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\tapers\auto_taper\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\auto_taper\__init__.py to ipkissat3\picazzo\wg\tapers\auto_taper\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper.py to ipkissat3\picazzo\wg\tapers\auto_taper\auto_taper.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper_db.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper_db.py to ipkissat3\picazzo\wg\tapers\auto_taper\auto_taper_db.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\basic\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\basic\__init__.py to ipkissat3\picazzo\wg\tapers\basic\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\basic\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\basic\layout.py to ipkissat3\picazzo\wg\tapers\basic\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\deep_shallow\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\deep_shallow\__init__.py to ipkissat3\picazzo\wg\tapers\deep_shallow\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\tapers\deep_shallow\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\deep_shallow\layout.py to ipkissat3\picazzo\wg\tapers\deep_shallow\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\linear\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\linear\__init__.py to ipkissat3\picazzo\wg\tapers\linear\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\linear\layout.py

                 #we manually create a new port in the opposite direction and flip the straight_extensions, so that we can use the same class 'RaisedWGFCToWGFCPortTaper'
-                new_port = OpticalPort(position=(0.0,0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
+                new_port = OpticalPort(position=(0.0, 0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
                 taper = RaisedWGFCToWGFCPortTaper(start_port=new_port, 
                                                   end_wg_def=self.start_port.wg_definition, 
                                                   straight_extension=(self.straight_extension[1], self.straight_extension[0]))
                 taper = Translation(translation=self.start_position.move_polar_copy(self.length, self.start_port.angle_deg))(taper)
-        elif (hasraised and type(self.start_port.wg_definition) == RaisedFCWgElDefinition) and (type(self.end_wg_def) == WgElDefinition) :
+        elif (hasraised and isinstance(self.start_port.wg_definition, RaisedFCWgElDefinition)) and (isinstance(self.end_wg_def, WgElDefinition)) :
                 return RaisedFCToWgElPortTaper(start_port=self.start_port, end_wg_def=self.end_wg_def, straight_extension=self.straight_extension)
-        elif (hasraised and type(self.start_port.wg_definition) == RaisedWgElDefinition) and (type(self.end_wg_def) == WgElDefinition) :
+        elif (hasraised and isinstance(self.start_port.wg_definition, RaisedWgElDefinition)) and (isinstance(self.end_wg_def, WgElDefinition)) :
                 taper = RaisedWgElToWgElPortTaper(start_port=self.start_port, 
                                                  end_wg_def=self.end_wg_def, 
                                                  straight_extension=self.straight_extension)
-        elif hasraised and (type(self.start_port.wg_definition) == WgElDefinition) :
-            if type(self.end_wg_def) == RaisedFCWgElDefinition :
+        elif hasraised and (isinstance(self.start_port.wg_definition, WgElDefinition)) :
+            if isinstance(self.end_wg_def, RaisedFCWgElDefinition) :
                 #we manually create a new port in the opposite direction and flip the straight_extensions, so that we can use the same class 'RaisedFCToWgElPortTaper'
-                new_port = OpticalPort(position=(0.0,0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
+                new_port = OpticalPort(position=(0.0, 0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
                 taper = RaisedFCToWgElPortTaper(start_port=new_port, 
                                                 end_wg_def=self.start_port.wg_definition, 
                                                 straight_extension=(self.straight_extension[1], self.straight_extension[0]))
                 return Translation(translation=self.start_position.move_polar_copy(self.length, self.start_port.angle_deg))(taper)
-            elif type(self.end_wg_def) == RaisedWgElDefinition :
+            elif isinstance(self.end_wg_def, RaisedWgElDefinition) :
                 #we manually create a new port in the opposite direction and flip the straight_extensions, so that we can use the same class 'RaisedWgElToWgElPortTaper'
-                new_port = OpticalPort(position=(0.0,0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
+                new_port = OpticalPort(position=(0.0, 0.0), wg_definition=self.end_wg_def, angle=self.start_port.angle+180.0)
                 taper = RaisedWgElToWgElPortTaper(start_port=new_port, 
                                                   end_wg_def=self.start_port.wg_definition, 
                                                   straight_extension=(self.straight_extension[1], self.straight_extension[0]))
                 taper = Translation(translation=self.start_position.move_polar_copy(self.length, self.start_port.angle_deg))(taper)
             else :
-                raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition,self.end_wg_def))
+                raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition, self.end_wg_def))
         else :
-            raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition,self.end_wg_def))
+            raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition, self.end_wg_def))
         if (self.__property_was_externally_set__("length")):
             taper.length = self.length
         return taper                
@@ -103,5 +103,5 @@
     
 # FIXME: Backward compatibility. This module originally contained these classes    
 TECH = get_technology()
-if hasattr(TECH.PROCESS,'RFC'):
+if hasattr(TECH.PROCESS, 'RFC'):
     from ..wgdefs.raised.tapers import RaisedFCToWgElPortTaper, RaisedWgElToWgElPortTaper, RaisedWGFCToWGFCPortTaper
--- ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper.py	(original)
+++ ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper.py	(refactored)
@@ -59,7 +59,7 @@
     def define_taper(self) :
         tc = self.taper_class
         if tc is None:
-            raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition,self.end_wg_def))
+            raise Exception("No taper could be generated between between waveguide types %s and %s." %(self.start_port.wg_definition, self.end_wg_def))
         swapped = self.swapped
         
         if swapped:
--- ipkiss24\picazzo\wg\tapers\basic\__init__.py	(original)
+++ ipkiss24\picazzo\wg\tapers\basic\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\tapers\basic\layout.py	(original)
+++ ipkiss24\picazzo\wg\tapers\basic\layout.py	(refactored)
@@ -63,7 +63,7 @@
         return ports    
     
     def validate_properties(self):
-        if type(self.start_wg_def) != type(self.end_wg_def):
+        if not isinstance(self.start_wg_def, type(self.end_wg_def)):
             raise AttributeError("The start and end waveguide definition should be of the same type.")
         return True    
     
--- ipkiss24\picazzo\wg\tapers\deep_shallow\__init__.py	(original)
+++ ipkiss24\picazzo\wg\tapers\deep_shallow\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\tapers\linear\__init__.py	(original)
+++ ipkiss24\picazzo\wg\tapers\linear\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\tapers\linear\layout.py	(original)
+++ ipkiss24\picazzo\wg\tapers\linear\layout.py	(refactored)
@@ -32,14 +32,14 @@
         angle = angle_deg(end_position, start_position)
         dist = distance(start_position, end_position)
         
-        var_poly = Shape([(start_position[0],start_window.start_offset+start_position[1]), 
-                    (start_position[0]-straight_extension[0],start_window.start_offset+start_position[1]),
-                    (start_position[0]-straight_extension[0],start_window.end_offset+start_position[1]), 
-                    (start_position[0],start_window.end_offset+start_position[1]), 
-                    (start_position[0]+dist,end_window.end_offset+start_position[1]), 
-                    (start_position[0]+dist+straight_extension[1],end_window.end_offset+start_position[1]), 
-                    (start_position[0]+dist+straight_extension[1],end_window.start_offset+start_position[1]),
-                    (start_position[0]+dist,end_window.start_offset+start_position[1])])
+        var_poly = Shape([(start_position[0], start_window.start_offset+start_position[1]), 
+                    (start_position[0]-straight_extension[0], start_window.start_offset+start_position[1]),RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\linear\layout.py to ipkissat3\picazzo\wg\tapers\linear\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\tapers\parabolic\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\parabolic\__init__.py to ipkissat3\picazzo\wg\tapers\parabolic\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\tapers\parabolic\layout.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\tapers\parabolic\layout.py to ipkissat3\picazzo\wg\tapers\parabolic\layout.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdef\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdef\__init__.py to ipkissat3\picazzo\wg\wgdef\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdef\wgdef.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdef\wgdef.py to ipkissat3\picazzo\wg\wgdef\wgdef.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\wgdefs\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\__init__.py to ipkissat3\picazzo\wg\wgdefs\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdefs\slot\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\slot\__init__.py to ipkissat3\picazzo\wg\wgdefs\slot\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdefs\slot\tapers.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\slot\tapers.py to ipkissat3\picazzo\wg\wgdefs\slot\tapers.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\wgdefs\slot\wgdef.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\slot\wgdef.py to ipkissat3\picazzo\wg\wgdefs\slot\wgdef.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdefs\thin\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\thin\__init__.py to ipkissat3\picazzo\wg\wgdefs\thin\__init__.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\wgdefs\thin\tapers.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\thin\tapers.py to ipkissat3\picazzo\wg\wgdefs\thin\tapers.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\wgdefs\thin\wgdef.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\thin\wgdef.py to ipkissat3\picazzo\wg\wgdefs\thin\wgdef.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdefs\wg_fc\__init__.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\wg_fc\__init__.py to ipkissat3\picazzo\wg\wgdefs\wg_fc\__init__.py.
RefactoringTool: Refactored ipkiss24\picazzo\wg\wgdefs\wg_fc\tapers.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\wg_fc\tapers.py to ipkissat3\picazzo\wg\wgdefs\wg_fc\tapers.py.
RefactoringTool: No changes to ipkiss24\picazzo\wg\wgdefs\wg_fc\wgdef.py
RefactoringTool: Writing converted ipkiss24\picazzo\wg\wgdefs\wg_fc\wgdef.py to ipkissat3\picazzo\wg\wgdefs\wg_fc\wgdef.py.
RefactoringTool: No changes to ipkiss24\pysics\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\__init__.py to ipkissat3\pysics\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\__init__.py to ipkissat3\pysics\basics\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\domain.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\domain.py to ipkissat3\pysics\basics\domain.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\environment.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\environment.py to ipkissat3\pysics\basics\environment.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\field.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\field.py to ipkissat3\pysics\basics\field.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\field_profile.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\field_profile.py to ipkissat3\pysics\basics\field_profile.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\waveguide.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\waveguide.py to ipkissat3\pysics\basics\waveguide.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\geometry\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\geometry\__init__.py to ipkissat3\pysics\basics\geometry\__init__.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\geometry\geometry.py

+                    (start_position[0]-straight_extension[0], start_window.end_offset+start_position[1]), 
+                    (start_position[0], start_window.end_offset+start_position[1]), 
+                    (start_position[0]+dist, end_window.end_offset+start_position[1]), 
+                    (start_position[0]+dist+straight_extension[1], end_window.end_offset+start_position[1]), 
+                    (start_position[0]+dist+straight_extension[1], end_window.start_offset+start_position[1]),
+                    (start_position[0]+dist, end_window.start_offset+start_position[1])])
         var_poly_trans = var_poly.rotate(start_position, angle)
         return var_poly_trans
     
--- ipkiss24\picazzo\wg\tapers\parabolic\__init__.py	(original)
+++ ipkiss24\picazzo\wg\tapers\parabolic\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from layout import *
+from .layout import *
--- ipkiss24\picazzo\wg\wgdef\__init__.py	(original)
+++ ipkiss24\picazzo\wg\wgdef\__init__.py	(refactored)
@@ -19,4 +19,4 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from wgdef import *
+from .wgdef import *
--- ipkiss24\picazzo\wg\wgdef\wgdef.py	(original)
+++ ipkiss24\picazzo\wg\wgdef\wgdef.py	(refactored)
@@ -27,7 +27,7 @@
 from ipkiss.technology import get_technology
 TECH = get_technology()
 
-if hasattr(TECH.PROCESS,'RFC'):  # FIXME: dirty - need modular imports
+if hasattr(TECH.PROCESS, 'RFC'):  # FIXME: dirty - need modular imports
     from ..wgdefs.raised import RaisedWgElDefinition, RaisedFCWgElDefinition, RaisedWGFCWgElDefinition
 
 #Naming convention:
--- ipkiss24\picazzo\wg\wgdefs\slot\__init__.py	(original)
+++ ipkiss24\picazzo\wg\wgdefs\slot\__init__.py	(refactored)
@@ -19,5 +19,5 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from wgdef import *
-from tapers import *
+from .wgdef import *
+from .tapers import *
--- ipkiss24\picazzo\wg\wgdefs\slot\tapers.py	(original)
+++ ipkiss24\picazzo\wg\wgdefs\slot\tapers.py	(refactored)
@@ -119,8 +119,8 @@
             
     length = NonNegativeNumberProperty(default = 12.0)
     
-    def define_ports(self,ports):
-        return __WgElPortTaper__.define_ports(self,ports)
+    def define_ports(self, ports):
+        return __WgElPortTaper__.define_ports(self, ports)
 
     
 ##################################
--- ipkiss24\picazzo\wg\wgdefs\thin\__init__.py	(original)
+++ ipkiss24\picazzo\wg\wgdefs\thin\__init__.py	(refactored)
@@ -19,5 +19,5 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from wgdef import *
-from tapers import *
+from .wgdef import *
+from .tapers import *
--- ipkiss24\picazzo\wg\wgdefs\wg_fc\__init__.py	(original)
+++ ipkiss24\picazzo\wg\wgdefs\wg_fc\__init__.py	(refactored)
@@ -19,5 +19,5 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from wgdef import *
-from tapers import *
+from .wgdef import *
+from .tapers import *
--- ipkiss24\picazzo\wg\wgdefs\wg_fc\tapers.py	(original)
+++ ipkiss24\picazzo\wg\wgdefs\wg_fc\tapers.py	(refactored)
@@ -141,20 +141,20 @@
     def define_ports(self, ports):
         angle = angle_deg(self.end_position, self.start_position)
         ports += [InOpticalPort(position = self.start_position, wg_definition = self.start_wg_def, angle = (angle + 180.0)%360.0), 
-                 OutOpticalPort(position = self.end_position.move_polar_copy(0.2,angle_deg(self.end_position, self.start_position)), wg_definition = self.end_wg_def, angle = angle)]
+                 OutOpticalPort(position = self.end_position.move_polar_copy(0.2, angle_deg(self.end_position, self.start_position)), wg_definition = self.end_wg_def, angle = angle)]
         return ports
 
     
 class WgElPortTaperFromShallow(WgElTaperShallowDeep, WgElPortTaperLinear):
     """ Linear taper starting from a shallow port converting it to a deep waveguide """
         
-    def define_ports(self,ports):
-        return WgElPortTaperLinear.define_ports(self,ports)
+    def define_ports(self, ports):
+        return WgElPortTaperLinear.define_ports(self, ports)
     
 class WgElPortTaperToShallow(WgElTaperDeepShallow, WgElPortTaperLinear):
     """ Linear taper starting from a deep port converting it to a shallow waveguide """
-    def define_ports(self,ports):
-        return WgElPortTaperLinear.define_ports(self,ports)
+    def define_ports(self, ports):
+        return WgElPortTaperLinear.define_ports(self, ports)
 
 
 class WGFCWgElToWgElPortTaper(__WgElPortTaper__) :
--- ipkiss24\pysics\basics\field.py	(original)
+++ ipkiss24\pysics\basics\field.py	(refactored)
@@ -36,7 +36,7 @@
 
 class __Field__(Transformable, StrongPropertyInitializer):
     """ abstract base class for a field """
-    def transform(self,transformation):
+    def transform(self, transformation):
         """ transforms a field in a coordinate system: this basically just reverses the rotation """
         R = Rotation(rotation = -transformation.rotation)
         self.value.transform(R) 
@@ -76,7 +76,7 @@
 
 class __CompoundField__(__Field__):
     value = RestrictedProperty(required = True, restriction = RestrictList(RestrictType(__Field__)))
-    def transform(self,transformation):
+    def transform(self, transformation):
         """ transforms a field in a coordinate system: this basically just reverses the rotation """
         for v in self.value:
             v.transform(transformation)
--- ipkiss24\pysics\basics\waveguide.py	(original)
+++ ipkiss24\pysics\basics\waveguide.py	(refactored)
@@ -27,7 +27,7 @@
 
 def WaveguideProperty(internal_member_name= None, restriction = None,**kwargs):
     R = RestrictType(__Waveguide__) & restriction
-    return RestrictedProperty(internal_member_name, restriction = R,**kwargs)
+    return RestrictedProperty(internal_member_name, restriction = R, **kwargs)
 
 class __Mode__(StrongPropertyInitializer):
     """ Abstract base class for waveguide mode """
@@ -38,17 +38,17 @@
     __item_type__ = __Mode__
     
     def __init__(self, modes = [], **kwargs):
-        super(TypedList,self).__init__(**kwargs)
+        super(TypedList, self).__init__(**kwargs)
         self.namedict = dict()
         if isinstance(modes, dict):
             for m in modes:
-                self.append(modes[m],m)
+                self.append(modes[m], m)
         else:
             for m in modes:
                 self += m
     
     def append(self, item, name=None):
-        super(ModeList,self).append(item)
+        super(ModeList, self).append(item)
         self.namedict[name] = item
     
     def get_mode_by_name(self, name):
@@ -58,11 +58,11 @@
             return None
         
     def set_mode_name(self, item, name):
-        if name in self.namedict.keys():
+        if name in list(self.namedict.keys()):
             return
         if not item in self:
             raise ValueError("Mode %s is not in list"%str(item))
-        for (key,it) in self.namedict.iteritems():
+        for (key, it) in self.namedict.items():
             if it == item:
                 it = self.namedict.pop(key)
                 self.namedict[name] = it
@@ -76,7 +76,7 @@
     """ Abstract base class for waveguide keeping a list of modes """
     modes = ModeListProperty(fdef_name='define_modes')
     
-    def define_modes(self,modes):
+    def define_modes(self, modes):
         return modes
     
     
--- ipkiss24\pysics\basics\geometry\geometry.py	(original)
+++ ipkiss24\pysics\basics\geometry\geometry.py	(refactored)
@@ -25,7 +25,7 @@
 from ..environment import EnvironmentProperty, DEFAULT_ENVIRONMENT
 from ipkiss.geometry.size_info import SizeInfoProperty
 
-__all__ = ["GeometryProperty","CartesianGeometry1D","CartesianGeometry2D","CartesianGeometry3D"]
+__all__ = ["GeometryProperty", "CartesianGeometry1D", "CartesianGeometry2D", "CartesianGeometry3D"]
 
 # Geometry Classes
 # This should come in a generic framework
@@ -37,16 +37,16 @@
     
     """ abstract Geometry base class """
     def get_material(self, coordinate):
-        raise AssertionError, "__Geometry__ instance or subclass should have material(self, coordinate) method"RefactoringTool: Writing converted ipkiss24\pysics\basics\geometry\geometry.py to ipkissat3\pysics\basics\geometry\geometry.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\geometry\image.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\geometry\image.py to ipkissat3\pysics\basics\geometry\image.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\geometry\material_stack.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\geometry\material_stack.py to ipkissat3\pysics\basics\geometry\material_stack.py.
RefactoringTool: No changes to ipkiss24\pysics\basics\material\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\material\__init__.py to ipkissat3\pysics\basics\material\__init__.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\material\material.py

+        raise AssertionError("__Geometry__ instance or subclass should have material(self, coordinate) method")
 
     def get_environment(self, coordinate):
-        raise AssertionError, "__Geometry__ instance or subclass should have environment(self, coordinate) method"
+        raise AssertionError("__Geometry__ instance or subclass should have environment(self, coordinate) method")
 
     def size_info(self):
-        raise AssertionError, "__Geometry__ instance or subclass should have size_info() method"
+        raise AssertionError("__Geometry__ instance or subclass should have size_info() method")
     
     def get_material_array(self, **kwargs):
-        raise AssertionError, "__Geometry__ instance or subclass should have get_material_array(self) method"    
+        raise AssertionError("__Geometry__ instance or subclass should have get_material_array(self) method")    
     
     def __repr__(self):
         return "<Geometry %s>" % self.name
--- ipkiss24\pysics\basics\geometry\image.py	(original)
+++ ipkiss24\pysics\basics\geometry\image.py	(refactored)
@@ -47,7 +47,7 @@
     def define_material_grid(self):
         """ equivalent size of one image pixel """
         i = self.material_image
-        return coord2(self.size[0]/i.size[0],self.size[1]/i.size[1])
+        return coord2(self.size[0]/i.size[0], self.size[1]/i.size[1])
     
     def get_material(self, coordinate):
         pixel_coord = (int(self.coordinate[0]/self.grid.x + 0.5), int(self.coordinate[1]/self.grid.y + 0.5))
@@ -96,7 +96,7 @@
         pixel_coord = (int(coordinate[0]/self.grid), int(coordinate[1]/self.grid))  
         try:
             layers_at_coordinate = self.layer_superposition_array[pixel_coord[0], pixel_coord[1]]
-        except IndexError, e: #some engines will request the material 1 step over the border of the simulation volume
+        except IndexError as e: #some engines will request the material 1 step over the border of the simulation volume
             if (pixel_coord[0] >= self.len_0):
                 X = self.len_0 - 1
             else:
@@ -105,7 +105,7 @@
                 Y = self.len_1 - 1
             else:
                 Y = pixel_coord[1]                
-            layers_at_coordinate = self.layer_superposition_array[X,Y]
+            layers_at_coordinate = self.layer_superposition_array[X, Y]
         mat = self.__layers_to_material(layers_at_coordinate)
         return mat
     
@@ -121,7 +121,7 @@
     
     def __init__(self, **kwargs):        
         super(__ProcessSuperpositionMaterialGeometry2D__, self).__init__(**kwargs)
-        self.processes = self.process_flags.keys()
+        self.processes = list(self.process_flags.keys())
         self.processes.sort()
         self.len_0 = self.process_flags[self.processes[0]].shape[0]
         self.len_1 = self.process_flags[self.processes[0]].shape[1]
@@ -149,7 +149,7 @@
         pixel_coord = (int(coordinate[0]/self.grid), int(coordinate[1]/self.grid))  
         try:
             processes_at_coordinate = self.__processes_at_coordinate(pixel_coord)                    
-        except IndexError, e: #some engines will request the material 1 step over the border of the simulation volume
+        except IndexError as e: #some engines will request the material 1 step over the border of the simulation volume
             if (pixel_coord[0] >= self.len_0):
                 X = self.len_0 - 1
             else:
@@ -158,7 +158,7 @@
                 Y = self.len_1 - 1
             else:
                 Y = pixel_coord[1]                
-            processes_at_coordinate = self.__processes_at_coordinate(Coord2(X,Y))                    
+            processes_at_coordinate = self.__processes_at_coordinate(Coord2(X, Y))                    
         mat = self.__processes_to_material(processes_at_coordinate)
         return mat
         
--- ipkiss24\pysics\basics\geometry\material_stack.py	(original)
+++ ipkiss24\pysics\basics\geometry\material_stack.py	(refactored)
@@ -60,7 +60,7 @@
     
     def define_thickness(self):
         z = 0.0
-        for m,h in self.materials_thicknesses:
+        for m, h in self.materials_thicknesses:
             z = z + h
         return z
     
@@ -98,7 +98,7 @@
         return "<MaterialStackGeometry1D %s>" % self.name
     
     def __hash__(self):
-        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m,d in self.materials_thicknesses]))
+        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m, d in self.materials_thicknesses]))
             
 
     def consolidate(self):
@@ -161,21 +161,21 @@
     def size_info(self):
         return SizeInfo(west = self.origin_x, 
                         east = self.origin_x + self.width,
-                        south = min([m.origin_z for m,h in self.stacks_widths]),
-                        north = max([m.origin_z + m.thickness for m,h in self.stacks_widths])
+                        south = min([m.origin_z for m, h in self.stacks_widths]),
+                        north = max([m.origin_z + m.thickness for m, h in self.stacks_widths])
                         )
                         
                         
     
     def define_width(self):
         x = 0.0
-        for m,t in self.stacks_widths:
+        for m, t in self.stacks_widths:
             x = x + t
         return x
 
     def define_thickness(self):
         z = 0.0
-        return max([m.thickness for m,h in self.stacks_widths])
+        return max([m.thickness for m, h in self.stacks_widths])
     
     
     def get_number_of_stacks(self):
@@ -185,7 +185,7 @@
         return "<MaterialStackGeometry2D %s>" % self.name
     
     def __hash__(self):
-        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m,d in self.stacks_widths]))
+        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m, d in self.stacks_widths]))
             
 
     def consolidate(self):
@@ -255,21 +255,21 @@
     def size_info(self):
         return SizeInfo(west = self.origin_x, 
                         east = self.origin_x + self.width,
-                        south = min([m.origin_z for m,h in self.stacks_widths]),
-                        north = max([m.origin_z + m.thickness for m,h in self.stacks_widths])
+                        south = min([m.origin_z for m, h in self.stacks_widths]),
+                        north = max([m.origin_z + m.thickness for m, h in self.stacks_widths])
                         )
                         
                         
     
     def define_width(self):
         x = 0.0
-        for m,t in self.stacks_widths:
+        for m, t in self.stacks_widths:
             x = x + t
         return x
 
     def define_thickness(self):
         z = 0.0
-        return max([m.thickness for m,h in self.shapes_stacks])
+        return max([m.thickness for m, h in self.shapes_stacks])
     
     
     def get_number_of_stacks(self):
--- ipkiss24\pysics\basics\material\material.py	(original)
+++ ipkiss24\pysics\basics\material\material.py	(refactored)
@@ -48,20 +48,20 @@
     
     def __eq__(self, other):
         # simple comparison based on name. Subclasses can make it more complex
-        return isinstance(other,Material) and self.name == other.name
+        return isinstance(other, Material) and self.name == other.name
     
     def __neq__(self, other):
-        return (not isinstance(other,Material)) or self.name != other.name
+        return (not isinstance(other, Material)) or self.name != other.name
     
 class MaterialFactory(object):
     id_counter = 1
     store_id = dict() #key = the binary id of the material
     
     def get_number_of_materials_in_store(self):
-        return len(self.store_id.keys())
+        return len(list(self.store_id.keys()))
     
-    def __getitem__(self,key):
-        if isinstance(key,int):
+    def __getitem__(self, key):
+        if isinstance(key, int):
             return self.store_id[key]
         else:
             raise Exception("Invalid type of key for accessing an item in MaterialFactory::__get_item__ expects an integer key and got: %s" %str(key))         RefactoringTool: Writing converted ipkiss24\pysics\basics\material\material.py to ipkissat3\pysics\basics\material\material.py.
RefactoringTool: Refactored ipkiss24\pysics\basics\material\material_stack.py
RefactoringTool: Writing converted ipkiss24\pysics\basics\material\material_stack.py to ipkissat3\pysics\basics\material\material_stack.py.
RefactoringTool: Refactored ipkiss24\pysics\electromagnetics\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\electromagnetics\__init__.py to ipkissat3\pysics\electromagnetics\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\electromagnetics\environment.py
RefactoringTool: Writing converted ipkiss24\pysics\electromagnetics\environment.py to ipkissat3\pysics\electromagnetics\environment.py.
RefactoringTool: No changes to ipkiss24\pysics\electromagnetics\field.py
RefactoringTool: Writing converted ipkiss24\pysics\electromagnetics\field.py to ipkissat3\pysics\electromagnetics\field.py.
RefactoringTool: Refactored ipkiss24\pysics\electromagnetics\field_profile.py
RefactoringTool: Writing converted ipkiss24\pysics\electromagnetics\field_profile.py to ipkissat3\pysics\electromagnetics\field_profile.py.
RefactoringTool: Refactored ipkiss24\pysics\electromagnetics\material.py
RefactoringTool: Writing converted ipkiss24\pysics\electromagnetics\material.py to ipkissat3\pysics\electromagnetics\material.py.
RefactoringTool: No changes to ipkiss24\pysics\materials\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\materials\__init__.py to ipkissat3\pysics\materials\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\materials\all.py
RefactoringTool: Writing converted ipkiss24\pysics\materials\all.py to ipkissat3\pysics\materials\all.py.
RefactoringTool: Refactored ipkiss24\pysics\materials\electromagnetics.py
RefactoringTool: Writing converted ipkiss24\pysics\materials\electromagnetics.py to ipkissat3\pysics\materials\electromagnetics.py.
RefactoringTool: Refactored ipkiss24\pysics\optics\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\optics\__init__.py to ipkissat3\pysics\optics\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\optics\environment.py
RefactoringTool: Writing converted ipkiss24\pysics\optics\environment.py to ipkissat3\pysics\optics\environment.py.
RefactoringTool: No changes to ipkiss24\pysics\optics\material.py
RefactoringTool: Writing converted ipkiss24\pysics\optics\material.py to ipkissat3\pysics\optics\material.py.
RefactoringTool: No changes to ipkiss24\pysics\optics\waveguide.py
RefactoringTool: Writing converted ipkiss24\pysics\optics\waveguide.py to ipkissat3\pysics\optics\waveguide.py.
RefactoringTool: Refactored ipkiss24\pysics\thermal\__init__.py

@@ -76,11 +76,11 @@
         self.__dict__["id_counter"] = self.id_counter + 1 
         
     def __iter__(self):
-        return self.store_id.iteritems()        
+        return iter(self.store_id.items())        
         
     def find_item_key(self, item):
-        for k,v in self.__dict__.items():
-            if isinstance(v,Material) and v == item:
+        for k, v in list(self.__dict__.items()):
+            if isinstance(v, Material) and v == item:
                 return k
                 
 RESTRICT_MATERIAL = RestrictType(Material)
--- ipkiss24\pysics\basics\material\material_stack.py	(original)
+++ ipkiss24\pysics\basics\material\material_stack.py	(refactored)
@@ -34,9 +34,9 @@
     size_z  = FloatProperty()
     
     def __eq__(self, other):
-        if not isinstance(other,MaterialStack):
+        if not isinstance(other, MaterialStack):
             return False
-        for (smh,omh) in zip(self.materials_heights,other.materials_heights):
+        for (smh, omh) in zip(self.materials_heights, other.materials_heights):
             if smh[0]!=omh[0] or abs(smh[1]-omh[1])>1e-6:
                 return False
         return True
@@ -52,7 +52,7 @@
     
     def define_size_z(self):
         z = 0.0
-        for m,h in self.materials_heights:
+        for m, h in self.materials_heights:
             z = z + h
         return z
     
@@ -66,13 +66,13 @@
         TECH = get_technology()
         number_of_heights = self.get_number_of_layers()
         
-        nm = numpy.zeros((number_of_heights,4))
+        nm = numpy.zeros((number_of_heights, 4))
         
         for i in range(number_of_heights):
-            nm[i,3] = number_of_heights
-            nm[i,2] = self.materials_heights[i][0].epsilon
-            nm[i,1] = self.materials_heights[i][1]
-            nm[i,0] = self.get_unique_id()
+            nm[i, 3] = number_of_heights
+            nm[i, 2] = self.materials_heights[i][0].epsilon
+            nm[i, 1] = self.materials_heights[i][1]
+            nm[i, 0] = self.get_unique_id()
             
         return nm
     
@@ -114,7 +114,7 @@
         return "<MaterialStack %s>" % self.name
     
     def __hash__(self):
-        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m,d in self.materials_heights]))
+        return hash("".join(["%s_%d" % (m.name, round(d*100000)) for m, d in self.materials_heights]))
             
 
     def consolidate(self):
@@ -164,8 +164,8 @@
     id_counter = 1
     store_id = dict()
 
-    def __getitem__(self,key):
-        if isinstance(key,int):
+    def __getitem__(self, key):
+        if isinstance(key, int):
             return self.store_id[key]
         else:
             raise Exception("Invalid type of key for accessing an item in MaterialFactory::__get_item__ expects an integer key and got: %s" %str(key))         
@@ -181,13 +181,13 @@
         self.__dict__["id_counter"] = self.id_counter + 1       
     
     def get_key_from_material_stack(self, matstack):
-        for (k,v) in self.__dict__.items():
-            if isinstance(v,MaterialStack) and v == matstack:
+        for (k, v) in list(self.__dict__.items()):
+            if isinstance(v, MaterialStack) and v == matstack:
                 return k
         return None
     
     def get_number_of_material_stacks_in_store(self):
-        return len(self.store_id.keys())    
+        return len(list(self.store_id.keys()))    
     
     def get_numpy_matrix_representation_of_all_material_stacks(self):
         """Make a numpy matrix with for each layer in each material stack a row that contains:
@@ -197,15 +197,15 @@
         
         #first iteration: find out how many rows should be included
         total_number_of_layers = 0
-        for key in self.store_id.keys():
+        for key in list(self.store_id.keys()):
             total_number_of_layers += self.store_id[key].get_number_of_layers()
         
         #create numpy matrix
-        nm = numpy.zeros((total_number_of_layers,4))
+        nm = numpy.zeros((total_number_of_layers, 4))
         
         #second iteration: add contributions to final matrix
         current_row_index = 0        
-        for key in self.store_id.keys():
+        for key in list(self.store_id.keys()):
             mat_stack = self.store_id[key]
             number_of_layers = mat_stack.get_number_of_layers()
             nm[current_row_index:(current_row_index+number_of_layers),:] = mat_stack.get_numpy_matrix_representation()
@@ -218,13 +218,13 @@
         self.id_counter = 1
         
     def get_material_stack_id(self, material_stack):
-        for (i,mstack) in self.store_id.items():
+        for (i, mstack) in list(self.store_id.items()):
             if mstack == material_stack:
                 return i
         raise Exception("Material stack with id = %i not found." %material_stack)
     
     def __iter__(self):
-        return self.store_id.iteritems()
-    
-
-
+        return iter(self.store_id.items())
+    
+
+
--- ipkiss24\pysics\electromagnetics\__init__.py	(original)
+++ ipkiss24\pysics\electromagnetics\__init__.py	(refactored)
@@ -19,9 +19,9 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-import material
-import environment
-import field
+from . import material
+from . import environment
+from . import field
 import pysics.materials.electromagnetics
 from ..basics.domain import __Domain__
 
--- ipkiss24\pysics\electromagnetics\field_profile.py	(original)
+++ ipkiss24\pysics\electromagnetics\field_profile.py	(refactored)
@@ -39,4 +39,4 @@
                                             f.E.value.z.real, f.E.value.z.imag, 
                                             f.H.value.x.real, f.H.value.x.imag, 
                                             f.H.value.y.real, f.H.value.y.imag, 
-                                            f.H.value.z.real, f.H.value.z.imag] for p,f in zip(self.positions,self.fields)])         
+                                            f.H.value.z.real, f.H.value.z.imag] for p, f in zip(self.positions, self.fields)])         
--- ipkiss24\pysics\electromagnetics\material.py	(original)
+++ ipkiss24\pysics\electromagnetics\material.py	(refactored)
@@ -46,8 +46,8 @@
 #before doing the mixin, assess that we are not overwriting any epsilon values that were already set in the technology settings.
 from ipkiss.technology import get_technology
 TECH=get_technology()
-if hasattr(TECH,"MATERIALS"):
-    for (material_id,material) in TECH.MATERIALS:    
+if hasattr(TECH, "MATERIALS"):
+    for (material_id, material) in TECH.MATERIALS:    
         if hasattr(material, "epsilon"):
             raise Exception("Epsilon value of material '%s' is about to be overwritten by mixin of class __ElectroMagneticMaterial__.\nMake sure you do \"from pysics.electromagnetics import *\" in your technology settings before setting epsilon values." %material.name)
     
--- ipkiss24\pysics\materials\electromagnetics.py	(original)
+++ ipkiss24\pysics\materials\electromagnetics.py	(refactored)
@@ -29,13 +29,13 @@
 material_id_to_epsilon = dict()
 
 def fill_material_id_to_epsilon_map():
-    for id, material in MATERIAL_FACTORY.store_id.items():
+    for id, material in list(MATERIAL_FACTORY.store_id.items()):
         material_id_to_epsilon[id] = material.epsilon
 
 def get_epsilon_for_material_id(id):
     try:
         return material_id_to_epsilon[id]
-    except KeyError, e:
+    except KeyError as e:
         fill_material_id_to_epsilon_map()
         return material_id_to_epsilon[id]
     
--- ipkiss24\pysics\optics\__init__.py	(original)
+++ ipkiss24\pysics\optics\__init__.py	(refactored)
@@ -19,8 +19,8 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-import material
-import environment
+from . import material
+from . import environment
 
 from ..basics.domain import __Domain__
 
--- ipkiss24\pysics\thermal\__init__.py	(original)
+++ ipkiss24\pysics\thermal\__init__.py	(refactored)
@@ -19,8 +19,8 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-import environmentRefactoringTool: Writing converted ipkiss24\pysics\thermal\__init__.py to ipkissat3\pysics\thermal\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\thermal\environment.py
RefactoringTool: Writing converted ipkiss24\pysics\thermal\environment.py to ipkissat3\pysics\thermal\environment.py.
RefactoringTool: No changes to ipkiss24\pysics\thermal\field.py
RefactoringTool: Writing converted ipkiss24\pysics\thermal\field.py to ipkissat3\pysics\thermal\field.py.
RefactoringTool: No changes to ipkiss24\pysics\visualisation\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\visualisation\__init__.py to ipkissat3\pysics\visualisation\__init__.py.
RefactoringTool: No changes to ipkiss24\pysics\visualisation\geometry\__init__.py
RefactoringTool: Writing converted ipkiss24\pysics\visualisation\geometry\__init__.py to ipkissat3\pysics\visualisation\geometry\__init__.py.
RefactoringTool: Refactored ipkiss24\pysics\visualisation\geometry\material_stack.py
RefactoringTool: Writing converted ipkiss24\pysics\visualisation\geometry\material_stack.py to ipkissat3\pysics\visualisation\geometry\material_stack.py.
RefactoringTool: Refactored ipkiss24\pysimul\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\__init__.py to ipkissat3\pysimul\__init__.py.
RefactoringTool: No changes to ipkiss24\pysimul\exc.py
RefactoringTool: Writing converted ipkiss24\pysimul\exc.py to ipkissat3\pysimul\exc.py.
RefactoringTool: No changes to ipkiss24\pysimul\log.py
RefactoringTool: Writing converted ipkiss24\pysimul\log.py to ipkissat3\pysimul\log.py.
RefactoringTool: No changes to ipkiss24\pysimul\settings.py
RefactoringTool: Writing converted ipkiss24\pysimul\settings.py to ipkissat3\pysimul\settings.py.
RefactoringTool: No changes to ipkiss24\pysimul\integration\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\integration\__init__.py to ipkissat3\pysimul\integration\__init__.py.
RefactoringTool: No changes to ipkiss24\pysimul\integration\camfr_integration.py
RefactoringTool: Writing converted ipkiss24\pysimul\integration\camfr_integration.py to ipkissat3\pysimul\integration\camfr_integration.py.
RefactoringTool: Refactored ipkiss24\pysimul\integration\component_integration.py

-import field
+from . import environment
+from . import field
 
 from ..basics.domain import __Domain__
 
--- ipkiss24\pysics\visualisation\geometry\material_stack.py	(original)
+++ ipkiss24\pysics\visualisation\geometry\material_stack.py	(refactored)
@@ -84,9 +84,9 @@
 
         # legend
         prop = font_manager.FontProperties(size=10) 
-        patches_for_legend = [ref[0] for ref in legend_refs.values()]
-        labels_for_legend = [ref[1] for ref in legend_refs.values()]
-        axes.legend(patches_for_legend, labels_for_legend, loc=(0.5,0.9), prop=prop)
+        patches_for_legend = [ref[0] for ref in list(legend_refs.values())]
+        labels_for_legend = [ref[1] for ref in list(legend_refs.values())]
+        axes.legend(patches_for_legend, labels_for_legend, loc=(0.5, 0.9), prop=prop)
             
         return fig
 
@@ -113,7 +113,7 @@
 
             # polygon cell with one shape
             polys = tvtk.CellArray()
-            cells = numpy.array([n_points] + range(n_points)) # number of points in the cell, and cell indices
+            cells = numpy.array([n_points] + list(range(n_points))) # number of points in the cell, and cell indices
             polys.set_cells(1, cells) # number of cells, list of cell points
             pd = tvtk.PolyData()
             pd.points = points
@@ -157,10 +157,10 @@
             for material, thickness in stack.materials_thicknesses:
                 # create the Wedge cell points and indices
                 # reuse the top points of the last cell as the bottom points of the new cell
-                wedge_points.append(point_array + numpy.array([0,0,z]))
-                wedge_points.append(point_array + numpy.array([0,0,z + 0.999*thickness]))
-                wedge_cell_indices.append(numpy.hstack([iar + numpy.array([3, N, N, N]) , # 3 adds to the existing 3: makes 6
-                                                        iar[:,1:] + numpy.array([N+ n_points, N + n_points, N + n_points])]
+                wedge_points.append(point_array + numpy.array([0, 0, z]))
+                wedge_points.append(point_array + numpy.array([0, 0, z + 0.999*thickness]))
+                wedge_cell_indices.append(numpy.hstack([iar + numpy.array([3, N, N, N]), # 3 adds to the existing 3: makes 6
+                                                        iar[:, 1:] + numpy.array([N+ n_points, N + n_points, N + n_points])]
                                                        ).ravel()
                                           ) 
                 N += 2 * n_points
@@ -194,7 +194,7 @@
         cell_array = tvtk.CellArray()
         cell_array.set_cells(n_cells, numpy.hstack(wedge_cell_indices))
         cell_types = numpy.array([wedge_type for i in range(n_cells)])
-        cell_offset = numpy.array(range(0,7 * n_cells, 7)) # each cell has one counter and 6 points
+        cell_offset = numpy.array(list(range(0, 7 * n_cells, 7))) # each cell has one counter and 6 points
 
         # Now create the UnstructuredGrid which will contain the material data.
         ug = tvtk.UnstructuredGrid(points=numpy.vstack(wedge_points))
--- ipkiss24\pysimul\__init__.py	(original)
+++ ipkiss24\pysimul\__init__.py	(refactored)
@@ -20,6 +20,6 @@
 # Contact: ipkiss@intec.ugent.be
 
 from .log import PYSIMUL_LOG as LOG
-import settings
+from . import settings
 
-print settings.START_MESSAGE
+print(settings.START_MESSAGE)
--- ipkiss24\pysimul\integration\component_integration.py	(original)
+++ ipkiss24\pysimul\integration\component_integration.py	(refactored)
@@ -37,7 +37,7 @@
 from pysics.basics.environment import DEFAULT_ENVIRONMENT
 from ipkiss.plugins.photonics.wg.basic import WgElDefinition
 from ipkiss.technology.technology import *
-import cPickle
+import pickle
 from math import cos, sin, pi
 from pysimul.log import PYSIMUL_LOG as LOG
 import logging
@@ -153,7 +153,7 @@
 
     def get_material_dataset_for_subset(self, corner, width, height, angle = 0):
         angle = angle % 360.0
-        H = do_hash("%s-%f-%f-%f"%(str(corner),width,height,angle))
+        H = do_hash("%s-%f-%f-%f"%(str(corner), width, height, angle))
         #cache already requested datasets in a dictionary attribute
         total_resolution = self.get_total_resolution()
         if not (H in self.material_dataset_dict):
@@ -169,19 +169,19 @@
                     for h in h_range:
                         delta_h = float(h) / total_resolution
                         point = current_corner.move_polar_copy(delta_h, angle+90)
-                        mat[w,h] = self.geometry.get_material(point)
+                        mat[w, h] = self.geometry.get_material(point)
                 self.material_dataset_dict[H] = mat
             else:
                 #faster implementation for the special case where angle == 0
                 ref_point = corner - self.geometry.size_info.south_west
                 delta_x = int(ref_point[0] * float(total_resolution))
                 delta_y = int(ref_point[1] * float(total_resolution))
-                x_min = max(0,min(w_range) + delta_x)
-                y_min = max(0,min(h_range) + delta_y)
+                x_min = max(0, min(w_range) + delta_x)
+                y_min = max(0, min(h_range) + delta_y)
                 x_max = max(w_range) + delta_x
                 y_max = max(h_range) + delta_y
                 full_material_array = self.geometry.get_material_array()
-                mat = full_material_array[x_min:x_max+1,y_min:y_max+1]
+                mat = full_material_array[x_min:x_max+1, y_min:y_max+1]
                 self.material_dataset_dict[H] = mat
         return self.material_dataset_dict[H]
 
@@ -275,7 +275,7 @@
             self.material_dataset = self.get_material_array()
         x = coordinate[0]
         y = coordinate[1]
-        return self.material_dataset[x,y]    
+        return self.material_dataset[x, y]    
 
     def get_size_info(self):	
         L = self.south.distance(self.north)
@@ -445,9 +445,9 @@
             #FIXME -- THIS MAY BE REMOVED IN A LATER PHASE...
             simul_params["structure"] = simul_params["component"]
             del simul_params["component"]
-            LOG.deprecation_warning("Please switch the name of simulation parameter 'component' to 'structure'.",-1)
+            LOG.deprecation_warning("Please switch the name of simulation parameter 'component' to 'structure'.", -1)
         struct = simul_params["structure"]
-        simul_params["simulation_id"] = struct.name.replace("<","").replace(">","")
+        simul_params["simulation_id"] = struct.name.replace("<", "").replace(">", "")
         if "vfabrication_process_flow" not in simul_params:
             simul_params["vfabrication_process_flow"] = TECH.VFABRICATION.PROCESS_FLOW
         if "material_stack_factory" not in simul_params:
@@ -484,7 +484,7 @@
     def __get_simulation_dimension__(self, simul_params):
         if ("dimensions" in simul_params):
             dim = int(simul_params["dimensions"])
-            if (dim in [2,3]):
+            if (dim in [2, 3]):
                 return dim
             else:
                 raise Exception("Invalid value for simulation parameter 'dimensions': should be 2 or 3.")
@@ -509,7 +509,7 @@
         #create the Landscape	
         if not ("datacollectors" in self.simul_params):
             self.simul_params["datacollectors"] = []
-        ls = SimulationLandscape(simulation_volume = simulation_volume , simul_params = self.simul_params)  
+        ls = SimulationLandscape(simulation_volume = simulation_volume, simul_params = self.simul_params)  
         #do initialisation for certain types of processors
         if "step_processor" in self.simul_params:
             p = self.simul_params["step_processor"]
@@ -531,7 +531,7 @@
 
     def define_procedure(self):
         cls = self.procedure_class
-        pr = cls(engine = self.simul_params["engine"], landscape = self.landscape,simul_params = self.simul_params)
+        pr = cls(engine = self.simul_params["engine"], landscape = self.landscape, simul_params = self.simul_params)RefactoringTool: Writing converted ipkiss24\pysimul\integration\component_integration.py to ipkissat3\pysimul\integration\component_integration.py.
RefactoringTool: No changes to ipkiss24\pysimul\runtime\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\__init__.py to ipkissat3\pysimul\runtime\__init__.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\animation.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\animation.py to ipkissat3\pysimul\runtime\animation.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\basic.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\basic.py to ipkissat3\pysimul\runtime\basic.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\definition.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\definition.py to ipkissat3\pysimul\runtime\definition.py.
RefactoringTool: No changes to ipkiss24\pysimul\runtime\engine.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\engine.py to ipkissat3\pysimul\runtime\engine.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\params.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\params.py to ipkissat3\pysimul\runtime\params.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\procedure.py

         return pr
 
 
--- ipkiss24\pysimul\runtime\animation.py	(original)
+++ ipkiss24\pysimul\runtime\animation.py	(refactored)
@@ -24,26 +24,26 @@
 
 def create_animated_gif_from_hdf5(field_filename, eps_filename, remove_png = True, uniform_colormap_range = True):
 	f = h5py.File(field_filename, 'r')
-	ds = f.items()[0][1]
+	ds = list(f.items())[0][1]
 	max_time = ds.shape[2]-1
-	print "Creating animated gif from files %s and %s (time steps : %i)." %(field_filename, eps_filename, max_time)
-	png_filename_template = field_filename.replace(".h5",".t*.png")
-	print "Removing old png files : %s" %png_filename_template
+	print("Creating animated gif from files %s and %s (time steps : %i)." %(field_filename, eps_filename, max_time))
+	png_filename_template = field_filename.replace(".h5", ".t*.png")
+	print("Removing old png files : %s" %png_filename_template)
 	os.system("rm %s" %png_filename_template)
-	print "Creating png files ...."	
+	print("Creating png files ....")	
 	if (uniform_colormap_range):
 		params = "-R"
 	else:
 		params = ""
 	cmd = "h5topng %s -t 0:%i -Zc dkbluered %s -a gray -A %s" %(params, max_time, field_filename, eps_filename)
 	os.system(cmd)
-	print "Converting png files to animated gif...."
-	gif_filename = field_filename.replace(".h5",".gif")
+	print("Converting png files to animated gif....")
+	gif_filename = field_filename.replace(".h5", ".gif")
 	os.system("convert %s %s" %(png_filename_template, gif_filename))
 	if (remove_png):
-		print "Removing png files..." 
+		print("Removing png files...") 
 		os.system("rm %s" %png_filename_template)
-	print "Done with creating the animated gif : %s" %gif_filename
+	print("Done with creating the animated gif : %s" %gif_filename)
 	return gif_filename
 
 
--- ipkiss24\pysimul\runtime\basic.py	(original)
+++ ipkiss24\pysimul\runtime\basic.py	(refactored)
@@ -171,7 +171,7 @@
     pulse_width = RestrictedProperty(required = True, restriction = RESTRICT_FLOAT & RESTRICT_NONNEGATIVE, doc = "Wavelength width (in nm) for collecting the flux")    
     number_of_sampling_freq = RestrictedProperty(required = True, restriction = RESTRICT_INT & RESTRICT_NONNEGATIVE, doc = "Number of discrete sampling frequencies to monitor the flux")   
     flux_per_freq_callback = lambda : 0  #callback function (probably to the engine), to get the flux values. To be set upon initialisation
-    flux_per_freq = RestrictedProperty(default = [[],[]], restriction = RestrictType(list), doc = "the flux per frequency that was collected during the simulation")   
+    flux_per_freq = RestrictedProperty(default = [[], []], restriction = RestrictType(list), doc = "the flux per frequency that was collected during the simulation")   
     init_hdf5 = StringProperty(default=None, doc = "The name of a HDF5 file from which to load initial values of the flux")        
 	
     def initialize(self):
@@ -187,8 +187,8 @@
 	    filename = "fluxplane_%s_%s.pickle" %(self.north, self.south)
 	f = open(filename, 'wb')
 	LOG.debug("Persisting Fluxplane to file : %s" %filename)
-	import cPickle
-	cPickle.dump(self,f)
+	import pickle
+	pickle.dump(self, f)
 	f.close()	  	
     
     def save_hdf5(self, filename):
@@ -293,7 +293,7 @@
 	    for y in y_range:
 		x_co = float(x) / float(resolution)
 		y_co = float(y) / float(resolution)
-		mat[x,y] = self.get_material(Coord3(x_co,y_co,0))
+		mat[x, y] = self.get_material(Coord3(x_co, y_co, 0))
 	return mat
  
 
@@ -347,7 +347,7 @@
 	if filename == None:
 	    try:
 		filename = self.default_filename_without_extension + ".datacollectors.pysimul.png"
-	    except Exception,e :
+	    except Exception as e :
 		raise PythonSimulateException("Could not find a default filename for the 'visualizeDatacollectorsToFile' function. Fatal error.")	    
 	if not os.path.isfile(filename):
 	    self.visualize_datacollectors_to_file_function(filename)	
--- ipkiss24\pysimul\runtime\definition.py	(original)
+++ ipkiss24\pysimul\runtime\definition.py	(refactored)
@@ -22,7 +22,7 @@
 from ipcore.all import *
 from pysimul.runtime.basic import *
 from pysimul.runtime.procedure import *
-import cPickle
+import pickle
 import glob
 
 
@@ -68,7 +68,7 @@
 			filename = self.__get_default_filename_without_extension()+ '.def.pysimul'	
 		f = open(filename, 'wb')
 		LOG.debug("Persisting simulation definition to file : %s" %filename)
-		cPickle.dump(self,f)
+		pickle.dump(self, f)
 		f.close()
 		return filename
 		
@@ -78,16 +78,16 @@
 			filename = self.__get_default_filename_without_extension()		
 			filename = filename + '.datacollectors.pysimul'
 		f = open(filename, 'wb')
-		cPickle.dump(self.landscape.datacollectors,f)
+		pickle.dump(self.landscape.datacollectors, f)
 		f.close()		
 		self.save_datacollectors_to_file_function(filename+".png")
 		
 	@classmethod
-	def load_from_file(cls,filename):
+	def load_from_file(cls, filename):
 		'''deserialize a SimulationDefinition from file'''
 		LOG.debug("Loading simulation definition from file : %s" %filename)		
-		f = open(filename,'rb')
-		simul_def = cPickle.load(f)
+		f = open(filename, 'rb')
+		simul_def = pickle.load(f)
 		f.close()
 		return simul_def
 	
--- ipkiss24\pysimul\runtime\params.py	(original)
+++ ipkiss24\pysimul\runtime\params.py	(refactored)
@@ -32,7 +32,7 @@
 	def __set_properties__(self, obj, kwargs):
 		props = obj.__unlocked_properties__()
 		kwargs_to_assign = dict()
-		for name,val in kwargs.items():
+		for name, val in list(kwargs.items()):
 			if name in props:
 				kwargs_to_assign[name] = val
 		obj.__assign_properties__(kwargs_to_assign)
@@ -46,11 +46,11 @@
 				p["structure"] = p["component"]
 				del p["component"]
 				from pysimul.log import PYSIMUL_LOG as LOG
-				LOG.deprecation_warning("Please switch the name of simulation parameter 'component' to 'structure'.",3)	 			
+				LOG.deprecation_warning("Please switch the name of simulation parameter 'component' to 'structure'.", 3)	 			
 			if (not isinstance(p, dict)):
 				raise PythonSimulateException("Keyword argument 'simul_params' must be of type 'dict'. Current type is : '%'" %type(p))
 			props = self.__unlocked_properties__()
-                        for name, val in p.items():				
+                        for name, val in list(p.items()):				
 				if isinstance(val, SimulationParameterContainer):
 					self.__set_properties__(val, p)
 				elif isinstance(val, list):
--- ipkiss24\pysimul\runtime\procedure.py	(original)
+++ ipkiss24\pysimul\runtime\procedure.py	(refactored)
@@ -73,8 +73,8 @@
         LOG.debug("Starting run of FDTDFieldCalculationProcedure...")
         try:
             self.visualize_landscape()
-        except Exception, e:
-            print 'Cannot visualize in FDTDFieldCalculationProcedure. Maybe DISPLAY is not set and you''re working remote? Error:', e
+        except Exception as e:
+            print('Cannot visualize in FDTDFieldCalculationProcedure. Maybe DISPLAY is not set and you''re working remote? Error:', e)
 
         LOG.debug("Initializing the engine...")		
         self.engine.initialise_engine(self.landscape)
@@ -85,7 +85,7 @@
         stop = False		
         stepCount = 1
         if self.interactive_mode:
-            i = raw_input("Press <return> to start the simulation...")
+            i = input("Press <return> to start the simulation...")
         while (not stop):
             self.engine.step()
             self.step_processor.process()
@@ -99,10 +99,10 @@
                         wavelengths = 1000.0 / flx.flux_per_freq[0] 
                         fluxes = flx.flux_per_freq[1]
                         for wl, flux in zip(wavelengths, fluxes):
-                            print 'flux',flxcntr, ': (step', stepCount,  '), ', wl, flux
+                            print('flux', flxcntr, ': (step', stepCount,  '), ', wl, flux)
                         #double enter so gnuplot can interpret this correctly as new data.
-                        print 'flux',flxcntr, ': '
-                        print 'flux',flxcntr, ': '
+                        print('flux', flxcntr, ': ')RefactoringTool: Writing converted ipkiss24\pysimul\runtime\procedure.py to ipkissat3\pysimul\runtime\procedure.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\processor.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\processor.py to ipkissat3\pysimul\runtime\processor.py.
RefactoringTool: No changes to ipkiss24\pysimul\runtime\simulate_from_file.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\simulate_from_file.py to ipkissat3\pysimul\runtime\simulate_from_file.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\MeepFDTD\MeepFDTD.py

+                        print('flux', flxcntr, ': ')
                         flxcntr += 1
 
 
@@ -124,7 +124,7 @@
             ds = self.engine.get_material_dataset()
             self.create_visualization(ds, indicate_window = False)	
             PYPLOT.draw()
-            i = raw_input("Press <return> to continue...")
+            i = input("Press <return> to continue...")
             LOG.debug("End of visualization...")
 
     def visualize_landscape(self):
@@ -139,10 +139,10 @@
                 PYPLOT.savefig(self.landscape.simulation_id+"_landscape.png", dpi = 500)
             if self.interactive_mode:		
                 PYPLOT.draw()
-                i = raw_input("Press <return> to continue or '0' to abort...")
+                i = input("Press <return> to continue or '0' to abort...")
                 if (i.find("0")>=0):
                     import sys
-                    print "Exiting..."
+                    print("Exiting...")
                     sys.exit(0)
                 PYPLOT.clf()
                 PYPLOT.cla()			
@@ -155,10 +155,10 @@
             if ((not (filename is None)) and (self.interactive_mode)):
                 try:
                     from dependencies.pil_wrapper import Image
-                    png_file = filename.replace(".h5",".png")
+                    png_file = filename.replace(".h5", ".png")
                     im = Image.open(png_file)
                     im.show()				
-                except Exception, e:
+                except Exception as e:
                     LOG.error("Unexpected error with python-PIL : %s" %str(e))
 
     def __contourf_material_matrix_effective_index__(self, pyplot, simulation_volume, material_array):
@@ -295,13 +295,13 @@
         y11 = input_vector.position.y
         x21 = 10.0 * np.cos(input_vector.angle_rad)
         y21 = 10.0 * np.sin(input_vector.angle_rad)
-        fig.axes[0].arrow(x11,y11,x21, y21, width=1.0)
+        fig.axes[0].arrow(x11, y11, x21, y21, width=1.0)
 
         x12 = output_vector.position.x
         y12 = output_vector.position.y
         x22 = 10.0 * np.cos(output_vector.angle_rad)
         y22 = 10.0 * np.sin(output_vector.angle_rad)
-        fig.axes[0].arrow(x12,y12,x22, y22, width=1.0)
+        fig.axes[0].arrow(x12, y12, x22, y22, width=1.0)
         fig.axes[0].set_aspect('equal')	
         #from ipkiss.visualisation.show import  
         from dependencies.matplotlib_wrapper import Tk, FigureCanvasTkAgg
--- ipkiss24\pysimul\runtime\processor.py	(original)
+++ ipkiss24\pysimul\runtime\processor.py	(refactored)
@@ -79,11 +79,11 @@
             try:
                 import meep_mpi as Meep
             except:
-                print 'Cannot import meep'
+                print('Cannot import meep')
 
         if isinstance(self.surroundings, Meep.volume):
-            print 'WARNING: Cannot yet pickle surroundings-instance. (meep.vol2d(...).surroundings'
-            print 'This is of type meep.volume; proxy of <Swig Object of type \'meep::volume *\' at 0x31...c0> '
+            print('WARNING: Cannot yet pickle surroundings-instance. (meep.vol2d(...).surroundings')
+            print('This is of type meep.volume; proxy of <Swig Object of type \'meep::volume *\' at 0x31...c0> ')
             #self.surroundings = 'surrounding can not yet be pickled correctly'
             ndict = self.__dict__.copy()
             del ndict['__prop_surroundings__']
@@ -140,7 +140,7 @@
     def __call__(self):
         self.StepsCount = self.StepsCount + 1
         if (self.StepsCount % int (self.maximumSteps / 10.0) == 0):
-            print "The simulation is now at step %i" %self.StepsCount
+            print("The simulation is now at step %i" %self.StepsCount)
         return self.StepsCount >= self.maximumSteps   
 
 
--- ipkiss24\pysimul\runtime\MeepFDTD\MeepFDTD.py	(original)
+++ ipkiss24\pysimul\runtime\MeepFDTD\MeepFDTD.py	(refactored)
@@ -29,10 +29,10 @@
 
 try:
     import meep as Meep
-except ImportError, e:
+except ImportError as e:
     try :
         import meep_mpi as Meep
-    except ImportError, e:
+    except ImportError as e:
         raise ImportError("Modules 'meep' or 'meep_mpi' not found.")    
 
 import h5py
@@ -49,7 +49,7 @@
             if not isinstance(simul_volume, __SimulationVolume__):
                 raise AttributeException("Parameter simul_volume of class MeepMaterial2D must be of type __SimulationVolume__")
             resolution_factor = simul_volume.resolution_factor
-            LOG.debug("Meep : using a resolution factor of %i (Numpy matrix has %i times higher resolution than the Meep grid)." %(resolution_factor,resolution_factor))
+            LOG.debug("Meep : using a resolution factor of %i (Numpy matrix has %i times higher resolution than the Meep grid)." %(resolution_factor, resolution_factor))
             meep_resolution = meep_volume.a
             material_matrix =  simul_volume.get_material_dataset_window(meep_resolution * resolution_factor)
             #convert the material matrix to a matrix with epsilon values (doubles)
@@ -57,8 +57,8 @@
             self.material_chi3_matrix = transform_material_stack_matrix_in_chi3_matrix(material_matrix)
             self.set_matrix_2D(self.material_chi3_matrix, meep_volume, resolution_factor)
             LOG.debug("Meep node %i -MeepMaterial2D (chi3) object initialized." %int(Meep.my_rank()))
-        except Exception, e:
-            print "Exception in MeepMaterial2D::__init__ : %s" %e	    
+        except Exception as e:
+            print("Exception in MeepMaterial2D::__init__ : %s" %e)	    
             raise e
 
     def __getstate__(self): #for pickle : do not serialize
@@ -72,7 +72,7 @@
         if not isinstance(simul_volume, __SimulationVolume__):
             raise AttributeException("Parameter simul_volume of class MeepMaterial2D must be of type __SimulationVolume__")
         resolution_factor = simul_volume.resolution_factor
-        LOG.debug("Meep : using a resolution factor of %i (Numpy matrix has %i times higher resolution than the Meep grid)." %(resolution_factor,resolution_factor))
+        LOG.debug("Meep : using a resolution factor of %i (Numpy matrix has %i times higher resolution than the Meep grid)." %(resolution_factor, resolution_factor))
         meep_resolution = meep_volume.a
         material_matrix =  simul_volume.get_material_dataset_window(meep_resolution * resolution_factor)
         #convert the material matrix to a matrix with epsilon values (doubles)
@@ -97,7 +97,7 @@
         for c in coords :
             x = c[0] - self.south_west_coord[0]
             y = c[1] - self.south_west_coord[1]
-            transformed_coords.append([x,y])
+            transformed_coords.append([x, y])
         arr = numpy.array(transformed_coords)
         arr = arr[:-1]
         return arr
@@ -153,19 +153,19 @@
         Meep.Callback.__init__(self)
         self.source = source
 
-    def complex_vec(self,vec):
+    def complex_vec(self, vec):
         #BEWARE, these are coordinates RELATIVE to the source center !!!!
         try:
             x = vec.x()
             y = vec.y()
-            factor = self.source.get_amplitude_factor(Coord2(x,y))	
-            LOG.debug("Meep node %i -Amplitude factor for x=%f - y=%f is: %f \n" %(int(Meep.my_rank()),x,y, factor) )
+            factor = self.source.get_amplitude_factor(Coord2(x, y))	
+            LOG.debug("Meep node %i -Amplitude factor for x=%f - y=%f is: %f \n" %(int(Meep.my_rank()), x, y, factor) )
             if (isinstance(factor, complex)):
                 return factor
             else:
                 return complex(factor)
-        except Exception, e:
-            print "Exception in AmplitudeFactor::complex_vec (%f,%f): %s" %(x,y,e)
+        except Exception as e:
+            print("Exception in AmplitudeFactor::complex_vec (%f,%f): %s" %(x, y, e))
             raise e
 
     def __getstate__(self): #for pickle : do not serialize
@@ -195,7 +195,7 @@
         if self.dim == 2:
             try:
                 self.material = MeepMaterial2DPolygons(landscape.simulation_volume, self.meepVol)RefactoringTool: Writing converted ipkiss24\pysimul\runtime\MeepFDTD\MeepFDTD.py to ipkissat3\pysimul\runtime\MeepFDTD\MeepFDTD.py.
RefactoringTool: No changes to ipkiss24\pysimul\runtime\MeepFDTD\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\MeepFDTD\__init__.py to ipkissat3\pysimul\runtime\MeepFDTD\__init__.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter.py

-            except Exception, err:
+            except Exception as err:
                 LOG.error("MeepMaterial2DPolygons gives errors -> using MeepMaterial2DMatrix instead...") 
                 self.material = MeepMaterial2DMatrix(landscape.simulation_volume, self.meepVol)
         else: #dim == 3
@@ -207,8 +207,8 @@
         symmetry_object = Meep.identity()
         if( self.symmY ):
             LOG.debug("Meep node %i -Using y symmetry!" %(self.node_nr))
-            symmetry_object = Meep.mirror(Meep.Y,self.meepVol)
-            symmetry_object = symmetry_object * complex(1.0,0.0)
+            symmetry_object = Meep.mirror(Meep.Y, self.meepVol)
+            symmetry_object = symmetry_object * complex(1.0, 0.0)
 
         # When there is a certain PML direction, use that one.
         if isinstance( landscape.pml_direction, str ):
@@ -221,7 +221,7 @@
         else:
             pml = Meep.pml(landscape.pml_thickness)
 
-        self.structure = Meep.structure(self.meepVol , Meep.EPS, pml, symmetry=symmetry_object )
+        self.structure = Meep.structure(self.meepVol, Meep.EPS, pml, symmetry=symmetry_object )
         if self.is_nonlinear:
             LOG.debug("Meep node %i, setting chi3"%(self.node_nr))
             self.chi3 = MeepChi3_2D(landscape.simulation_volume, self.meepVol)
@@ -271,10 +271,10 @@
     def __make_meep_vec__(self, coord):
         '''Convert a Coord3 object into a Meep vec object'''
         if (self.dim == 3):
-            (x,y,z) = self.__calc_meep_coord__(coord)
+            (x, y, z) = self.__calc_meep_coord__(coord)
             return Meep.vec(x, y, z)
         elif (self.dim == 2):
-            (x,y) = self.__calc_meep_coord__(coord)
+            (x, y) = self.__calc_meep_coord__(coord)
             return Meep.vec(x, y)
         elif (self.dim == 1):
             (x) = self.__calc_meep_coord__(coord)
@@ -316,13 +316,13 @@
         if isinstance(src, __EMPointSource__):
             vec = self.__make_meep_vec__(src.point)	    
             meep_fields.add_point_source(meepComp, meepSource, vec)
-            print "Point source at point (%f , %f)" %(vec.x(), vec.y())	
+            print("Point source at point (%f , %f)" %(vec.x(), vec.y()))	
         elif isinstance(src, __EMVolumeSource__):
             vec1 = self.__make_meep_vec__(src.south)
             vec2 = self.__make_meep_vec__(src.north)	    
             LOG.debug("Meep node %i -Creating volume for source plane..." %(self.node_nr))	    
             meepSrcVol = Meep.volume(vec1, vec2)
-            print "Meep node %i - source plane between points (%f , %f) and (%f , %f)." %(self.node_nr, vec1.x(), vec1.y(), vec2.x(), vec2.y())	
+            print("Meep node %i - source plane between points (%f , %f) and (%f , %f)." %(self.node_nr, vec1.x(), vec1.y(), vec2.x(), vec2.y()))	
             LOG.debug("Meep node %i -Now adding the volume source to Meep..." %(self.node_nr))
             if isinstance(src, __AmplitudeShapedSource__):
                 ampl = AmplitudeFactor(source = src)
@@ -340,8 +340,8 @@
         LOG.debug("Meep node %i -Creating Meep volume object for the flux plane..." %(self.node_nr))
         vec1 = self.__make_meep_vec__(flx.north)
         vec2 = self.__make_meep_vec__(flx.south)
-        print "Meep node %i : flux plane between points (%f , %f) and (%f , %f) " %(self.node_nr, vec1.x(), vec1.y(), vec2.x(), vec2.y())	
-        meepFlxVol = Meep.volume(vec1,vec2)
+        print("Meep node %i : flux plane between points (%f , %f) and (%f , %f) " %(self.node_nr, vec1.x(), vec1.y(), vec2.x(), vec2.y()))	
+        meepFlxVol = Meep.volume(vec1, vec2)
         center_freq = 1.0 / (float(flx.center_wavelength) / 1000.0)
         pw = ( (float(flx.pulse_width)/1000.0) / (float(flx.center_wavelength)/1000.0) ) * center_freq 	
         max_freq = center_freq + pw / 2.0
@@ -357,12 +357,12 @@
         LOG.debug("Meep node %i - done with fluxplane ..." %(self.node_nr))
 
     def __saveFluxToHDF5(self, pFluxplane, filename):
-        LOG.debug("Meep node %i -Saving flux to HDF5 in file %s ..." %(self.node_nr,filename))
+        LOG.debug("Meep node %i -Saving flux to HDF5 in file %s ..." %(self.node_nr, filename))
         pFluxplane.save_hdf5(self.meep_fields, filename)
         return None
 
     def __loadFluxFromHDF5(self, pFluxplane, filename):
-        LOG.debug("Meep node %i -Loading initial values for fluxplane from HDF5 file %s..." %(self.node_nr,filename))
+        LOG.debug("Meep node %i -Loading initial values for fluxplane from HDF5 file %s..." %(self.node_nr, filename))
         pFluxplane.load_hdf5(self.meep_fields, filename)
         return None    
 
@@ -375,7 +375,7 @@
         '''Export the dielectric to a HDF5 output file'''
         if (fileName == None):
             fileName = "meep_eps.h5"
-        LOG.debug("Meep node %i -Exporting dielectric to H5-file : %s" %(self.node_nr,fileName))   
+        LOG.debug("Meep node %i -Exporting dielectric to H5-file : %s" %(self.node_nr, fileName))   
         dielectric_file_handle =  Meep.prepareHDF5File(fileName)
         self.meep_fields.output_hdf5(Meep.Dielectric, self.meepVol.surroundings(), dielectric_file_handle)   
         self.closeHDF5File(dielectric_file_handle)
@@ -388,7 +388,7 @@
         #let Meep export the dielectricum to HDF5
         self.exportDielectricH5(filename)	
         if (Meep.am_master()):	
-            LOG.debug("Meep node %i -Dielectricum saved to file %s..." %(self.node_nr,filename))
+            LOG.debug("Meep node %i -Dielectricum saved to file %s..." %(self.node_nr, filename))
             if self.dim == 2:
                 cmd = "h5topng -a /home/emmanuel/workspace/Meep_tutorial/colormaps/yarg "+filename
                 os.system(cmd)	
@@ -404,16 +404,16 @@
         h5FileName = self.generate_material_hdf5()
         f = h5py.File(h5FileName, 'r')
         #check that the dimension of the dataset that we receive match what we expect
-        ds = f.items()[0][1]
+        ds = list(f.items())[0][1]
         if (abs(ds.shape[0] - epsDim[0]) > 1) or (abs(ds.shape[1] - epsDim[1]) > 1) :
             raise PythonSimulateException("MeepSimulationEngine::visualizeDielectric - invalid dimension of HDF5 data. Expected %s and got %s" %(str(tuple(epsDim)), str(ds.shape) ))
         #create a matrix with Material objects that will hold the epsilon
         x_range = ds.shape[0]
         y_range = ds.shape[1]
         mat = numpy.zeros((x_range, y_range), Material)
-        for x in range(0,x_range):
-            for y in range(0,y_range):
-                mat[x,y] = Material(name = "dielectricum_material", epsilon = ds[x, y])
+        for x in range(0, x_range):
+            for y in range(0, y_range):
+                mat[x, y] = Material(name = "dielectricum_material", epsilon = ds[x, y])
         return mat
 
     def getFieldAmplitudeAtMonitorPoint(self, pCoord, pComp):
--- ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter.py	(original)
+++ ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter.py	(refactored)
@@ -71,9 +71,9 @@
             for material_stack_id, bitmap_polygon in material_stacks_shapely_polygons: 
                 bitmap_polygons.append(bitmap_polygon)
                 eps_values.append(landscape.simulation_volume.geometry.material_stack_factory[material_stack_id].effective_index_epsilon)	
-            from cPickle import dump
+            from pickle import dump
             file_handle = open(materials_2d_filename, "w")
-            dump((bitmap_polygons, eps_values, south_west),file_handle)
+            dump((bitmap_polygons, eps_values, south_west), file_handle)
             file_handle.close()
         else: #dim == 3
             materials_3d_filename = name_template+".materials3D.pysimul"
@@ -89,9 +89,9 @@
             south_west = landscape.simulation_volume.size_info.south_west	
             material_stacks_npy = landscape.simulation_volume.geometry.get_numpy_matrix_representation_of_all_material_stacks()
             n_o_material_stacks = landscape.simulation_volume.geometry.get_number_of_material_stacks_in_store()RefactoringTool: Writing converted ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter.py to ipkissat3\pysimul\runtime\MeepFDTD\meep_scripter.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py

-            from cPickle import dump
+            from pickle import dump
             file_handle = open(materials_3d_filename, "w")
-            dump((bitmap_polygons, material_stack_ids, south_west, material_stacks_npy, n_o_material_stacks),file_handle)
+            dump((bitmap_polygons, material_stack_ids, south_west, material_stacks_npy, n_o_material_stacks), file_handle)
             file_handle.close()	    	    
         if( self.symmY ):
             self.__script__("symmetry_object = meep.mirror(meep.Y,meep_vol)")
@@ -182,10 +182,10 @@
     def __make_meep_vec__(self, coord):
         '''Convert a Coord3 object into a Meep vec object'''
         if (self.dim == 3):
-            (x,y,z) = self.__calc_meep_coord__(coord)
+            (x, y, z) = self.__calc_meep_coord__(coord)
             return "meep.vec(%f,%f,[FIXME])" %(x, y)
         elif (self.dim == 2):
-            (x,y) = self.__calc_meep_coord__(coord)
+            (x, y) = self.__calc_meep_coord__(coord)
             return "meep.vec(%f,%f)" %(x, y)
         elif (self.dim == 1):
             (x) = self.__calc_meep_coord__(coord)
@@ -219,7 +219,7 @@
         self.__script__("src%i_center_freq = 1.0 / (float(src%i_center_wavelength) / 1000.0)" %(seq_nr, seq_nr))
         if isinstance(src, __GaussianSource__):
             self.__script__("src%i_pulse_width_wl = %f" %(seq_nr, src.pulse_width))
-            self.__script__("src%i_pulse_width_freq = ( (float(src%i_pulse_width_wl)/1000.0) / (float(src%i_center_wavelength)/1000.0) ) * src%i_center_freq" %(seq_nr,seq_nr,seq_nr,seq_nr))
+            self.__script__("src%i_pulse_width_freq = ( (float(src%i_pulse_width_wl)/1000.0) / (float(src%i_center_wavelength)/1000.0) ) * src%i_center_freq" %(seq_nr, seq_nr, seq_nr, seq_nr))
             self.__script__("meepSource%i = meep.gaussian_src_time(src%i_center_freq, src%i_pulse_width_freq)" %(seq_nr, seq_nr, seq_nr))
         if isinstance(src, __ContinuousSource__):
             self.__script__("meepSource%i = meep.continuous_src_time(src%i_center_freq, %f, %f, %f, %f)" %(seq_nr, seq_nr, src.smoothing_width, src.start_time, src.stop_time, src.cutoff))
@@ -242,7 +242,7 @@
                 self.__script__("ampl = AmplitudeFactorFromFile(config_file = \"%s\")" %file_name)
                 self.__script__("meep.set_AMPL_Callback(ampl.__disown__())")
                 self.__script__("meep_fields.add_volume_source(%s, meepSource%i, meepSrcVol%i, meep.AMPL)" %(meepComp, seq_nr, seq_nr))
-                from cPickle import dump
+                from pickle import dump
                 file_handle = open(file_name, 'w')
                 dump(src.mode_profile, file_handle)
                 file_handle.close()
@@ -258,22 +258,22 @@
         vec1 = self.__make_meep_vec__(flx.north)
         vec2 = self.__make_meep_vec__(flx.south)
         self.__script__("#flux plane %i" %seq_nr)
-        self.__script__("flx%i_vol = meep.volume(%s,%s)" %(seq_nr, vec1,vec2))
-        self.__script__("flx%i_center_wavelength = %f" %(seq_nr,flx.center_wavelength))
+        self.__script__("flx%i_vol = meep.volume(%s,%s)" %(seq_nr, vec1, vec2))
+        self.__script__("flx%i_center_wavelength = %f" %(seq_nr, flx.center_wavelength))
         self.__script__("flx%i_center_freq = 1.0 / (float(flx%i_center_wavelength) / 1000.0)" %(seq_nr, seq_nr))
-        self.__script__("flx%i_pulse_width_wl = %f" %(seq_nr,flx.pulse_width))
-        self.__script__("flx%i_pulse_width_freq = ( (float(flx%i_pulse_width_wl)/1000.0) / (float(flx%i_center_wavelength)/1000.0) ) * flx%i_center_freq" %(seq_nr,seq_nr,seq_nr,seq_nr))
-        self.__script__("flx%i_max_freq = flx%i_center_freq + flx%i_pulse_width_freq / 2.0" %(seq_nr,seq_nr,seq_nr))
-        self.__script__("flx%i_min_freq =  flx%i_center_freq - flx%i_pulse_width_freq / 2.0" %(seq_nr,seq_nr,seq_nr))
+        self.__script__("flx%i_pulse_width_wl = %f" %(seq_nr, flx.pulse_width))
+        self.__script__("flx%i_pulse_width_freq = ( (float(flx%i_pulse_width_wl)/1000.0) / (float(flx%i_center_wavelength)/1000.0) ) * flx%i_center_freq" %(seq_nr, seq_nr, seq_nr, seq_nr))
+        self.__script__("flx%i_max_freq = flx%i_center_freq + flx%i_pulse_width_freq / 2.0" %(seq_nr, seq_nr, seq_nr))
+        self.__script__("flx%i_min_freq =  flx%i_center_freq - flx%i_pulse_width_freq / 2.0" %(seq_nr, seq_nr, seq_nr))
         self.__script__("flx%i_plane = meep_fields.add_dft_flux_plane(flx%i_vol, flx%i_min_freq, flx%i_max_freq, %i )" %(seq_nr, seq_nr, seq_nr, seq_nr, flx.number_of_sampling_freq))
         if not (flx.init_hdf5 is None):
-            self.__script__("flx%i_plane.load_hdf5(meep_fields, \"%s\")" %(seq_nr,flx.init_hdf5.replace(".h5","")))
+            self.__script__("flx%i_plane.load_hdf5(meep_fields, \"%s\")" %(seq_nr, flx.init_hdf5.replace(".h5", "")))
 
 
     def __collectAndSaveFluxplane__(self, filename_prefix, flx, seq_nr = 1):
         self.__script__("#collect flux data and save it to file, so it can be retrieved later for analysis")	
         self.__script__("flux%i_data = meep.getFluxData(flx%i_plane)" %(seq_nr, seq_nr))
-        self.__script__("flux%i_file_handle = open(\"%s\",'w')" %(seq_nr,filename_prefix+".fluxplane_"+flx.name.replace(" ","_")))
+        self.__script__("flux%i_file_handle = open(\"%s\",'w')" %(seq_nr, filename_prefix+".fluxplane_"+flx.name.replace(" ", "_")))
         self.__script__("dump(flux%i_data, flux%i_file_handle)" %(seq_nr, seq_nr))
         self.__script__("flux%i_file_handle.close()" %seq_nr) 	
 
@@ -303,7 +303,7 @@
     stopcriterium = RestrictedProperty(default=__StopCriterium__(), restriction = RestrictType(__StopCriterium__), doc = "Stopcriterium for the simulation procedure.")     
 
     def __init_script_file_handle__(self, filename):
-        self.__script_file_handle__ = open(filename,"w")	
+        self.__script_file_handle__ = open(filename, "w")	
 
     def __close_script_file_handle__(self):
         if not (self.__script_file_handle__ is None):
@@ -316,8 +316,8 @@
         self.interactive_mode = interactive_mode
         try:
             self.visualize_landscape()
-        except Exception, e:
-            print 'Cannot visualize in FDTDFieldCalculationProcedure. Maybe DISPLAY is not set and you''re working remote? Error:', e
+        except Exception as e:
+            print('Cannot visualize in FDTDFieldCalculationProcedure. Maybe DISPLAY is not set and you''re working remote? Error:', e)
         if name_template is None:
             name_template = self.landscape.simulation_volume.name
         script_filename = "meep_"+name_template+".py"
@@ -354,8 +354,8 @@
             if not isinstance(self.stopcriterium, __StopCriterium__):
                 self.__script__("#STOPCRITERIUM : type %s was not yet implemented : manually add the code for your stopcriterium" %type(self.stopcriterium))
         self.engine.fini_script(self.landscape, self.__script__, name_template)
-        self.__script__(append_script.replace("%name",name_template))
+        self.__script__(append_script.replace("%name", name_template))
         self.__close_script_file_handle__()
-        print "Meep script generated : %s" %script_filename
-
-
+        print("Meep script generated : %s" %script_filename)
+
+
--- ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py	(original)
+++ ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py	(refactored)
@@ -28,10 +28,10 @@
 
 try:
     import meep as meep
-except ImportError, e:
+except ImportError as e:
     try :
         import meep_mpi as meep
-    except ImportError, e:
+    except ImportError as e:
         raise Exception("Modules 'meep' or 'meep_mpi' not found.")    
 
 
@@ -52,7 +52,7 @@
         for c in coords :
             x = c[0] - self.south_west_coord[0]
             y = c[1] - self.south_west_coord[1]
-            transformed_coords.append([x,y])
+            transformed_coords.append([x, y])
         arr = numpy.array(transformed_coords)
         arr = arr[:-1]
         return arr
@@ -80,7 +80,7 @@
 
     def __get_config_from_file__(self, file_name):RefactoringTool: Writing converted ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py to ipkissat3\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py.
RefactoringTool: No changes to ipkiss24\pysimul\runtime\camfr_engine\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\runtime\camfr_engine\__init__.py to ipkissat3\pysimul\runtime\camfr_engine\__init__.py.
RefactoringTool: Refactored ipkiss24\pysimul\runtime\camfr_engine\camfr_engine.py

         file_handle = open(file_name, "r")
-        from cPickle import load
+        from pickle import load
         (bitmap_polygons, eps_values, south_west) = load(file_handle)
         file_handle.close()
         return (bitmap_polygons, eps_values, south_west)
@@ -99,7 +99,7 @@
 
     def __get_config_from_file__(self, file_name):
         file_handle = open(file_name, "r")
-        from cPickle import load	
+        from pickle import load	
         (bitmap_polygons, material_stack_ids, south_west, material_stacks_npy, n_o_material_stacks) = load(file_handle)
         file_handle.close()
         return (bitmap_polygons, material_stack_ids, south_west, material_stacks_npy, n_o_material_stacks)     
@@ -108,8 +108,8 @@
         meep.PolygonCallback3D.__init__(self)
         (bitmap_polygons, material_stack_ids, south_west, material_stacks_npy, n_o_material_stacks)  = self.__get_config_from_file__(config_file)
         self.south_west_coord = south_west
-        self.add_material_stacks_from_numpy_matrix(material_stacks_npy,n_o_material_stacks)
-        for bitmap_polygon, material_stack_id in zip(bitmap_polygons,material_stack_ids)[1:]: #ignore canvas polygon
+        self.add_material_stacks_from_numpy_matrix(material_stacks_npy, n_o_material_stacks)
+        for bitmap_polygon, material_stack_id in zip(bitmap_polygons, material_stack_ids)[1:]: #ignore canvas polygon
             self.__add_bitmap_polygon__(bitmap_polygon, material_stack_id)
 
 
@@ -120,7 +120,7 @@
         self.mode_profile = self.__get_config_from_file__(config_file)
 
     def __get_config_from_file__(self, file_name):	
-        from cPickle import load
+        from pickle import load
         file_handle = open(file_name, 'r')
         mode_profile = load(file_handle)
         return mode_profile
@@ -133,16 +133,16 @@
         f = float(i(coordinate_relative_to_port_position[1]))	
         return f
 
-    def complex_vec(self,vec):
+    def complex_vec(self, vec):
         #BEWARE, these are coordinates RELATIVE to the source center !!!!
         try:
             x = vec.x()
             y = vec.y()
-            factor = self.__get_amplitude_factor__([x,y])	
+            factor = self.__get_amplitude_factor__([x, y])	
             if (isinstance(factor, complex)):
                 return factor
             else:
                 return complex(factor)
-        except Exception, e:
-            print "Exception in AmplitudeFactor::complex_vec (%f,%f): %s" %(x,y,e)
+        except Exception as e:
+            print("Exception in AmplitudeFactor::complex_vec (%f,%f): %s" %(x, y, e))
             raise e
--- ipkiss24\pysimul\runtime\camfr_engine\camfr_engine.py	(original)
+++ ipkiss24\pysimul\runtime\camfr_engine\camfr_engine.py	(refactored)
@@ -31,7 +31,7 @@
 from ipkiss.geometry.vector import *
 try:
     import camfr 
-except ImportError,e:
+except ImportError as e:
     raise PythonSimulateException("Cannot load CAMFR engine:%s"%e.message)
 from ipkiss.plugins.photonics.port.port import OpticalPort
 from pysics.basics import *
@@ -50,14 +50,14 @@
 TECH.CAMFR.PML = -0.05
 TECH.CAMFR.WAVELENGTH = 1550
 
-PLOTCOLOR = ['g','r','b','y','c','m','k','ro']
+PLOTCOLOR = ['g', 'r', 'b', 'y', 'c', 'm', 'k', 'ro']
 global PLOTCOLORCOUNTER
 PLOTCOLORCOUNTER = 0
 
 class IncFieldParameters(object):
     params = dict()
 
-    def set_parameter(self,name,value):
+    def set_parameter(self, name, value):
         self.params[name] = value
 
     def get_parameter(self, name):
@@ -126,7 +126,7 @@
         n_o_sources = len(landscape.sources)
         if (n_o_sources!=1):
             raise PythonSimulateException("Expected exactly 1 source and got %i...." %n_o_sources)
-        elif type(landscape.sources[0]) != ContinuousPointSource:
+        elif not isinstance(landscape.sources[0], ContinuousPointSource):
             raise PythonSimulateException("Expected a datasource of type ContinuousPointSource, but got type %s..." %str(type(landscape.sources[0])))
         self.camfr_technology = copy.deepcopy(TECH.CAMFR)
         self.camfr_technology.WAVELENGTH = landscape.sources[0].center_wavelength
@@ -135,7 +135,7 @@
     def set_camfr_settings(self, camfr_technology):
         camfr_technology.overwrite_allowed = ["WAVELENGTH"] 
         self.camfr_technology = camfr_technology	
-        if (type(self.camfr_technology.WAVELENGTH) == int):
+        if (isinstance(self.camfr_technology.WAVELENGTH, int)):
             raise Exception("Invalid type for camfr_technology.WAVELENGTH : expected float, not int. ")	
         if (self.camfr_technology.WAVELENGTH > 1.7) or (self.camfr_technology.WAVELENGTH<1.0):
             raise Exception("Invalid range for camfr_technology.WAVELENGTH : expected a float value between 1.0 (1000 nm) and 1.7 (1.7000nm). ")		    
@@ -155,7 +155,7 @@
         inc[0] = 1
         return camfr_stack.set_inc_field(inc) 
 
-    def set_mode_profile_field(self, camfr_stack,inc_field, si_south):
+    def set_mode_profile_field(self, camfr_stack, inc_field, si_south):
         inc_field_parameters= IncFieldParameters()
 
         inc_field_parameters.set_parameter("inc_field_x_coord", inc_field[0])
@@ -195,7 +195,7 @@
         #the other columns will indicate if there is a difference between that columns in "eps" and the next column
         deltas = numpy.ones_like(eps)
         d = numpy.diff(eps, axis=0)
-        for d_counter in xrange(d.shape[0]):
+        for d_counter in range(d.shape[0]):
             deltas[d_counter+1] = d[d_counter]
         #now identify the slabs and their width
         slabs_specifications = []
@@ -307,7 +307,7 @@
                 geometry_x_position = z_position + si.west		    
                 fp = ElectroMagneticFieldProfile2D(positions = [Coord2(geometry_x_position, camfr_x + si.south) for camfr_x in camfr_x_positions], fields = f)
                 field_profiles.append(fp)
-                transmission = camfr_stack.T21(0,0)
+                transmission = camfr_stack.T21(0, 0)
 
                 if self.save_images:
                     #ensure that output directories exist
@@ -330,12 +330,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')	
-                    image_file = "%sHz_%f_W%f_%s"%(img_output_dir,geometry_x_position,self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sHz_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     #save values to csv   
-                    csv_file = image_file.replace('images','csv')
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.H.value.z.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()	 
@@ -349,12 +349,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')
-                    image_file = "%sHy_%f_W%f_%s"%(img_output_dir,geometry_x_position,self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sHy_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     #save values to csvRefactoringTool: Writing converted ipkiss24\pysimul\runtime\camfr_engine\camfr_engine.py to ipkissat3\pysimul\runtime\camfr_engine\camfr_engine.py.
RefactoringTool: No changes to ipkiss24\pysimul\visualization\__init__.py
RefactoringTool: Writing converted ipkiss24\pysimul\visualization\__init__.py to ipkissat3\pysimul\visualization\__init__.py.
RefactoringTool: Refactored ipkiss24\pysimul\visualization\visualization.py

-                    csv_file = image_file.replace('images','csv')	    
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')	    
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.H.value.y.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()		    
@@ -368,12 +368,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')                
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')
-                    image_file = "%sHx_%f_W%f_%s"%(img_output_dir,geometry_x_position,self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sHx_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     #save values to csv
-                    csv_file = image_file.replace('images','csv')	    
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')	    
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.H.value.x.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()
@@ -387,12 +387,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')                
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')	    
-                    image_file = "%sEz_%f_W%f_%s"%(img_output_dir,geometry_x_position,self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sEz_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     ##save values to csv
-                    csv_file = image_file.replace('images','csv')	    
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')	    
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.E.value.z.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()
@@ -406,12 +406,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')                
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')
-                    image_file = "%sEy_%f_W%f_%s"%(img_output_dir,geometry_x_position, self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sEy_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     ##save values to csv
-                    csv_file = image_file.replace('images','csv')	    
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')	    
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.E.value.y.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()	    
@@ -425,12 +425,12 @@
                     #pyplot.plot(geometry_y_positions,field_for_plot_abs ,'g')                
                     #pyplot.plot(geometry_y_positions,field_for_plot_real,'b')
                     #pyplot.plot(geometry_y_positions,field_for_plot_imag,'r')	    
-                    image_file = "%sEx_%f_W%f_%s"%(img_output_dir,geometry_x_position,self.camfr_technology.WAVELENGTH,mode_profile_figure_filename)
+                    image_file = "%sEx_%f_W%f_%s"%(img_output_dir, geometry_x_position, self.camfr_technology.WAVELENGTH, mode_profile_figure_filename)
                     #pyplot.savefig(image_file)
                     ##save values to csv
-                    csv_file = image_file.replace('images','csv')	    
-                    csv_file = csv_file.replace('png','csv')
-                    csv_file_handle = open(csv_file,'w')
+                    csv_file = image_file.replace('images', 'csv')	    
+                    csv_file = csv_file.replace('png', 'csv')
+                    csv_file_handle = open(csv_file, 'w')
                     data_for_csv = [[p, f.E.value.x.real] for p, f in zip(geometry_y_positions, fp.fields)] 	    
                     numpy.savetxt(csv_file_handle, numpy.array(data_for_csv), delimiter=', ')
                     csv_file_handle.close()	    
--- ipkiss24\pysimul\visualization\visualization.py	(original)
+++ ipkiss24\pysimul\visualization\visualization.py	(refactored)
@@ -68,10 +68,10 @@
         ##legend
         from dependencies.matplotlib_wrapper import font_manager
         prop = font_manager.FontProperties(size=10) 
-        patches_for_legend = [ref[0] for ref in references_for_legend.values()]
-        labels_for_legend = [ref[1] for ref in references_for_legend.values()]
+        patches_for_legend = [ref[0] for ref in list(references_for_legend.values())]
+        labels_for_legend = [ref[1] for ref in list(references_for_legend.values())]
 
-        ax.legend(patches_for_legend, labels_for_legend, loc=(0.5,0.9), prop=prop)
+        ax.legend(patches_for_legend, labels_for_legend, loc=(0.5, 0.9), prop=prop)
 
         ax.autoscale_view()	
 
@@ -81,15 +81,15 @@
 
 class SimulationVolumeVisualization3D(SimulationVolumeVisualization2D):
 
-    def make_povray_file(self, camera_pos, look_at=(0,0,1), z_extrusion_factor = 1.0):
+    def make_povray_file(self, camera_pos, look_at=(0, 0, 1), z_extrusion_factor = 1.0):
         #initialize povray	
         file_name = "%s.pov"%(self.simulation_volume.name)
         from dependencies.povray_wrapper import PovrayFile, Background, Camera, LightSource, Prism, Texture, Pigment
-        povray_file=PovrayFile(file_name,"colors.inc","stones.inc")
+        povray_file=PovrayFile(file_name, "colors.inc", "stones.inc")
         bg = Background(color = "White")
         pov_camera_pos = (camera_pos[0], camera_pos[2], camera_pos[1])
-        pov_look_at = (look_at[0],look_at[2],look_at[1])
-        cam = Camera(location=pov_camera_pos,look_at=pov_look_at)
+        pov_look_at = (look_at[0], look_at[2], look_at[1])
+        cam = Camera(location=pov_camera_pos, look_at=pov_look_at)
         light = LightSource(pov_camera_pos, color="White")
         povray_file.write( bg, cam, light)
         #convert virtual fabrication polygons to povray prisms
@@ -100,9 +100,9 @@
             solid_height = geom.material_stack_factory[material_stack_id].solid_height
             if len(shape.points)>0 and solid_height>0:
                 povray_prism = Prism(shape.points, heights= (0, solid_height * z_extrusion_factor), opts = [Texture(Pigment(color=color.capitalize()))])RefactoringTool: Writing converted ipkiss24\pysimul\visualization\visualization.py to ipkissat3\pysimul\visualization\visualization.py.
RefactoringTool: No changes to ipkiss24\samples\__init__.py
RefactoringTool: Writing converted ipkiss24\samples\__init__.py to ipkissat3\samples\__init__.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\__init__.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\__init__.py to ipkissat3\samples\ipkiss\__init__.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\array_of_rings.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\array_of_rings.py to ipkissat3\samples\ipkiss\array_of_rings.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\boolean_ops_shape.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\boolean_ops_shape.py to ipkissat3\samples\ipkiss\boolean_ops_shape.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\elements.py

-                print "Writing prism with %i points for %s (solid height : %f) in %s" %(len(shape.points), geom.material_stack_factory[material_stack_id].name, geom.material_stack_factory[material_stack_id].solid_height, color)
+                print("Writing prism with %i points for %s (solid height : %f) in %s" %(len(shape.points), geom.material_stack_factory[material_stack_id].name, geom.material_stack_factory[material_stack_id].solid_height, color))
                 povray_file.write(povray_prism)
-        print "Povray file generated : ",file_name
+        print("Povray file generated : ", file_name)
 
 
 
--- ipkiss24\samples\ipkiss\__init__.py	(original)
+++ ipkiss24\samples\ipkiss\__init__.py	(refactored)
@@ -19,12 +19,12 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from simple import SimpleExample 
-from shapes_advanced import AdvancedShapesExample 
-from shapes import ShapesExample
-from references import ReferencesExample
-from importLib import ImportLibraryExample
-from elements import ElementsExample
+from .simple import SimpleExample 
+from .shapes_advanced import AdvancedShapesExample 
+from .shapes import ShapesExample
+from .references import ReferencesExample
+from .importLib import ImportLibraryExample
+from .elements import ElementsExample
 
 
 
--- ipkiss24\samples\ipkiss\array_of_rings.py	(original)
+++ ipkiss24\samples\ipkiss\array_of_rings.py	(refactored)
@@ -39,7 +39,7 @@
         def define_elements(self, elems):
                 r = Ring(radius = self.ring_radius)
                 delta = 2.0*r.radius + 5.0
-                elems += ARef(reference = r, origin = self.origin, period = (delta,delta), n_o_periods = (self.n_of_rings_width, self.n_of_rings_height))
+                elems += ARef(reference = r, origin = self.origin, period = (delta, delta), n_o_periods = (self.n_of_rings_width, self.n_of_rings_height))
                 return elems
 
 #we now create an instance of such an array and export to GDS
--- ipkiss24\samples\ipkiss\boolean_ops_shape.py	(original)
+++ ipkiss24\samples\ipkiss\boolean_ops_shape.py	(refactored)
@@ -24,8 +24,8 @@
 
 # First create 2 ShapeCircle's and corresponding boundaries to start from...
 
-sc1 = ShapeCircle(center = (0.0,0.0), radius = 10.0)
-sc2 = ShapeCircle(center = (12.0,0.0), radius = 7.0)
+sc1 = ShapeCircle(center = (0.0, 0.0), radius = 10.0)
+sc2 = ShapeCircle(center = (12.0, 0.0), radius = 7.0)
 
 cp1 = Boundary(layer = Layer(1), shape = sc1)
 cp2 = Boundary(layer = Layer(1), shape = sc2)
--- ipkiss24\samples\ipkiss\elements.py	(original)
+++ ipkiss24\samples\ipkiss\elements.py	(refactored)
@@ -32,7 +32,7 @@
         #start with an empty list of elements and append
         for i in range (5, 50, 5):
             #horizontal line
-            L = Line(layer = Layer(0), begin_coord = (0, i), end_coord = (2 * i,i), line_width = 1.0)
+            L = Line(layer = Layer(0), begin_coord = (0, i), end_coord = (2 * i, i), line_width = 1.0)
             lines += L
             #diagonal line
             lines += Line(Layer(0), (10+i, 0), (10+2*i, i), 1.0)
@@ -48,7 +48,7 @@
         tapers = Structure("tapers")
         for i in range (10, 60, 10):
             #horizontal taper
-            tapers += Wedge(layer = Layer(0), begin_coord = (0, i), end_coord = (100,i), begin_width = 1.0, end_width = i/10.0)
+            tapers += Wedge(layer = Layer(0), begin_coord = (0, i), end_coord = (100, i), begin_width = 1.0, end_width = i/10.0)
             #diagonal taper
             tapers += ParabolicWedge(Layer(0), (150+i, 0), (210+i, 60), 1.0, i/10.0)
             
@@ -59,9 +59,9 @@
         xpos = 0
         for i in range (5, 30, 5):
             #circle
-            circles += Circle(layer = Layer(0), center = (xpos,0), radius = i)
+            circles += Circle(layer = Layer(0), center = (xpos, 0), radius = i)
             #concentric ring
-            circles += CirclePath(Layer(0), (xpos,0), i+10, 2.0)
+            circles += CirclePath(Layer(0), (xpos, 0), i+10, 2.0)
             xpos += 80
         
         
@@ -71,9 +71,9 @@
         xpos = 0
         for i in range (5, 30, 5):
             #filled ellipse
-            ellipses += Ellipse(layer = Layer(0), center = (xpos,0), box_size = (2 * i, 60))
+            ellipses += Ellipse(layer = Layer(0), center = (xpos, 0), box_size = (2 * i, 60))
             #elliptic ring
-            ellipses += EllipsePath( Layer(0), (xpos,0), (60, 2*i), 2.0)
+            ellipses += EllipsePath( Layer(0), (xpos, 0), (60, 2*i), 2.0)
             xpos += 80
         
         ##------------------------
@@ -81,16 +81,16 @@
         arcs = Structure("arcs")
         for i in range (5, 50, 5):
             #circular arc
-            arcs += ArcPath(layer = Layer(0), center = (0,0), radius  = i, start_angle = 0, end_angle = 120, line_width = 1.0)
+            arcs += ArcPath(layer = Layer(0), center = (0, 0), radius  = i, start_angle = 0, end_angle = 120, line_width = 1.0)
             #elliptical_arc
-            arcs += EllipseArcPath(layer = Layer(0), center = (120,0), box_size = (2 * i, i) , start_angle = 45, end_angle = 270, line_width = 1.0)
+            arcs += EllipseArcPath(layer = Layer(0), center = (120, 0), box_size = (2 * i, i), start_angle = 45, end_angle = 270, line_width = 1.0)
             
         ##------------------------
         ##Bend and relativebend
         bends = Structure("bends")
         for i in range (5, 50, 5):
-            bends += BendPath(layer = Layer(0), start_point = (0,0), radius = i, line_width = 1.5, input_angle=60.0, output_angle = 90.0+i*2.0)
-            bends += RelativeBendPath(layer = Layer(0), start_point = (100,0), radius = i, line_width = 1.5, input_angle=60.0, angle_amount = 30.0+i*2.0)        
+            bends += BendPath(layer = Layer(0), start_point = (0, 0), radius = i, line_width = 1.5, input_angle=60.0, output_angle = 90.0+i*2.0)
+            bends += RelativeBendPath(layer = Layer(0), start_point = (100, 0), radius = i, line_width = 1.5, input_angle=60.0, angle_amount = 30.0+i*2.0)        
         
         ##---------------------------------
         ##rectangles and rounded rectangles
@@ -98,17 +98,17 @@
         xpos = 0
         for i in range (5, 30, 5):
             #filled rectangle using Rectangle
-            rectangles += Rectangle(layer = Layer(0), center = (xpos,0), box_size = (2 * i, 50))
+            rectangles += Rectangle(layer = Layer(0), center = (xpos, 0), box_size = (2 * i, 50))
             #rectangular line 
-            rectangles += RectanglePath( Layer(0), (xpos,0), (2*i + 10, 60), line_width = 2.0)
+            rectangles += RectanglePath( Layer(0), (xpos, 0), (2*i + 10, 60), line_width = 2.0)
             #filled slightly round rectangle using RoundedRectangle
-            rectangles += RoundedRectangle( layer = Layer(0), center = (xpos,-100), box_size = (2 * i, 50), radius = 1)
+            rectangles += RoundedRectangle( layer = Layer(0), center = (xpos, -100), box_size = (2 * i, 50), radius = 1)
             #slightly rounded rectangular line 
-            rectangles += RoundedRectanglePath(Layer(0), (xpos,-100), (2*i+10, 60), 1, 2.0)
+            rectangles += RoundedRectanglePath(Layer(0), (xpos, -100), (2*i+10, 60), 1, 2.0)
             #very slightly round rectangle using RoundedRectangle
-            rectangles += RoundedRectangle( Layer(0), (xpos,-200), (2 * i, 50), i)
+            rectangles += RoundedRectangle( Layer(0), (xpos, -200), (2 * i, 50), i)
             #very rounded rectangular line 
-            rectangles += RoundedRectanglePath(Layer(0), (xpos,-200), (2*i+10, 60), i, 2.0)
+            rectangles += RoundedRectanglePath(Layer(0), (xpos, -200), (2*i+10, 60), i, 2.0)
             xpos += 80
         
         #------------------------------------------------------------------
@@ -118,7 +118,7 @@
         xpos = 0
         for i in range (5, 30, 5):
             #filled rectangle using Box
-            boxes += Box(layer = Layer(0), center = (xpos + i,25), box_size = (2 * i, 50))
+            boxes += Box(layer = Layer(0), center = (xpos + i, 25), box_size = (2 * i, 50))RefactoringTool: Writing converted ipkiss24\samples\ipkiss\elements.py to ipkissat3\samples\ipkiss\elements.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\importLib.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\importLib.py to ipkissat3\samples\ipkiss\importLib.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\logos.py

             xpos += 80
         
         
@@ -128,9 +128,9 @@
         xpos = 0
         for i in range (5, 10):
             #filled regular_polygon
-            polygons += RegularPolygon(layer = Layer(0), center = (xpos,0), radius = 20, n_o_sides = i )
+            polygons += RegularPolygon(layer = Layer(0), center = (xpos, 0), radius = 20, n_o_sides = i )
             #regular_polygon line
-            polygons += RegularPolygonPath(layer = Layer(0), center = (xpos,0), radius = 30, n_o_sides = i, line_width = 2.0 )
+            polygons += RegularPolygonPath(layer = Layer(0), center = (xpos, 0), radius = 30, n_o_sides = i, line_width = 2.0 )
             xpos += 80
         
         ##-------------------------------------------------------------------
@@ -138,7 +138,7 @@
         markers = Structure("markers")
         xpos = 0
         for i in range (5, 25, 5):
-            markers += Cross (layer = Layer(0), center = (xpos,0), box_size = 40, thickness = i)
+            markers += Cross (layer = Layer(0), center = (xpos, 0), box_size = 40, thickness = i)
             xpos += 60
         
         #------------------------------------------------------------------
@@ -147,44 +147,44 @@
         lattice_constant = 5.0
         
         # 1 hexagon structure
-        hexagon = Structure("hexagon", Hexagon (layer = Layer(0), center = (0.0,0.0), radius = hexagon_radius))
+        hexagon = Structure("hexagon", Hexagon (layer = Layer(0), center = (0.0, 0.0), radius = hexagon_radius))
         
         # Now make a unit cell of a triangular lattice, consisting of 2 hexagons
         # because we already have a hexagon, we use a reference to the existing hexagon
         unit_cell = Structure("lattice_unit_cell")
         
         translation_vector = (lattice_constant/2.0, sqrt(3) * lattice_constant / 2.0)
-        unit_cell += SRef (hexagon, position = (0.0,0.0))
+        unit_cell += SRef (hexagon, position = (0.0, 0.0))
         unit_cell += SRef (hexagon, position = translation_vector)
         
         # Now we will take this unit cell, and make an array reference (aref) of it
         lattice = Structure("lattice")
         n_o_periods = (40, 10) #in X and Y-direction
         lattice_vector = (lattice_constant, sqrt(3) * lattice_constant) #translation in X and Y
-        lattice += ARef (unit_cell, origin = (0.0,0.0), period = lattice_vector, n_o_periods = n_o_periods)
+        lattice += ARef (unit_cell, origin = (0.0, 0.0), period = lattice_vector, n_o_periods = n_o_periods)
         
         #-------------------------------------------------------------------
         #Noughts and crosses
         
         # a nought
-        nought = Structure("nought", CirclePath (Layer(0), (0,0), 15, 6))
+        nought = Structure("nought", CirclePath (Layer(0), (0, 0), 15, 6))
         # a cross
-        cross = Structure("cross", [Line(Layer(0), (-15,-15), (15,15),6) , Line(Layer(0), (-15,15), (15,-15),6)])
+        cross = Structure("cross", [Line(Layer(0), (-15, -15), (15, 15), 6), Line(Layer(0), (-15, 15), (15, -15), 6)])
         # noughts and crosses
         tic_tac_toe = Structure("tic_tac_toe")
-        tic_tac_toe += Line (Layer(0),(50,0),(50,-150),3) + Line (Layer(0),(100,0),(100,-150),3) #vertical lines
-        tic_tac_toe += Line (Layer(0),(0,-50),(150,-50),3) + Line (Layer(0),(0,-100),(150,-100),3) #vertical lines
-        
-        tic_tac_toe += (SRef(nought, (25,-25))
-                   + SRef(nought, (75,-25))
-                   + SRef(nought, (125,-75))
-                   + SRef(nought, (25,-125))
-                   + SRef(nought, (75,-125)))
+        tic_tac_toe += Line (Layer(0), (50, 0), (50, -150), 3) + Line (Layer(0), (100, 0), (100, -150), 3) #vertical lines
+        tic_tac_toe += Line (Layer(0), (0, -50), (150, -50), 3) + Line (Layer(0), (0, -100), (150, -100), 3) #vertical lines
+        
+        tic_tac_toe += (SRef(nought, (25, -25))
+                   + SRef(nought, (75, -25))
+                   + SRef(nought, (125, -75))
+                   + SRef(nought, (25, -125))
+                   + SRef(nought, (75, -125)))
                    #references to noughts
-        tic_tac_toe += (SRef(cross, (125,-25))
-                   + SRef(cross, (25,-75))
-                   + SRef(cross, (75,-75))
-                   + SRef(cross, (125,-125)))
+        tic_tac_toe += (SRef(cross, (125, -25))
+                   + SRef(cross, (25, -75))
+                   + SRef(cross, (75, -75))
+                   + SRef(cross, (125, -125)))
                    #references to crosses
         
         #-------------------------------------------------------------------
@@ -202,13 +202,13 @@
         #-------------------------------------------------------------------
         #construct a polygon from scratch
         enterprise = Structure("enterprise")
-        coordinates = Shape([(-179,54), (101,54), (101,149), (59,149), (-11,172), (-39,209), (-11,246),
-                                 (59,268), (696,268), (768,246), (795,209), (768,172), (696,149), (147,149),
-                                 (147,54), (186,54), (238,31), (258,-5), (238,-42), (186,-65), (147,-65),
-                                 (147,-139), (696,-139), (768,-161), (795,-198), (768,-235), (696,-258), (59,-258),
-                                 (-11,-235), (-39,-198), (-11,-161), (59,-139), (101,-139), (101,-65), (-179,-65),
-                                 (-179,-100), (-297,-262), (-487,-323), (-678,-262), (-795,-100), (-795,100),
-                                 (-678,262), (-487,323), (-297,262), (-179,100)],
+        coordinates = Shape([(-179, 54), (101, 54), (101, 149), (59, 149), (-11, 172), (-39, 209), (-11, 246),
+                                 (59, 268), (696, 268), (768, 246), (795, 209), (768, 172), (696, 149), (147, 149),
+                                 (147, 54), (186, 54), (238, 31), (258, -5), (238, -42), (186, -65), (147, -65),
+                                 (147, -139), (696, -139), (768, -161), (795, -198), (768, -235), (696, -258), (59, -258),
+                                 (-11, -235), (-39, -198), (-11, -161), (59, -139), (101, -139), (101, -65), (-179, -65),
+                                 (-179, -100), (-297, -262), (-487, -323), (-678, -262), (-795, -100), (-795, 100),
+                                 (-678, 262), (-487, 323), (-297, 262), (-179, 100)],
                                  closed = True
                                  )
         coordinates.magnify((0.0, 0.0), 0.1)
--- ipkiss24\samples\ipkiss\importLib.py	(original)
+++ ipkiss24\samples\ipkiss\importLib.py	(refactored)
@@ -32,8 +32,8 @@
                   #--------------------------------------------------
                   # Make a simple structure containing two rectangles
                   rectangles = Structure("rectangles")
-                  rectangles += [ Rectangle(layer = Layer(0), center = (0.0, -150),box_size = (200, 200.0)),
-                                            RectanglePath(layer = Layer(0), center = (0.0, 150),box_size = (200, 200.0), line_width= 4.0) ]                                    
+                  rectangles += [ Rectangle(layer = Layer(0), center = (0.0, -150), box_size = (200, 200.0)),
+                                            RectanglePath(layer = Layer(0), center = (0.0, 150), box_size = (200, 200.0), line_width= 4.0) ]                                    
                   #import another GDS-II file, put it in the
                   #structure "imported" and prefix all structure names with "imp_"
                   fnGds = path.join(my_path, "import/hex.gds")
--- ipkiss24\samples\ipkiss\logos.py	(original)
+++ ipkiss24\samples\ipkiss\logos.py	(refactored)
@@ -44,11 +44,11 @@
         # Layout with references to all other structures
         ypos = 200
         xpos = 0
-        elems += SRef(intec, (xpos,ypos))
+        elems += SRef(intec, (xpos, ypos))
         xpos += 250
-        elems += SRef(ugent, (xpos,ypos))
+        elems += SRef(ugent, (xpos, ypos))
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\logos.py to ipkissat3\samples\ipkiss\logos.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\references.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\references.py to ipkissat3\samples\ipkiss\references.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\shapes.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\shapes.py to ipkissat3\samples\ipkiss\shapes.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\shapes_advanced.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\shapes_advanced.py to ipkissat3\samples\ipkiss\shapes_advanced.py.
RefactoringTool: Refactored ipkiss24\samples\ipkiss\simple.py
RefactoringTool: Writing converted ipkiss24\samples\ipkiss\simple.py to ipkissat3\samples\ipkiss\simple.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\__init__.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\__init__.py to ipkissat3\samples\picazzo\__init__.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\__init__.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\__init__.py to ipkissat3\samples\picazzo\advanced\__init__.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\boolean_ops_structure.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\boolean_ops_structure.py to ipkissat3\samples\picazzo\advanced\boolean_ops_structure.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example.py
         xpos += 250
-        elems += SRef(imec, (xpos,ypos))               
+        elems += SRef(imec, (xpos, ypos))               
         return elems
 
 if __name__ == "__main__":
@@ -60,7 +60,7 @@
         OP = FileOutputGdsii(fileName)
         # Write library
         OP.write(my_lib)
-        print "Done : GDS2 file written to %s" %fileName    
+        print("Done : GDS2 file written to %s" %fileName)    
         #remark : instead of manually creating a Library and exporting it to GDS2, it is also possible to use 
         #the convenient shortcut function "write_gdsii" directly on the Structure, i.e.:
         #layout.write_gdsii("example_logos.gds")        
--- ipkiss24\samples\ipkiss\references.py	(original)
+++ ipkiss24\samples\ipkiss\references.py	(refactored)
@@ -36,7 +36,7 @@
     
     def define_elements(self, elems):
         #define a shape: a list of coordinates
-        s = Shape([(10.0, 0.0), (15.0, 10.0), (0.0, 10.0), (0.0,5.0), (-15.0, 5.0), (-5.0, 0.0),
+        s = Shape([(10.0, 0.0), (15.0, 10.0), (0.0, 10.0), (0.0, 5.0), (-15.0, 5.0), (-5.0, 0.0),
              (-10.0, -10.0), (-5.0, -15.0), (10.0, -15.0), (5.0, -10.0), (5.0, -5.0), (10.0, 0.0)])        
         
         #create an element and then a structure from the shape
@@ -75,9 +75,9 @@
         
         
         #create a reference axis
-        axis = Structure("axis", Path(Layer(2), [(0.0, 300.0), (0.0,0.0), (300.0, 0.0)], 1))
+        axis = Structure("axis", Path(Layer(2), [(0.0, 300.0), (0.0, 0.0), (300.0, 0.0)], 1))
         
-        elems += SRef(shapes_3_ref2,(0.0, 0.0))
+        elems += SRef(shapes_3_ref2, (0.0, 0.0))
         elems += SRef(axis, (0.0, 0.0))
         return elems
     
@@ -91,7 +91,7 @@
     OP = FileOutputGdsii(fileName, filter = OrthogonalReferenceFilter())
     # Write library
     OP.write(my_lib)
-    print "Done : GDS2 file written to %s" %fileName       
+    print("Done : GDS2 file written to %s" %fileName)       
     
     
 
--- ipkiss24\samples\ipkiss\shapes.py	(original)
+++ ipkiss24\samples\ipkiss\shapes.py	(refactored)
@@ -36,7 +36,7 @@
     
     def define_elements(self, elems):
         #define a shape: a list of coordinates
-        s = Shape([(10.0, 0.0), (15.0, 10.0), (0.0, 10.0), (0.0,5.0), (-15.0, 5.0), (-5.0, 0.0),
+        s = Shape([(10.0, 0.0), (15.0, 10.0), (0.0, 10.0), (0.0, 5.0), (-15.0, 5.0), (-5.0, 0.0),
                        (-10.0, -10.0), (-5.0, -15.0), (10.0, -15.0), (5.0, -10.0), (5.0, -5.0)],
                        closed = True)
         
@@ -104,7 +104,7 @@
         OP = FileOutputGdsii(fileName)
         # Write library
         OP.write(my_lib)
-        print "Done : GDS2 file written to %s" %fileName    
+        print("Done : GDS2 file written to %s" %fileName)    
         #remark : instead of manually creating a Library and exporting it to GDS2, it is also possible to use 
         #the convenient shortcut function "write_gdsii" directly on the Structure, i.e.:
         #layout.write_gdsii("example_shapes.gds")
--- ipkiss24\samples\ipkiss\shapes_advanced.py	(original)
+++ ipkiss24\samples\ipkiss\shapes_advanced.py	(refactored)
@@ -51,7 +51,7 @@
             end_coord = (40.0, i * 5 - 20.0)
             ala += Path(Layer(0), ShapeArcLineArc(start_coord, start_angle, radius, end_coord, end_angle, radius), 0.2)        
         #define a shape: a list of coordinates        
-        elems += [ SRef(ala,(0.0, 0.0)) ]
+        elems += [ SRef(ala, (0.0, 0.0)) ]
         return elems
         
 
@@ -64,7 +64,7 @@
         OP = FileOutputGdsii(fileName)
         # Write library
         OP.write(my_lib)
-        print "Done : GDS2 file written to %s" %fileName    
+        print("Done : GDS2 file written to %s" %fileName)    
         #remark : instead of manually creating a Library and exporting it to GDS2, it is also possible to use 
         #the convenient shortcut function "write_gdsii" directly on the Structure, i.e.:
         #layout.write_gdsii("example_advshapes.gds")        
--- ipkiss24\samples\ipkiss\simple.py	(original)
+++ ipkiss24\samples\ipkiss\simple.py	(refactored)
@@ -28,16 +28,16 @@
 
     def define_elements(self, elems):
         boundaries = Structure(name = "boundaries")
-        boundaries += Rectangle  (layer=Layer(0), center=(0,150),box_size=(200, 200.0)) #rectangle 
+        boundaries += Rectangle  (layer=Layer(0), center=(0, 150), box_size=(200, 200.0)) #rectangle 
 
-        boundaries += Circle(layer=Layer(1), center=(0,-150), radius=100) #circle        
+        boundaries += Circle(layer=Layer(1), center=(0, -150), radius=100) #circle        
    
         paths = Structure(name = "paths")
-        paths += RectanglePath(layer=Layer(2), center=(0,150),box_size=(200, 200), line_width=4.0) #rectangle
-        paths += CirclePath(layer=Layer(3), center=(0,-150),radius=100, line_width=4.0) #circle 
+        paths += RectanglePath(layer=Layer(2), center=(0, 150), box_size=(200, 200), line_width=4.0) #rectangle
+        paths += CirclePath(layer=Layer(3), center=(0, -150), radius=100, line_width=4.0) #circle 
  
-        elems +=  SRef(boundaries, (0,0))
-        elems += SRef(paths, (300,0))   #simple references
+        elems +=  SRef(boundaries, (0, 0))
+        elems += SRef(paths, (300, 0))   #simple references
 
         return elems
     
@@ -51,7 +51,7 @@
         OP = FileOutputGdsii(fileName)
         # Write library
         OP.write(my_lib)
-        print "Done : GDS2 file written to %s" %fileName       
+        print("Done : GDS2 file written to %s" %fileName)       
         #remark : instead of manually creating a Library and exporting it to GDS2, it is also possible to use 
         #the convenient shortcut function "write_gdsii" directly on the Structure, i.e.:
         #layout.write_gdsii("example_simple.gds")        
--- ipkiss24\samples\picazzo\advanced\__init__.py	(original)
+++ ipkiss24\samples\picazzo\advanced\__init__.py	(refactored)
@@ -19,11 +19,11 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from example import *
-from example2 import *
-from example3 import *
-from example4 import *
+from .example import *
+from .example2 import *
+from .example3 import *
+from .example4 import *
 #from example5 import *
 #from example_awg import *
-from example_tapers_extended import *
-from example_window_waveguides import *
+from .example_tapers_extended import *
+from .example_window_waveguides import *
--- ipkiss24\samples\picazzo\advanced\boolean_ops_structure.py	(original)
+++ ipkiss24\samples\picazzo\advanced\boolean_ops_structure.py	(refactored)
@@ -26,7 +26,7 @@
 
 #STEP1 : create the original structure
 from picazzo.filters.mzi import WgMzi1x1Y90Asymmetric
-original_structure =  WgMzi1x1Y90Asymmetric(separation = 20.0,straight1=10.0,straight2=20.0)
+original_structure =  WgMzi1x1Y90Asymmetric(separation = 20.0, straight1=10.0, straight2=20.0)
 original_structure.write_gdsii("original.gds")
 
 
--- ipkiss24\samples\picazzo\advanced\example.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example.py	(refactored)
@@ -34,15 +34,15 @@
     
     def define_elements(self, elems):
         # alignment waveguide      
-        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
         
-        wg_def2 = WgElDefinition(wg_width=0.5,trench_width=7.0)
-        align2_wg = wg_def2(shape = [(0.0,0.0), (100.0,0.0)])
+        wg_def2 = WgElDefinition(wg_width=0.5, trench_width=7.0)
+        align2_wg = wg_def2(shape = [(0.0, 0.0), (100.0, 0.0)])
         align2 = Structure(name="align2", elements=[align2_wg], ports=align2_wg.ports)
         layout += align2
         
-        wg_def3 = WgElDefinition(wg_width=2.0,trench_width=7.0)
-        align3_wg = wg_def3(shape = [(0.0,0.0), (200.0,0.0)])
+        wg_def3 = WgElDefinition(wg_width=2.0, trench_width=7.0)
+        align3_wg = wg_def3(shape = [(0.0, 0.0), (200.0, 0.0)])
         align3 = Structure(name="align3", elements=[align3_wg], ports=align3_wg.ports)RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example.py to ipkissat3\samples\picazzo\advanced\example.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example2.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example2.py to ipkissat3\samples\picazzo\advanced\example2.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example3.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example3.py to ipkissat3\samples\picazzo\advanced\example3.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\advanced\example3_three_port.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example3_three_port.py to ipkissat3\samples\picazzo\advanced\example3_three_port.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example4.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example4.py to ipkissat3\samples\picazzo\advanced\example4.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\advanced\example4_grating_mmi.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example4_grating_mmi.py to ipkissat3\samples\picazzo\advanced\example4_grating_mmi.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example5.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example5.py to ipkissat3\samples\picazzo\advanced\example5.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\advanced\example_PhC.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_PhC.py to ipkissat3\samples\picazzo\advanced\example_PhC.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_contact_mask.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_contact_mask.py to ipkissat3\samples\picazzo\advanced\example_contact_mask.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_process_flows_vfabrication.py

         layout += align3
         
--- ipkiss24\samples\picazzo\advanced\example2.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example2.py	(refactored)
@@ -36,7 +36,7 @@
 class PicazzoExample2(Structure):
     
     def define_elements(self, elems):
-        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
         
         # alignment waveguide
         wg_def = WgElDefinition()
--- ipkiss24\samples\picazzo\advanced\example3.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example3.py	(refactored)
@@ -24,7 +24,7 @@
 from ipkiss.plugins.photonics.wg.basic import *    # basic waveguides
 from picazzo.io.column import *  # Standard io columns
 
-from example3_three_port import * # our structure
+from .example3_three_port import * # our structure
 
 ######################################
 # add structures to layout
@@ -32,7 +32,7 @@
 class PicazzoExample3(Structure):
         
         def define_elements(self, elems):
-                layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+                layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
                 
                 # alignment waveguide
                 wg_def = WgElDefinition()
@@ -41,7 +41,7 @@
                 layout += align        
                 # add 2 ThreePort components
                 layout += ThreePort(width = 5.0, height = 2.0)        
-                layout.add(ThreePortToEast(width = 5.0, height = 2.0),merged_waveguides=False)
+                layout.add(ThreePortToEast(width = 5.0, height = 2.0), merged_waveguides=False)
 
                 elems += layout
                 return elems
--- ipkiss24\samples\picazzo\advanced\example4.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example4.py	(refactored)
@@ -24,7 +24,7 @@
 from ipkiss.plugins.photonics.wg.basic import *    # basic waveguides
 from picazzo.io.column import *  # Standard io columns
 
-from example4_grating_mmi import * #our structure (in seperate file example4_grating_mmi.py)
+from .example4_grating_mmi import * #our structure (in seperate file example4_grating_mmi.py)
 from picazzo.fibcoup.inverted_taper import *
 from picazzo.io.fibcoup import *
 
@@ -36,7 +36,7 @@
 class PicazzoExample4(Structure):
     
     def define_elements(self, elems):            
-        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
         layout.y_spacing=250.0
         
         # alignment waveguide
--- ipkiss24\samples\picazzo\advanced\example5.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example5.py	(refactored)
@@ -35,7 +35,7 @@
 class PicazzoExample5(Structure):
     
     def define_elements(self, elems):            
-        layout = layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0),
+        layout = layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0),
                                         adapter = IoFibcoupGeneric) # Note: default fiber coupler is changed!
         
         # alignment waveguide       
--- ipkiss24\samples\picazzo\advanced\example_contact_mask.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_contact_mask.py	(refactored)
@@ -65,13 +65,13 @@
 class Layout(Structure):
     
     def define_elements(self, elems):        
-        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
 
         #we first create a regular waveguide element 
         wg_def = WgElDefinition(wg_width = TECH.WG.WIRE_WIDTH, trench_width = TECH.WG.TRENCH_WIDTH, process = TECH.PROCESS.WG)
-        wg = wg_def(shape = [(0.0,0.0), (500.0,0.0)])
+        wg = wg_def(shape = [(0.0, 0.0), (500.0, 0.0)])
         #on top of it, we add a rectangle element with III-V
-        rectangle_III_V = Rectangle(PPLayer(MY_TECH.PROCESS.OL35_1, MY_TECH.PURPOSE.DEFAULT), center = (250.0, 0.0),box_size = (500.0, 20.0))
+        rectangle_III_V = Rectangle(PPLayer(MY_TECH.PROCESS.OL35_1, MY_TECH.PURPOSE.DEFAULT), center = (250.0, 0.0), box_size = (500.0, 20.0))
         
         #assemble both elemeents in a structure
         layout += Structure(name= "wg_with_III_V", elements = [wg, rectangle_III_V], ports = wg.ports)
--- ipkiss24\samples\picazzo\advanced\example_process_flows_vfabrication.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_process_flows_vfabrication.py	(refactored)
@@ -27,16 +27,16 @@
 
 TECH.PROCESS.ACL = ProcessLayer("Active Cladding", "ACL")
 TECH.PROCESS.ACO = ProcessLayer("Active Core", "ACO")
-TECH.PURPOSE.ACTIVE = PatternPurpose("Active material","ACT")
+TECH.PURPOSE.ACTIVE = PatternPurpose("Active material", "ACT")
 
 TECH.PPLAYER.ACL = TechnologyTree()
 TECH.PPLAYER.ACO = TechnologyTree()
         
-TECH.PPLAYER.ACL.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACL,TECH.PURPOSE.ACTIVE,name = "ACL")
+TECH.PPLAYER.ACL.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACL, TECH.PURPOSE.ACTIVE, name = "ACL")
 TECH.PPLAYER.ACL.ALL = TECH.PPLAYER.ACL.DEFAULT
 TECH.PPLAYER.ACL.ALL.NAME = "ACL_ALL"
 
-TECH.PPLAYER.ACO.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACO,TECH.PURPOSE.ACTIVE,name = "ACO")
+TECH.PPLAYER.ACO.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACO, TECH.PURPOSE.ACTIVE, name = "ACO")
 TECH.PPLAYER.ACO.ALL = TECH.PPLAYER.ACO.DEFAULT
 TECH.PPLAYER.ACO.ALL.NAME = "ACO_ALL"
 
@@ -50,7 +50,7 @@
 
 #define the materials InP
 TECH.MATERIALS.InP = Material(name = "InP", display_style = DisplayStyle(color = COLOR_ORANGE))
-TECH.MATERIALS.BCB = Material(name = "BCB",display_style = DisplayStyle(color = COLOR_GREEN))
+TECH.MATERIALS.BCB = Material(name = "BCB", display_style = DisplayStyle(color = COLOR_GREEN))
 
 nInP = 3.1
 nBCB = 1.544 
@@ -58,21 +58,21 @@
 TECH.MATERIALS.BCB.epsilon = nBCB**2 #2.38
 
 TECH.MATERIAL_STACKS.MSTACK_BCB = MaterialStack(name = "BCB", 
-                                                        materials_heights = [(TECH.MATERIALS.BCB,0.480), 
-                                                                             (TECH.MATERIALS.AIR,1.3)], 
+                                                        materials_heights = [(TECH.MATERIALS.BCB, 0.480), 
+                                                                             (TECH.MATERIALS.AIR, 1.3)], 
                                                         display_style = DisplayStyle(color = COLOR_WHITE))
 
 
 TECH.MATERIAL_STACKS.MSTACK_ACLAD = MaterialStack(name = "ACTIVE CLADDING", 
-                                                           materials_heights = [(TECH.MATERIALS.BCB,0.480),
-                                                                                (TECH.MATERIALS.InP,0.2),
-                                                                                (TECH.MATERIALS.AIR,1.1)], 
+                                                           materials_heights = [(TECH.MATERIALS.BCB, 0.480),
+                                                                                (TECH.MATERIALS.InP, 0.2),
+                                                                                (TECH.MATERIALS.AIR, 1.1)], 
                                                            display_style = DisplayStyle(color = COLOR_BLACK))
 
 TECH.MATERIAL_STACKS.MSTACK_ACORE = MaterialStack(name = "ACTIVE CORE", 
-                                                  materials_heights = [(TECH.MATERIALS.BCB,0.480),
-                                                                       (TECH.MATERIALS.InP,0.8),
-                                                                       (TECH.MATERIALS.AIR,0.5)],
+                                                  materials_heights = [(TECH.MATERIALS.BCB, 0.480),
+                                                                       (TECH.MATERIALS.InP, 0.8),
+                                                                       (TECH.MATERIALS.AIR, 0.5)],
                                                   display_style = DisplayStyle(color = COLOR_ORANGE))RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_process_flows_vfabrication.py to ipkissat3\samples\picazzo\advanced\example_process_flows_vfabrication.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_tapers_extended.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_tapers_extended.py to ipkissat3\samples\picazzo\advanced\example_tapers_extended.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_visualization1.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_visualization1.py to ipkissat3\samples\picazzo\advanced\example_visualization1.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_window_waveguides.py

 
 ################# STEP 3 : DEFINE THE FABRICATION PROCESS FLOW ###############################   
@@ -119,10 +119,10 @@
                 elems += self.wg_definition(shape = c)
                 elems += self.wg_definition(shape = w)
                 elems += Rectangle(center = (0.0, 0.0),
-                                   box_size=(9.0,9.0),
+                                   box_size=(9.0, 9.0),
                                    layer=TECH.PPLAYER.ACL.DEFAULT)
                 elems += Rectangle(center = (5.0, 0.0),
-                                   box_size=(1.0,2.0),
+                                   box_size=(1.0, 2.0),
                                    layer=TECH.PPLAYER.ACO.DEFAULT)                
                 
                 return elems
@@ -137,4 +137,4 @@
 r.visualize_3d_y_crosssection(y_co = 0.0, resolution = 30)
 
 vtk_filename = r.visualize_3d_vtk(resolution = 30)
-print "Generated VTK file : ",vtk_filename 
+print("Generated VTK file : ", vtk_filename) 
--- ipkiss24\samples\picazzo\advanced\example_tapers_extended.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_tapers_extended.py	(refactored)
@@ -35,18 +35,18 @@
         #tapering from RaisedWGFCWgElDefinition to WGFCWgElDefinition
         wg_def_start = RaisedWGFCWgElDefinition(top_width=2.0)        
         wg_def_end = WGFCWgElDefinition(wg_width = 0.8, trench_width = 2.0, shallow_wg_width = 0.40, shallow_trench_width=2.0)
-        taper1 = WgElPortTaperExtended(start_port=OpticalPort(position=(90.0,80.0), wg_definition=wg_def_start, angle=60.0), 
+        taper1 = WgElPortTaperExtended(start_port=OpticalPort(position=(90.0, 80.0), wg_definition=wg_def_start, angle=60.0), 
                                        end_wg_def=wg_def_end, 
-                                       straight_extension=(70.0,40.0),
+                                       straight_extension=(70.0, 40.0),
                                        length = 20.0)   #default taper length is 10.0         
         elems += taper1
         
         #tapering from RaisedFCWgElDefinition to WgElDefinition
         wg_def_start = RaisedFCWgElDefinition(shallow_wg_width=2.0)
         wg_def_end = WgElDefinition(wg_width=1.0)
-        taper2 = WgElPortTaperExtended(start_port=OpticalPort(position=(-10.0,10.0), wg_definition=wg_def_start, angle=90.0), 
+        taper2 = WgElPortTaperExtended(start_port=OpticalPort(position=(-10.0, 10.0), wg_definition=wg_def_start, angle=90.0), 
                                        end_wg_def=wg_def_end, 
-                                       straight_extension=(25.0,10.0))
+                                       straight_extension=(25.0, 10.0))
         elems += taper2
 
         return elems
--- ipkiss24\samples\picazzo\advanced\example_visualization1.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_visualization1.py	(refactored)
@@ -20,7 +20,7 @@
 # Contact: ipkiss@intec.ugent.be
 
 from technologies.si_photonics.picazzo.default import *
-from example3_three_port import * # our structure
+from .example3_three_port import * # our structure
 from ipkiss.plugins.vfabrication import *
 
 #Illustrates how to create a 2D- and 3D-visualization of a certain component.
@@ -32,7 +32,7 @@
 my_component.visualize_2d()
 
 #render a 3d-visualisation with POVRAY : create a POVRAY-file
-my_component.visualize_3d_povray(camera_pos = (10,0,10)) 
+my_component.visualize_3d_povray(camera_pos = (10, 0, 10)) 
 # This generates a file '3PORT_R_W5000_H2000_W450_T2000_2D_R10_GR0.000000.pov' which should then be rendered
 # with the software Povray : http://www.povray.org/download/
 
--- ipkiss24\samples\picazzo\advanced\example_window_waveguides.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_window_waveguides.py	(refactored)
@@ -107,7 +107,7 @@
 class PicazzoExampleWindowWaveguide(Structure):
     
     def define_elements(self, elems):
-        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0,0.0))
+        layout = IoColumnGroup(y_spacing=25.0, south_east=(6000.0, 0.0))
 
         # define a shape
         my_path_shape = Shape([(0.0, 0.0), (50.0, 0.0), (100.0, 30.0), (150.0, 5.0)])
@@ -116,7 +116,7 @@
         # Make a standard wire waveguide by using the well-know regular class 'WgElDefinition'        
         wire_wg_def = WgElDefinition(wg_width = 0.6, trench_width = 0.9)        
         layout += Structure(name ="wire", elements = [wire_wg_def(shape = my_path_shape)])        
-        layout.add_blocktitle("REGULAR_WIRE", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("REGULAR_WIRE", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 2:
@@ -133,7 +133,7 @@
                              ]
                             )
         layout += Structure(name ="raw", elements = [raw_wg_def(shape = my_path_shape)])
-        layout.add_blocktitle("RAW", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("RAW", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
                
 
@@ -144,7 +144,7 @@
                                                top_process = TECH.PROCESS.FCW,
                                                top_width = 0.4)
         
-        layout.add_blocktitle("TWO STEP", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("TWO STEP", center_clearout = (500.0, 0.0))
         layout += Structure(name ="two_step", elements = [ts_wg_def(shape = Shape([(0.0, 0.0), (50.0, 0.0)]))])                
         layout.add_emptyline(2)
         
@@ -158,7 +158,7 @@
         # taper to deep waveguides
         from picazzo.container.taper_ports import TaperShallowPorts        
         layout += TaperShallowPorts(structure = Structure(name ="doped", elements = [doped_wg_def(shape = my_path_shape)]))
-        layout.add_blocktitle("DOP", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("DOP", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 5:
@@ -173,21 +173,21 @@
         
         layout += Structure(name="window", elements=[win_wg_def(shape = my_path_shape)])
         
-        layout.add_blocktitle("WIN", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("WIN", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 6:
         # Modulator : Shallow Waveguide with Junction which subclasses from the raw base class
         mod_wg_def = JunctionWaveguideDefinition()
         layout += TaperShallowPorts(structure = Structure(name="modulator", elements=[mod_wg_def(shape = my_path_shape)]))
-        layout.add_blocktitle("MOD", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("MOD", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 7:
         # Use new waveguide in a rounded connector
         from ipkiss.plugins.photonics.wg.connect import WaveguidePointRoundedConnectElementDefinition
         rounded_wg_def = WaveguidePointRoundedConnectElementDefinition(
-                            wg_definition = mod_wg_def , # previous definition, with the junction
+                            wg_definition = mod_wg_def, # previous definition, with the junction
                             bend_radius = 20.0, # needs to be sufficiently large with the broad windows
                             )        
         layout.add_emptyline(2)
@@ -196,7 +196,7 @@
         from picazzo.container.taper_ports import TaperShallowPorts        
         layout += TaperShallowPorts(structure = Structure(name="rounded", 
                                                            elements=[rounded_wg_def(shape = my_path_shape)]))
-        layout.add_blocktitle("CON", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("CON", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
 
         # Example 8:
@@ -209,7 +209,7 @@
                                                      inner_size = (100.0, 100.0)
                                                      )RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_window_waveguides.py to ipkissat3\samples\picazzo\advanced\example_window_waveguides.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\advanced\example_window_waveguides_2.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\advanced\example_window_waveguides_2.py to ipkissat3\samples\picazzo\advanced\example_window_waveguides_2.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\basic\example_grating_mmi.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\basic\example_grating_mmi.py to ipkissat3\samples\picazzo\basic\example_grating_mmi.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\basic\example_sweep.py

         layout += TaperShallowPorts(structure =spiral)                                    
-        layout.add_blocktitle("SPIRAL", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("SPIRAL", center_clearout = (500.0, 0.0))
                 
         elems += layout
         return elems
--- ipkiss24\samples\picazzo\advanced\example_window_waveguides_2.py	(original)
+++ ipkiss24\samples\picazzo\advanced\example_window_waveguides_2.py	(refactored)
@@ -38,7 +38,7 @@
     wg_width = PositiveNumberProperty(default = TECH.WG.WIRE_WIDTH)  
     trench_width = NonNegativeNumberProperty(default = TECH.WG.TRENCH_WIDTH)
     process = LockedProperty()    
-    polarity=  StringProperty(required = True, restriction=RestrictValueList(allowed_values = ["left","right"]))                                            
+    polarity=  StringProperty(required = True, restriction=RestrictValueList(allowed_values = ["left", "right"]))                                            
 
     def define_windows(self):
         windows = []
@@ -77,13 +77,13 @@
         taper_elements = Group()
         taper_elem1 = Boundary(layer = wg_lfarea_window.layer,
                                shape = Shape([(wg_lfarea_window.start_offset, 0),
-                                              (sign(wg_lfarea_window.end_offset)*(abs(wg_lfarea_window.end_offset)),0),
+                                              (sign(wg_lfarea_window.end_offset)*(abs(wg_lfarea_window.end_offset)), 0),
                                               (wg_lfarea_window.end_offset, self.length),
                                               (wg_lfarea_window.start_offset, self.length)]))
         taper_elements+= taper_elem1
         taper_elem2 = Boundary(layer = wg_line_window.layer,
                        shape = Shape([(wg_line_window.start_offset, 0),
-                                      (wg_line_window.end_offset,0),
+                                      (wg_line_window.end_offset, 0),
                                       (wg_line_window.end_offset, self.length),
                                       (wg_line_window.start_offset, self.length)])
                        )
@@ -91,14 +91,14 @@
         taper_elements+= taper_elem2
         taper_elem3 = Boundary(layer = fc_line_window.layer,
                        shape = Shape([(fc_line_window.start_offset, 0),
-                                      (fc_line_window.end_offset,0),
+                                      (fc_line_window.end_offset, 0),
                                       (fc_line_window.end_offset, self.length),
                                       (fc_line_window.start_offset, self.length)]))
         taper_elements+= taper_elem3        
 
         taper_elem4 = Boundary(layer = fc_lfarea_window.layer,
                        shape = Shape([(fc_lfarea_window.start_offset, 0),
-                                      (fc_lfarea_window.end_offset,0),
+                                      (fc_lfarea_window.end_offset, 0),
                                       (fc_lfarea_window.end_offset, self.length),
                                       (fc_lfarea_window.start_offset, self.length)]))
         taper_elements+= taper_elem4    
@@ -129,7 +129,7 @@
            
          
     def validate_properties(self):
-        if not isinstance(self.start_port.wg_definition,LshapeWgDefinition):
+        if not isinstance(self.start_port.wg_definition, LshapeWgDefinition):
             raise Exception("Start port should have a waveguide definition of type 'LshapeWgDefinition'")
         return True
             
@@ -152,7 +152,7 @@
             taper =  LshapeWgToWgElDefinitionTaper(start_port = wg_el.ports[1], length = 20.0)
             taper1 = LshapeWgToWgElDefinitionTaper(start_port = wg_el.ports[0], length = 20.0)
 
-            struct = TaperDeepPorts(structure = Structure(elements=[wg_el,taper,taper1],ports = taper.ports +taper1.ports))                           
+            struct = TaperDeepPorts(structure = Structure(elements=[wg_el, taper, taper1], ports = taper.ports +taper1.ports))                           
             elems += SRef(reference=struct)
             return elems
                       
--- ipkiss24\samples\picazzo\basic\example_grating_mmi.py	(original)
+++ ipkiss24\samples\picazzo\basic\example_grating_mmi.py	(refactored)
@@ -70,7 +70,7 @@
         from picazzo.filters.ring import RingRectSBend180DropFilter
         from picazzo.io.fibcoup import IoFibcoup
         from picazzo.fibcoup.uniform import UniformLineGrating
-        ring = RingRectSBend180DropFilter(straights=(TECH.WG.SHORT_STRAIGHT,TECH.WG.SHORT_STRAIGHT+3.0),
+        ring = RingRectSBend180DropFilter(straights=(TECH.WG.SHORT_STRAIGHT, TECH.WG.SHORT_STRAIGHT+3.0),
                                           coupler_angles = [30.0, 10.0],
                                           coupler_spacings = [1.0, 0.8],
                                           coupler_lengths = [6.0, 2.0],
@@ -81,10 +81,10 @@
                              grating_pitch = 0.6, 
                              grating_trench_width = 0.3)
         ring_with_fibcoup = IoFibcoup(struct = ring, 
-                                      offset = (0.0,0.0), 
+                                      offset = (0.0, 0.0), 
                                       y_spacing = ring.size_info().height,
-                                      south_west = (0.0,0.0), 
-                                      south_east = (1500.0,0.0),
+                                      south_west = (0.0, 0.0), 
+                                      south_east = (1500.0, 0.0),
                                       fibcoup = grating)    
         elems += SRef(reference = ring_with_fibcoup)
         return elems
@@ -94,7 +94,7 @@
         layout = MyDesign(name = "layout")
         layout.write_gdsii("example_grating_mmi.gds")
         layout.visualize_2d()
-        print "Finished !"
+        print("Finished !")
         
         
           
--- ipkiss24\samples\picazzo\basic\example_sweep.py	(original)
+++ ipkiss24\samples\picazzo\basic\example_sweep.py	(refactored)
@@ -28,7 +28,7 @@
     
     def get_mmi(self, width, length, wg_offset, taper_width):
         from picazzo.filters.mmi import Mmi2x2Tapered
-        return Mmi2x2Tapered(width = width,length = length,wg_offset = wg_offset,taper_width = taper_width)
+        return Mmi2x2Tapered(width = width, length = length, wg_offset = wg_offset, taper_width = taper_width)
 
     def define_elements(self, elems):   
         #create a layout with a sweep of MMI's
@@ -39,7 +39,7 @@
                           south_east = (3500.0, 0.0),
                           adapter = IoFibcoup
                           )
-        for l in arange(6.0,7.0,0.1):
+        for l in arange(6.0, 7.0, 0.1):
             col += self.get_mmi(width = 4.0, length = l, wg_offset = 0.67, taper_width = 0.8)
         elems += SRef(reference = col)
         return elems
@@ -49,7 +49,7 @@
     
     def get_ring(self, radius):
         from picazzo.filters.ring import RingRect180DropFilter
-        return RingRect180DropFilter(bend_radius = radius, straights = (0.0, 0.0), coupler_spacings=[0.67,0.67])    
+        return RingRect180DropFilter(bend_radius = radius, straights = (0.0, 0.0), coupler_spacings=[0.67, 0.67])    
             
     def define_elements(self, elems):       
         #create a layout with a sweep of RINGS
@@ -60,7 +60,7 @@
                           south_east = (2500.0, 0.0),
                           adapter = IoFibcoup
                           )
-        for r in arange(5.0,18.0,0.5):
+        for r in arange(5.0, 18.0, 0.5):
             col  += self.get_ring(radius = r) 
         elems += SRef(reference = col)
         return elems
@@ -75,22 +75,22 @@
         huge_ring = RingRect180DropFilter(ring_wg_definition = WgElDefinition(wg_width = 0.5),
                                    coupler_wg_definitions = [WgElDefinition(wg_width = 0.4), WgElDefinition(wg_width = 0.6)], 
                                    coupler_spacings = [5.0, 5.0], RefactoringTool: Writing converted ipkiss24\samples\picazzo\basic\example_sweep.py to ipkissat3\samples\picazzo\basic\example_sweep.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\basic\example_vfabrication.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\basic\example_vfabrication.py to ipkissat3\samples\picazzo\basic\example_vfabrication.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\basic\example_window_waveguides.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\basic\example_window_waveguides.py to ipkissat3\samples\picazzo\basic\example_window_waveguides.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\columns_adapters\_01_basic_column\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\columns_adapters\_01_basic_column\execute.py to ipkissat3\samples\picazzo\columns_adapters\_01_basic_column\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\example_stacking.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\example_stacking.py to ipkissat3\samples\picazzo\columns_adapters\_02_column_stacking\example_stacking.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\execute.py

-                                   straights=(60.0,120.0),
+                                   straights=(60.0, 120.0),
                                    bend_radius = 110.0
                                    )
         from picazzo.io.fibcoup import IoFibcoup
         from picazzo.fibcoup.uniform import UniformLineGrating
-        grating = UniformLineGrating(origin = (0.0,0.0),
+        grating = UniformLineGrating(origin = (0.0, 0.0),
                                      period = 0.689, 
                                      line_width = 0.423, 
                                      n_o_periods = 20, 
                                      wg_definition = WgElDefinition(wg_width = 9.0),
                                      process = TECH.PROCESS.FC)
         ring_with_fibcoup = IoFibcoup(struct = huge_ring, 
-                                      offset = (0.0,0.0), 
+                                      offset = (0.0, 0.0), 
                                       y_spacing = huge_ring.size_info().height,
-                                      south_west = (0.0,0.0), 
-                                      south_east = (1500.0,0.0),
+                                      south_west = (0.0, 0.0), 
+                                      south_east = (1500.0, 0.0),
                                       fibcoup = grating)
         elems += SRef(reference = ring_with_fibcoup)
         return elems
@@ -104,9 +104,9 @@
         mmi_sweep = MmiSweep()
         ring_with_fibcoup = HugeRingWithFibcoup()        
         #position eacht of the layouts
-        elems += SRef(reference = mmi_sweep, position = (0.0,0.0))    
-        elems += SRef(reference = ring_sweep, position = (4000,0.0))
-        elems += SRef(reference = ring_with_fibcoup, position = (2000.0,1000.0))
+        elems += SRef(reference = mmi_sweep, position = (0.0, 0.0))    
+        elems += SRef(reference = ring_sweep, position = (4000, 0.0))
+        elems += SRef(reference = ring_with_fibcoup, position = (2000.0, 1000.0))
         return elems
     
 
--- ipkiss24\samples\picazzo\basic\example_vfabrication.py	(original)
+++ ipkiss24\samples\picazzo\basic\example_vfabrication.py	(refactored)
@@ -24,7 +24,7 @@
 from ipkiss.plugins.vfabrication import *
 from picazzo.filters.ring import RingRectSBend180DropFilter
 
-ring = RingRectSBend180DropFilter(straights=(TECH.WG.SHORT_STRAIGHT,TECH.WG.SHORT_STRAIGHT+3.0),
+ring = RingRectSBend180DropFilter(straights=(TECH.WG.SHORT_STRAIGHT, TECH.WG.SHORT_STRAIGHT+3.0),
                                       coupler_angles = [30.0, 10.0],
                                       coupler_spacings = [1.0, 0.8],
                                       coupler_lengths = [6.0, 2.0],
@@ -41,7 +41,7 @@
 
 wg_def = WgElDefinition(wg_width=5.0)
 socket = BroadWgSocket(wg_definition = wg_def, wg_length = 15.0)
-C = FiberCouplerGratingLine(line_widths_positions=[(1.0,1.0),(3.0,3.0),(4.0,7.0)],
+C = FiberCouplerGratingLine(line_widths_positions=[(1.0, 1.0), (3.0, 3.0), (4.0, 7.0)],
                             line_length = 7.0,
                             socket=socket)
 C.visualize_2d()
--- ipkiss24\samples\picazzo\basic\example_window_waveguides.py	(original)
+++ ipkiss24\samples\picazzo\basic\example_window_waveguides.py	(refactored)
@@ -122,7 +122,7 @@
         wire_wg_def = WgElDefinition(wg_width = 0.6, trench_width = 0.9)        
         wire_wg = wire_wg_def(shape = my_path_shape)
         layout += Structure(name ="wire", elements = [wire_wg], ports = wire_wg.ports)        
-        layout.add_blocktitle("REGULAR_WIRE", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("REGULAR_WIRE", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 2:
@@ -140,7 +140,7 @@
                             )
         raw_wg = raw_wg_def(shape = my_path_shape)
         layout += Structure(name ="raw", elements = [raw_wg], ports = raw_wg.ports)
-        layout.add_blocktitle("RAW", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("RAW", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
                
        
@@ -153,7 +153,7 @@
 
         doped_wg = doped_wg_def(shape = my_path_shape)
         layout += Structure(name="doped", elements=[doped_wg], ports = doped_wg.ports)
-        layout.add_blocktitle("DOP", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("DOP", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
 
         # Example 4:
@@ -168,7 +168,7 @@
         win_wg = win_wg_def(shape = my_path_shape)
         layout += Structure(name="window", elements=[win_wg], ports = win_wg.ports)
         
-        layout.add_blocktitle("WIN", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("WIN", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 5:
@@ -176,19 +176,19 @@
         mod_wg_def = JunctionWaveguideDefinition()
         mod_wg = mod_wg_def(shape = my_path_shape)
         layout += Structure(name="modulator", elements=[mod_wg], ports = mod_wg.ports)
-        layout.add_blocktitle("MOD", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("MOD", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
         # Example 6:
         # Use new waveguide in a rounded connector
         from ipkiss.plugins.photonics.wg.connect import WaveguidePointRoundedConnectElementDefinition
         rounded_wg_def = WaveguidePointRoundedConnectElementDefinition(
-                            wg_definition = mod_wg_def , # previous definition, with the junction
+                            wg_definition = mod_wg_def, # previous definition, with the junction
                             bend_radius = 20.0, # needs to be sufficiently large with the broad windows
                             )        
         rounded_wg = rounded_wg_def (shape = my_path_shape)
         layout += Structure(name="rounded", elements=[rounded_wg], ports = rounded_wg.ports)
-        layout.add_blocktitle("ROUND", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("ROUND", center_clearout = (500.0, 0.0))
         layout.add_emptyline(2)
         
 
@@ -202,7 +202,7 @@
                                                      inner_size = (100.0, 100.0)
                                                      )
         layout += TaperShallowPorts(structure =spiral)                                    
-        layout.add_blocktitle("SPIRAL", center_clearout = (500.0,0.0))
+        layout.add_blocktitle("SPIRAL", center_clearout = (500.0, 0.0))
                 
         elems += SRef(reference = layout)
         return elems
--- ipkiss24\samples\picazzo\columns_adapters\_01_basic_column\execute.py	(original)
+++ ipkiss24\samples\picazzo\columns_adapters\_01_basic_column\execute.py	(refactored)
@@ -28,7 +28,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),  # column width = 2000um
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),  # column width = 2000um
                                   y_spacing = 25.0)           # vertical spacing between waveguides
         
         
--- ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\execute.py	(original)
+++ ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\execute.py	(refactored)
@@ -28,7 +28,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),
                                   y_spacing = 25.0) 
         
         
@@ -51,7 +51,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),RefactoringTool: Writing converted ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\execute.py to ipkissat3\samples\picazzo\columns_adapters\_02_column_stacking\execute.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\columns_adapters\_03_column_parameters\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\columns_adapters\_03_column_parameters\execute.py to ipkissat3\samples\picazzo\columns_adapters\_03_column_parameters\execute.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py to ipkissat3\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_01_basic\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_01_basic\execute.py to ipkissat3\samples\picazzo\containers\_01_basic\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_02_suppress_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_02_suppress_ports\execute.py to ipkissat3\samples\picazzo\containers\_02_suppress_ports\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_03_extend_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_03_extend_ports\execute.py to ipkissat3\samples\picazzo\containers\_03_extend_ports\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_04_taper_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_04_taper_ports\execute.py to ipkissat3\samples\picazzo\containers\_04_taper_ports\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_05_auto_taper_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_05_auto_taper_ports\execute.py to ipkissat3\samples\picazzo\containers\_05_auto_taper_ports\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_06_fanout\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_06_fanout\execute.py to ipkissat3\samples\picazzo\containers\_06_fanout\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_07_route_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_07_route_ports\execute.py to ipkissat3\samples\picazzo\containers\_07_route_ports\execute.py.
RefactoringTool: No changes to ipkiss24\samples\picazzo\containers\_08_route_east_west\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_08_route_east_west\execute.py to ipkissat3\samples\picazzo\containers\_08_route_east_west\execute.py.
RefactoringTool: Refactored ipkiss24\samples\picazzo\containers\_09_matrioszka\execute.py
RefactoringTool: Writing converted ipkiss24\samples\picazzo\containers\_09_matrioszka\execute.py to ipkissat3\samples\picazzo\containers\_09_matrioszka\execute.py.
RefactoringTool: No changes to ipkiss24\samples\pysimul\__init__.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\__init__.py to ipkissat3\samples\pysimul\__init__.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\run_persisted_simul.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\run_persisted_simul.py to ipkissat3\samples\pysimul\run_persisted_simul.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py to ipkissat3\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py to ipkissat3\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py

                                   y_spacing = 25.0) 
         
         
@@ -82,7 +82,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),
                                   y_spacing = 25.0) 
         
         
@@ -113,7 +113,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),
                                   y_spacing = 25.0) 
         
         
@@ -142,7 +142,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),
                                   y_spacing = 25.0) 
         
         
--- ipkiss24\samples\picazzo\columns_adapters\_03_column_parameters\execute.py	(original)
+++ ipkiss24\samples\picazzo\columns_adapters\_03_column_parameters\execute.py	(refactored)
@@ -28,7 +28,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),  # column width = 2000um
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),  # column width = 2000um
                                   y_spacing = 25.0)           # vertical spacing between waveguides
         
         
@@ -39,7 +39,7 @@
         # add the component to the column
         from picazzo.io.fibcoup import IoFibcoup
         my_column.add(my_ring,
-                      offset = (50,50),          # offset the structure from the center
+                      offset = (50, 50),          # offset the structure from the center
                       adapter = IoFibcoup,          # this is the default adapter.
                       transformation = Rotation(rotation=10.0)) # transform the structure
         
@@ -55,7 +55,7 @@
     def define_elements(self, elems):
         # define a column
         from picazzo.io.column import IoColumnGroup
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),  # column width = 2000um
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),  # column width = 2000um
                                   y_spacing = 25.0)           # vertical spacing between waveguides
         
         
@@ -72,7 +72,7 @@
                       connect_length = 100.0,                  # horizontal length of Fanout. Default = 40.0
                       bend_radius = 30.0,                      # bend radius of Fanout. Default from TECH 
                       minimum_straight = 8.0,                  # minimum straight sections
-                      fibcoup = TECH.IO.FIBCOUP.DEFAULT_GRATING ,# default fiber coupler
+                      fibcoup = TECH.IO.FIBCOUP.DEFAULT_GRATING,# default fiber coupler
                       fibcoup_offset = 30.0,                   # offset of grating coupler from the edge. Default = 25.6
                       fibcoup_taper_length = 200.0,            # Taper length from intermedeate waveguide to fiber coupler
                       merged_waveguides = False                # bundle waveguide in Fanout
--- ipkiss24\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py	(original)
+++ ipkiss24\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py	(refactored)
@@ -29,7 +29,7 @@
         # define a column
         from picazzo.io.column import IoColumnGroup
         from picazzo.io.fibcoup import IoFibcoupAsymmetric
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),     # column width = 2000um
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),     # column width = 2000um
                                   y_spacing = 25.0,              # vertical spacing between waveguides
                                   adapter = IoFibcoupAsymmetric) # new default adapter          
                 
@@ -59,7 +59,7 @@
         # define a column
         from picazzo.io.column import IoColumnGroup
         from picazzo.io.fibcoup import IoFibcoupGeneric
-        my_column = IoColumnGroup(south_east = (2000.0,0.0),     # column width = 2000um
+        my_column = IoColumnGroup(south_east = (2000.0, 0.0),     # column width = 2000um
                                   y_spacing = 25.0,              # vertical spacing between waveguides
                                   adapter = IoFibcoupGeneric) # new default adapter          
         
--- ipkiss24\samples\picazzo\containers\_09_matrioszka\execute.py	(original)
+++ ipkiss24\samples\picazzo\containers\_09_matrioszka\execute.py	(refactored)
@@ -72,7 +72,7 @@
 my_ring_routed_2.write_gdsii('matrioszka_4.gds')
 # do a small fanout (bundled) to arrange waveguides to equal spacing
 my_ring_routed_3 = FanoutPorts(structure = my_ring_routed_2,
-                               port_labels = ["W0","W1", "W2"],
+                               port_labels = ["W0", "W1", "W2"],
                                output_direction = WEST,
                                reference_coordinate = 10.0,
                                spacing = 10.0,
--- ipkiss24\samples\pysimul\run_persisted_simul.py	(original)
+++ ipkiss24\samples\pysimul\run_persisted_simul.py	(refactored)
@@ -22,7 +22,7 @@
 from technologies.si_photonics.picazzo.default import *
 from ipkiss.all import *
 from ipkiss.plugins.simulation import *
-import cPickle
+import pickle
 
 simul_def = SimulationDefinition.load_from_file("mmibuwgp_1_tp.def.pysimul")
 
--- ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py	(original)
+++ ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py	(refactored)
@@ -208,5 +208,5 @@
         awg.write_gdsii("example_awg_mmi.gds")
         from ipkiss.plugins.vfabrication import *
         awg.visualize_2d()
-        print "Done!"
-        
+        print("Done!")
+        
--- ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py	(original)
+++ ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py	(refactored)
@@ -70,7 +70,7 @@
 #run the simulation and extract the fields at x = -0.01 (in the coordinate system of the original component, see the GDS)
 f = simul_camfr.procedure.run(field_extraction_geometry_x_positions= [-0.01])
 #look in trunk/pysimul_camfr_output for plots of the fields
-print "Done with CAMFR simulation"
+print("Done with CAMFR simulation")
 
 
 
@@ -132,4 +132,4 @@
 name = simul_meep.landscape.simulation_id
 create_animated_gif_from_hdf5(name + "_Hz.h5", name + "_Eps.h5")
 
-print "Done with Meep simulation."
+print("Done with Meep simulation.")
--- ipkiss24\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py	(original)
+++ ipkiss24\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py	(refactored)
@@ -25,13 +25,13 @@
 from os import *
 try:
     import meep_mpi as meep
-except ImportError, e:
+except ImportError as e:
     try :
         import meep as meep
-    except ImportError, e:
+    except ImportError as e:
         raise Exception("Modules 'meep' or 'meep_mpi' not found.")   
 
-class ProcedureClass(LowLevelPythonMeepProcedure,StrongPropertyInitializer):
+class ProcedureClass(LowLevelPythonMeepProcedure, StrongPropertyInitializer):
 
     property_object = DefinitionProperty(default = 0)
     #wavelength = NumberProperty(default = 1.55)
@@ -56,27 +56,27 @@
 
         ## Sources
 
-        print 'Center wavelength:',po.wavelength
-        print 'Bandwidth:',po.pulse_width
+        print('Center wavelength:', po.wavelength)
+        print('Bandwidth:', po.pulse_width)
         center_freq = 1.0 / (float(po.wavelength))
         pulse_width_freq =  (float(po.pulse_width)) / (float(po.wavelength)) * center_freq 	RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py to ipkissat3\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\grating_3D_Meep\Filters_OL_new.py

-        print 'Center frequency:',center_freq
-        print 'Bandwidth:',pulse_width_freq
+        print('Center frequency:', center_freq)
+        print('Bandwidth:', pulse_width_freq)
 
         if (po.pulsed_source):	    
             src = meep.gaussian_src_time(center_freq, pulse_width_freq)
         else:
             src = meep.continuous_src_time(center_freq)
 
-        source_port_position = po.input_port.transform_copy(Translation(translation=(po.source_input_port_offset,0))).position
-        print 'wg_center_old:',wg_center
+        source_port_position = po.input_port.transform_copy(Translation(translation=(po.source_input_port_offset, 0))).position
+        print('wg_center_old:', wg_center)
         wg_center = (po.input_port.wg_definition.process.wg_upper_z_coord+
                      po.input_port.wg_definition.process.wg_lower_z_coord)/2.
-        print 'wg_center_new:',wg_center
+        print('wg_center_new:', wg_center)
         c = Coord3(source_port_position[0],
                    source_port_position[1],
                    wg_center)
-        print 'coord:',c
+        print('coord:', c)
         source_position_vec = self.make_meep_vec(c)
 
         fields.add_point_source(meep.Ey, src, source_position_vec)
@@ -105,10 +105,10 @@
 
 
             ## Be aware: this is only for ports along y-axis!!
-            vec_near = self.make_meep_vec(Coord3(pp[0],pp[1]-port_width/2.0,wg_bottom))
-            vec_far = self.make_meep_vec(Coord3(pp[0],pp[1]+port_width/2.0,wg_top))
-
-            fluxplane = meep.volume(vec_near,vec_far)
+            vec_near = self.make_meep_vec(Coord3(pp[0], pp[1]-port_width/2.0, wg_bottom))
+            vec_far = self.make_meep_vec(Coord3(pp[0], pp[1]+port_width/2.0, wg_top))
+
+            fluxplane = meep.volume(vec_near, vec_far)
             fx = fields.add_dft_flux_plane(fluxplane,
                                            center_freq-(pulse_width_freq/4.0),
                                            center_freq+(pulse_width_freq/4.0),
@@ -125,7 +125,7 @@
         else:
             stop = po.stop_time
 
-        print 'Simulation will run for',stop,'time units'
+        print('Simulation will run for', stop, 'time units')
 
         output_files = []
         for oc in po.output_cuts:
@@ -140,23 +140,23 @@
                 j = 0
                 for oc in po.output_cuts:
                     vol = oc.get_output_volume(self.engine.meepVol)
-                    fields.output_hdf5(meep.Ey,vol, output_files[j], 1)
+                    fields.output_hdf5(meep.Ey, vol, output_files[j], 1)
                     j+= 1
                 n_o_output += 1
                 i = 0
             fields.step()
             i += 1
 
-        print n_o_output,'images outputted'
-        print 'Outputting field images..'
+        print(n_o_output, 'images outputted')
+        print('Outputting field images..')
         del output_files[:]
         for oc in po.output_cuts:
             fn = '%s.h5'%oc.filename
             fn_eps = '%s_eps.h5'%oc.filename
-            st = 'h5topng -t 0:%d -R -Zc dkbluered -a yarg -A %s %s'%(n_o_output-1,fn_eps,fn)
-            print st
+            st = 'h5topng -t 0:%d -R -Zc dkbluered -a yarg -A %s %s'%(n_o_output-1, fn_eps, fn)
+            print(st)
             system(st)
-        print 'Outputting done!'
+        print('Outputting done!')
 
         #print 'obtaining fluxes:'
         self.flux_data = []
@@ -174,10 +174,10 @@
 
         return 
 
-    def set_property_object(self,property_object):
+    def set_property_object(self, property_object):
         self.property_object = property_object
         return
-    def get_flux_data(self,port_ID):
+    def get_flux_data(self, port_ID):
         fd = self.flux_data[port_ID]
         return fd
 
@@ -188,26 +188,26 @@
     cut_value = NumberProperty(default = -1)
     filename = StringProperty(required = True)
 
-    def get_output_volume(self,meepVolume):
+    def get_output_volume(self, meepVolume):
         sur_max_vec = meepVolume.surroundings().get_max_corner()
 
         if (self.normal_vector == 'x'):
             if (self.cut_value <0.):
                 self.cut_value = sur_max_vec.x()/2.0
-            front_vec = meep.vec(self.cut_value,0.0,0.0)
-            rear_vec = meep.vec(self.cut_value,sur_max_vec.y(),sur_max_vec.z())
+            front_vec = meep.vec(self.cut_value, 0.0, 0.0)
+            rear_vec = meep.vec(self.cut_value, sur_max_vec.y(), sur_max_vec.z())
         elif (self.normal_vector == 'y'):
             if (self.cut_value <0.):
                 self.cut_value = sur_max_vec.y()/2.0
-            front_vec = meep.vec(0.0,self.cut_value,0.0)
-            rear_vec = meep.vec(sur_max_vec.x(),self.cut_value,sur_max_vec.z())
+            front_vec = meep.vec(0.0, self.cut_value, 0.0)
+            rear_vec = meep.vec(sur_max_vec.x(), self.cut_value, sur_max_vec.z())
         else :
             if (self.cut_value <0.):
                 self.cut_value = sur_max_vec.z()/2.0
-            front_vec = meep.vec(0.0,0.0,self.cut_value)
-            rear_vec = meep.vec(sur_max_vec.x(),sur_max_vec.y(),self.cut_value)
-
-        perp_vol = meep.volume(front_vec,rear_vec)
+            front_vec = meep.vec(0.0, 0.0, self.cut_value)
+            rear_vec = meep.vec(sur_max_vec.x(), sur_max_vec.y(), self.cut_value)
+
+        perp_vol = meep.volume(front_vec, rear_vec)
         return perp_vol
 
 class StructureMeep3DSimulator(StrongPropertyInitializer):
@@ -237,7 +237,7 @@
 
 
 
-    def add_output_cut(self,output_cut):
+    def add_output_cut(self, output_cut):
         self.output_cuts.append(output_cut)
 
 
@@ -247,7 +247,7 @@
     def simulate(self):	
 
 
-        print 'begining to simulate'
+        print('begining to simulate')
         simul_params = dict()
         simul_params["resolution"] = self.resolution
         simul_params["engine"] = MeepSimulationEngine(resolution = simul_params["resolution"], use_averaging = False)
@@ -263,5 +263,5 @@
         self.simul_def.procedure.run()
 
 
-    def get_flux(self,port_ID):
+    def get_flux(self, port_ID):
         return self.simul_def.procedure.get_flux_data(port_ID)
--- ipkiss24\samples\pysimul\grating_3D_Meep\Filters_OL_new.py	(original)
+++ ipkiss24\samples\pysimul\grating_3D_Meep\Filters_OL_new.py	(refactored)
@@ -73,7 +73,7 @@
         grating_right = WgGrating(period =self.period_component,
                                   n_o_periods = self.number_of_periods_right)
         shift = self.left_grating.size_info().get_width()
-        c = SRef(grating_right,position = (shift + self.cavity_length,0.))
+        c = SRef(grating_right, position = (shift + self.cavity_length, 0.))
         return c
     
     def define_cavity(self):
@@ -82,9 +82,9 @@
         c = self.right_grating
         x1 = self.left_grating.west_ports[0].position[0]
         x2 = self.right_grating.east_ports[0].position[0]
-        s = Shape([(x1,0.),(x2,0.)])
+        s = Shape([(x1, 0.), (x2, 0.)])
         b = wg_def1(shape = s)
-        return Structure(elements = [a,b,c])
+        return Structure(elements = [a, b, c])
 
 
     def get_active_port(self):
@@ -100,7 +100,7 @@
         x1 = self.left_grating.west_ports[0].position[0]-self.ol_wg1_ext
         x2 = self.right_grating.east_ports[0].position[0]+self.ol_wg1_ext_2
         y = 0.0
-        s = Shape([(x1,y),(x2,y)])
+        s = Shape([(x1, y), (x2, y)])
         ol_wg_def = OverlayWgDefinition(wg_width = self.ol_wg1_width)
         return ol_wg_def(shape = s)
     
@@ -108,7 +108,7 @@
         x1 = self.overlay_taper.west_ports[0].position[0]
         x2 = x1-self.ol_wg2_length
         y = 0.0
-        s = Shape([(x1,y),(x2,y)])
+        s = Shape([(x1, y), (x2, y)])
         ol_wg_def = OverlayWgDefinition(wg_width = self.ol_wg2_width)
         return ol_wg_def(shape = s)
     
@@ -170,8 +170,8 @@
                                     length = length)
         return taper
     
-    def define_elements(self,elems):
-        elems += GratingCavity.define_elements(self,elems)
+    def define_elements(self, elems):
+        elems += GratingCavity.define_elements(self, elems)
         elems += self.right_section
         elems += self.right_taper
         port_pos = self.left_grating.west_ports[0].position
@@ -182,8 +182,8 @@
                       )
         return elems
     
-    def define_ports(self,ports):
-        ports = [self.left_grating.west_ports[0],self.right_section.east_ports[0]]
+    def define_ports(self, ports):
+        ports = [self.left_grating.west_ports[0], self.right_section.east_ports[0]]
         return ports
     
 class GratingCavityWithTapers(GratingCavity):
@@ -195,27 +195,27 @@
     
     
     def define_left_taper(self):
-        st_port = GratingCavity.define_ports(self,0)[0]
+        st_port = GratingCavity.define_ports(self, 0)[0]
         length = self.taper_length
         taper = WgElPortTaperLinear(start_port = st_port,
                                     end_wg_def = self.end_wg_def,
                                     length = length)
         return taper
     def define_right_taper(self):
-        st_port = GratingCavity.define_ports(self,0)[1]
+        st_port = GratingCavity.define_ports(self, 0)[1]
         length = self.taper_length
         taper = WgElPortTaperLinear(start_port = st_port,
                                     end_wg_def = self.end_wg_def,
                                     length = length)
         return taper
-    def define_elements(self,elems):
-        elems += GratingCavity.define_elements(self,elems)
+    def define_elements(self, elems):
+        elems += GratingCavity.define_elements(self, elems)
         elems += self.left_taper
         elems += self.right_taper
         return elems
     
-    def define_ports(self,ports):
-        ports = [self.left_taper.west_ports[0],self.right_taper.east_ports[0]]
+    def define_ports(self, ports):
+        ports = [self.left_taper.west_ports[0], self.right_taper.east_ports[0]]
         return ports
     
 class GratingCavityWithModeFilter(GratingCavityWithTapers):
@@ -227,9 +227,9 @@
     right_mode_filter = DefinitionProperty(fdef_name  = 'define_right_mode_filter')
     
     def define_right_mode_filter(self):
-        st_port = GratingCavityWithTapers.define_ports(self,0)[1]
+        st_port = GratingCavityWithTapers.define_ports(self, 0)[1]
         wg_def = st_port.wg_definition
-        s = Shape([st_port.position,(st_port.position[0]+self.section_length,
+        s = Shape([st_port.position, (st_port.position[0]+self.section_length,
                                      st_port.position[1])])
         
         wg = wg_def(shape = s)
@@ -239,12 +239,12 @@
                                     end_wg_def = self.end_wg_def2,
                                     length = self.taper2_length)
         
-        return [wg,taper]
+        return [wg, taper]
     
     def define_left_mode_filter(self):
-        st_port = GratingCavityWithTapers.define_ports(self,0)[0]
+        st_port = GratingCavityWithTapers.define_ports(self, 0)[0]
         wg_def = st_port.wg_definition
-        s = Shape([st_port.position,(st_port.position[0]-self.section_length,
+        s = Shape([st_port.position, (st_port.position[0]-self.section_length,
                                      st_port.position[1])])
         
         wg = wg_def(shape = s)
@@ -254,10 +254,10 @@
                                     end_wg_def = self.end_wg_def2,
                                     length = self.taper2_length)
         
-        return [wg,taper]
-    
-    def define_elements(self,elems):
-        elems += GratingCavityWithTapers.define_elements(self,elems)
+        return [wg, taper]
+    
+    def define_elements(self, elems):
+        elems += GratingCavityWithTapers.define_elements(self, elems)
         lmf = self.left_mode_filter
         rmf = self.right_mode_filter
         elems += lmf[0]
@@ -266,28 +266,28 @@
         elems += rmf[1]
         return elems
     
-    def define_ports(self,ports):
-        ports = [self.left_mode_filter[1].west_ports[0],self.right_mode_filter[1].east_ports[0]]
+    def define_ports(self, ports):
+        ports = [self.left_mode_filter[1].west_ports[0], self.right_mode_filter[1].east_ports[0]]
         return ports
 class GratingCavityWithAccessWaveguides(GratingCavity):
     offset = NumberProperty(default = 1.0)
     bend_1 = DefinitionProperty(fdef_name = "define_bend_1")
     bend_2 = DefinitionProperty(fdef_name = "define_bend_2")
     def define_bend_1(self):      
-        route = RouteToWestAtY(GratingCavity.define_ports(self,0)[0],y_position= -self.offset,min_straight=0.1)
+        route = RouteToWestAtY(GratingCavity.define_ports(self, 0)[0], y_position= -self.offset, min_straight=0.1)
         connecting_wg_el_left = RouteConnectorRounded(route)
         return connecting_wg_el_left
     def define_bend_2(self):
-        route = RouteToEastAtY(GratingCavity.define_ports(self,0)[1],y_position= -self.offset,min_straight=0.1)
+        route = RouteToEastAtY(GratingCavity.define_ports(self, 0)[1], y_position= -self.offset, min_straight=0.1)
         connecting_wg_el_right = RouteConnectorRounded(route)
         return connecting_wg_el_right
-    def define_elements(self,elems):
-        elems += GratingCavity.define_elements(self,elems)
+    def define_elements(self, elems):
+        elems += GratingCavity.define_elements(self, elems)
         elems += self.bend_1
         elems += self.bend_2
         return elems
-    def define_ports(self,ports):
-        ports = [self.bend_1.west_ports[0],self.bend_2.east_ports[0]]
+    def define_ports(self, ports):
+        ports = [self.bend_1.west_ports[0], self.bend_2.east_ports[0]]
         return ports
     
 class GratingCavityFilter(GratingCavity):
@@ -297,19 +297,19 @@
         
         length = self.get_length()
         height = self.wg_definition.wg_width / 2.0 + self.gap_space + self.wg_definition_access.wg_width / 2.
-        s = Shape([(0,height),(length,height)])
+        s = Shape([(0, height), (length, height)])
         wg = self.wg_definition_access(shape = s)
-        elems += GratingCavity.define_elements(self,elems)
+        elems += GratingCavity.define_elements(self, elems)
         elems += wg
         return elems
 
     def define_ports(self, ports):
         height = self.wg_definition.wg_width / 2.0 + self.gap_space + self.wg_definition_access.wg_width / 2.
-        pts = GratingCavity.define_ports(self,0)
+        pts = GratingCavity.define_ports(self, 0)
         x1 = pts[0].position[0]
         x2 = pts[1].position[0]
-        ports = [pts[0],pts[1],OpticalPort(position = (x1, height), angle = -180.0, wg_definition = self.wg_definition_access),
-                 OpticalPort(position = (x2,height),
+        ports = [pts[0], pts[1], OpticalPort(position = (x1, height), angle = -180.0, wg_definition = self.wg_definition_access),
+                 OpticalPort(position = (x2, height),
                              angle = 0.0, wg_definition = self.wg_definition_access)]
     
         return ports
@@ -326,40 +326,40 @@
     
 
     def define_bend_up_l(self):
-        pts = GratingCavityFilter.define_ports(self,0)
+        pts = GratingCavityFilter.define_ports(self, 0)
         route = RouteToWestAtY(pts[2], y_position=pts[2].position[1]+self.offset, min_straight=0.1)
         connecting_wg_el = RouteConnectorRounded(route)
         return connecting_wg_el
     def define_bend_up_r(self):
-        pts = GratingCavityFilter.define_ports(self,0)
-        route = RouteToEastAtY(pts[3],y_position= pts[3].position[1]+self.offset, min_straight=0.1)
+        pts = GratingCavityFilter.define_ports(self, 0)
+        route = RouteToEastAtY(pts[3], y_position= pts[3].position[1]+self.offset, min_straight=0.1)
         connecting_wg_el = RouteConnectorRounded(route)
         return connecting_wg_el
     def define_bend_down_l(self):
-        pts = GratingCavityFilter.define_ports(self,0)RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\Filters_OL_new.py to ipkissat3\samples\pysimul\grating_3D_Meep\Filters_OL_new.py.
RefactoringTool: No changes to ipkiss24\samples\pysimul\grating_3D_Meep\OL_wg_def.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\OL_wg_def.py to ipkissat3\samples\pysimul\grating_3D_Meep\OL_wg_def.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\grating_3D_Meep\Technology.py

+        pts = GratingCavityFilter.define_ports(self, 0)
         route = RouteToWestAtY(pts[0], y_position=pts[0].position[1]-self.offset, min_straight=0.1)
         connecting_wg_el = RouteConnectorRounded(route)
         return connecting_wg_el
     def define_bend_down_r(self):
-        pts = GratingCavityFilter.define_ports(self,0)
-        route = RouteToEastAtY(pts[1],y_position= pts[1].position[1]-self.offset, min_straight=0.1)
+        pts = GratingCavityFilter.define_ports(self, 0)
+        route = RouteToEastAtY(pts[1], y_position= pts[1].position[1]-self.offset, min_straight=0.1)
         connecting_wg_el = RouteConnectorRounded(route)
         return connecting_wg_el
     
-    def define_elements(self,elems):
-        elems = GratingCavityFilter.define_elements(self,elems)
+    def define_elements(self, elems):
+        elems = GratingCavityFilter.define_elements(self, elems)
         elems += self.bend_down_l
         elems += self.bend_down_r
         elems += self.bend_up_l
         elems += self.bend_up_r
         return elems
     
-    def define_ports(self,ports):
+    def define_ports(self, ports):
         p1 = self.bend_down_l.west_ports[0]
         p2 = self.bend_up_l.west_ports[0]
         p3 = self.bend_down_r.east_ports[0]
         p4 = self.bend_up_r.east_ports[0]
-        ports = [p1,p2,p3,p4]
+        ports = [p1, p2, p3, p4]
         return ports
     
  
--- ipkiss24\samples\pysimul\grating_3D_Meep\Technology.py	(original)
+++ ipkiss24\samples\pysimul\grating_3D_Meep\Technology.py	(refactored)
@@ -32,11 +32,11 @@
 from pysics.basics.material.material import Material, MaterialFactory
 from ipkiss.visualisation.display_style import DisplayStyle
 
-TECH.overwrite_allowed=["MATERIALS","MATERIAL_STACKS","VFABRICATION","PPLAYER","PROCESS_LAYER_MAP"]
+TECH.overwrite_allowed=["MATERIALS", "MATERIAL_STACKS", "VFABRICATION", "PPLAYER", "PROCESS_LAYER_MAP"]
 TECH.MATERIALS = MaterialFactory()
 
-TECH.MATERIALS.AIR = Material(name = "air",display_style = DisplayStyle(color = COLOR_GREEN))
-TECH.MATERIALS.SILICON = Material(name = "silicon",display_style = DisplayStyle(color = COLOR_CYAN))
+TECH.MATERIALS.AIR = Material(name = "air", display_style = DisplayStyle(color = COLOR_GREEN))
+TECH.MATERIALS.SILICON = Material(name = "silicon", display_style = DisplayStyle(color = COLOR_CYAN))
 TECH.MATERIALS.SILICON_OXIDE = Material(name = "silicon oxide", display_style = DisplayStyle(color = COLOR_BLUE))
 TECH.MATERIALS.GERMANIUM = Material(name = "germanium", display_style = DisplayStyle(color = COLOR_DARK_GREEN))
 
@@ -49,30 +49,30 @@
 MSTACK_SOI_SILICON_OXIDE_HEIGHT = 0.700
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_AIR = MaterialStack(name = "Air", 
-                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                        (TECH.MATERIALS.AIR,0.220)], 
+                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                        (TECH.MATERIALS.AIR, 0.220)], 
                                                     display_style = DisplayStyle(color = COLOR_BLUE))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_80nm = MaterialStack(name = "80nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.080),
-                                                                            (TECH.MATERIALS.AIR,0.300-0.160)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.080),
+                                                                            (TECH.MATERIALS.AIR, 0.300-0.160)], 
                                                         display_style = DisplayStyle(color = COLOR_GREEN))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm = MaterialStack(name = "150nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.150),
-                                                                            (TECH.MATERIALS.AIR,0.07)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.150),
+                                                                            (TECH.MATERIALS.AIR, 0.07)], 
                                                         display_style = DisplayStyle(color = COLOR_YELLOW))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_220nm = MaterialStack(name = "220nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.220)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.220)], 
                                                         display_style = DisplayStyle(color = COLOR_RED))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_380nm = MaterialStack(name = "380nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.220)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.220)], 
                                                         display_style = DisplayStyle(color = COLOR_WHITE))   
 
 TECH.MATERIALS.SILICON.epsilon = 12.08
@@ -156,16 +156,16 @@
 TECH.PROCESS.ACL = ProcessLayer("Active Cladding", "ACL")
 TECH.PROCESS.ACO = ProcessLayer("Active Core", "ACO")
 
-TECH.PURPOSE.ACTIVE = PatternPurpose("Active material","ACT")
+TECH.PURPOSE.ACTIVE = PatternPurpose("Active material", "ACT")
 
 TECH.PPLAYER.ACL = TechnologyTree()
 TECH.PPLAYER.ACO = TechnologyTree()
 
-TECH.PPLAYER.ACL.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACL,TECH.PURPOSE.ACTIVE,name = "ACL")
+TECH.PPLAYER.ACL.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACL, TECH.PURPOSE.ACTIVE, name = "ACL")
 TECH.PPLAYER.ACL.ALL = TECH.PPLAYER.ACL.DEFAULT
 TECH.PPLAYER.ACL.ALL.NAME = "ACL_ALL"
 
-TECH.PPLAYER.ACO.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACO,TECH.PURPOSE.ACTIVE,name = "ACO")
+TECH.PPLAYER.ACO.DEFAULT = ProcessPurposeLayer(TECH.PROCESS.ACO, TECH.PURPOSE.ACTIVE, name = "ACO")
 TECH.PPLAYER.ACO.ALL = TECH.PPLAYER.ACO.DEFAULT
 TECH.PPLAYER.ACO.ALL.NAME = "ACO_ALL"
 
@@ -181,7 +181,7 @@
 TECH.MATERIALS.InP = Material(name = "InP", display_style = DisplayStyle(color = COLOR_ORANGE))
 TECH.MATERIALS.InGaAsP1p55 = Material(name = "InGaAsP - Q=1.55", display_style = DisplayStyle(color = COLOR_BLUE))
 TECH.MATERIALS.InGaAsP1p2 = Material(name = "InGaAsP - Q=1.2", display_style = DisplayStyle(color = COLOR_BLACK))
-TECH.MATERIALS.BCB = Material(name = "BCB",display_style = DisplayStyle(color = COLOR_GREEN))
+TECH.MATERIALS.BCB = Material(name = "BCB", display_style = DisplayStyle(color = COLOR_GREEN))
 
 nInP = 3.1649
 nBCB = 1.544
@@ -220,26 +220,26 @@
 #MSTACK_SOI_SILICON_OXIDE_HEIGHT = 0.500RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\Technology.py to ipkissat3\samples\pysimul\grating_3D_Meep\Technology.py.
RefactoringTool: No changes to ipkiss24\samples\pysimul\grating_3D_Meep\layout.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\layout.py to ipkissat3\samples\pysimul\grating_3D_Meep\layout.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\grating_3D_Meep\simulation.py

 
 TECH.MATERIAL_STACKS.MSTACK_BCB = MaterialStack(name = "BCB",
-                                                        materials_heights = [(TECH.MATERIALS.BCB,BONDING_HEIGHT),
-                                                                             (TECH.MATERIALS.AIR,AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT)],
+                                                        materials_heights = [(TECH.MATERIALS.BCB, BONDING_HEIGHT),
+                                                                             (TECH.MATERIALS.AIR, AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT)],
                                                         display_style = DisplayStyle(color = COLOR_WHITE))
 
 
 TECH.MATERIAL_STACKS.MSTACK_ACLAD = MaterialStack(name = "ACTIVE CLADDING",
-                                                           materials_heights = [(TECH.MATERIALS.BCB,BONDING_HEIGHT),
-                                                                                (TECH.MATERIALS.InP,MESA_CLADDING_HEIGHT),
-                                                                                (TECH.MATERIALS.AIR,AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT-MESA_CLADDING_HEIGHT)],
+                                                           materials_heights = [(TECH.MATERIALS.BCB, BONDING_HEIGHT),
+                                                                                (TECH.MATERIALS.InP, MESA_CLADDING_HEIGHT),
+                                                                                (TECH.MATERIALS.AIR, AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT-MESA_CLADDING_HEIGHT)],
                                                            display_style = DisplayStyle(color = COLOR_BLACK))
 
-heights = [(TECH.MATERIALS.BCB,BONDING_HEIGHT),
-           (TECH.MATERIALS.InP,LowerCladdingHeight),
-           (TECH.MATERIALS.InGaAsP1p55,ActiveLayerHeight),
-           (TECH.MATERIALS.InP,UpperCladdingHeight)]
+heights = [(TECH.MATERIALS.BCB, BONDING_HEIGHT),
+           (TECH.MATERIALS.InP, LowerCladdingHeight),
+           (TECH.MATERIALS.InGaAsP1p55, ActiveLayerHeight),
+           (TECH.MATERIALS.InP, UpperCladdingHeight)]
 
 for i in range(Number_of_compensation_stacks):
-    heights.append((TECH.MATERIALS.InGaAsP1p2,CompensationLayer1Height))
-    heights.append((TECH.MATERIALS.InP,CompensationLayer2Height))
-heights.append((TECH.MATERIALS.AIR,AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT))
+    heights.append((TECH.MATERIALS.InGaAsP1p2, CompensationLayer1Height))
+    heights.append((TECH.MATERIALS.InP, CompensationLayer2Height))
+heights.append((TECH.MATERIALS.AIR, AIR_CLADDING_HEIGHT+MESA_CORE_HEIGHT))
 TECH.MATERIAL_STACKS.MSTACK_ACORE = MaterialStack(name = "ACTIVE CORE",
                                                   materials_heights = heights,
                                                   display_style = DisplayStyle(color = COLOR_ORANGE))
--- ipkiss24\samples\pysimul\grating_3D_Meep\simulation.py	(original)
+++ ipkiss24\samples\pysimul\grating_3D_Meep\simulation.py	(refactored)
@@ -66,16 +66,16 @@
     os.makedirs(source_output_directory)
     
 for f in files_to_copy :
-    new_file = '%s/%s'%(source_output_directory,f)
-    copy_command = 'cp %s %s'%(f,new_file)
-    print 'Executing:'
-    print copy_command
+    new_file = '%s/%s'%(source_output_directory, f)
+    copy_command = 'cp %s %s'%(f, new_file)
+    print('Executing:')
+    print(copy_command)
     os.system(copy_command)
 
 
 
-wg_def_cavity = WgElDefinition(wg_width = 0.45,trench_width = 1.0)
-wg_def_access = WgElDefinition(wg_width = 0.45,trench_width = 1.0)
+wg_def_cavity = WgElDefinition(wg_width = 0.45, trench_width = 1.0)
+wg_def_access = WgElDefinition(wg_width = 0.45, trench_width = 1.0)
 
 
 np_r = 15
@@ -86,7 +86,7 @@
 
 
 
-print 'Reference Simulation'
+print('Reference Simulation')
 
 grating_unit_cell = WgGratingPeriodShallow(length = period,
                                                        wg_definition = wg_def_cavity,
@@ -107,8 +107,8 @@
 
 #create new ports that will act as input/output ports for the simulation
 act_port_offset = 2.5
-p_e = reference_component.east_ports[0].transform_copy(Translation(translation=(-section_len,0)))
-p_w = reference_component.west_ports[0].transform_copy(Translation(translation=(+section_len,0)))
+p_e = reference_component.east_ports[0].transform_copy(Translation(translation=(-section_len, 0)))
+p_w = reference_component.west_ports[0].transform_copy(Translation(translation=(+section_len, 0)))
 
 reference_component.write_gdsii('comp_for_3d_simulation.gds')
 
@@ -116,10 +116,10 @@
 reference_component.visualize_2d()
 
 
-print 'Creating reference component simulator'
+print('Creating reference component simulator')
 reference_component_simulator = StructureMeep3DSimulator(component = reference_component,
                                                                 input_port = p_w,
-                                                                output_ports = [p_w,p_e],
+                                                                output_ports = [p_w, p_e],
                                                                 resolution = 30,
                                                                 growth = 0.0,
                                                                 wavelength = 1.55,
@@ -128,13 +128,13 @@
 filename = '%s/reversed_flux'%output_directory
 
 
-print 'Done creating reference component simulator'
+print('Done creating reference component simulator')
 
 
 
 reference_component_simulator.pulse_width = 0.4
-reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'y',filename = '%s/Ey_y_ref'%output_directory)) #slice orthogonal to the Y-axis at y=0
-reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'z',cut_value = 0.810,filename = '%s/Ey_z1_ref'%output_directory)) #slice orthogonal to the Z-axis at z=0.81 (700nm SiOx + half of 220nm Si = 700+110 = 810 => 0.81)
+reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'y', filename = '%s/Ey_y_ref'%output_directory)) #slice orthogonal to the Y-axis at y=0
+reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'z', cut_value = 0.810, filename = '%s/Ey_z1_ref'%output_directory)) #slice orthogonal to the Z-axis at z=0.81 (700nm SiOx + half of 220nm Si = 700+110 = 810 => 0.81)
 reference_component_simulator.save_reversed_flux_to_file_ID = 0
 reference_component_simulator.save_reversed_flux_to_file_filename = filename
 reference_component_simulator.stop_time_multiplier = 2.0 #stop after 2 times the pulse length (pulse length calculated by Meep)
@@ -142,7 +142,7 @@
 reference_component_simulator.simulate()
 
 
-print 'Done simulating reference component'
+print('Done simulating reference component')
 
 output_filename = '%s/output.txt'%output_directory
 output_data = []
@@ -164,7 +164,7 @@
 ## with reversed flux
 ## ------------------
 
-print 'Simulating with reversed flux'
+print('Simulating with reversed flux')
 
 
 grating_unit_cell = WgGratingPeriodShallow(length = period,
@@ -188,11 +188,11 @@
 
 reference_component_simulator.component = component
 reference_component_simulator.input_port = p_w
-reference_component_simulator.output_ports = [p_w,p_e]
+reference_component_simulator.output_ports = [p_w, p_e]
 
 reference_component_simulator.clear_output_cut_list()
-reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'y',filename = '%s/Ey_y'%output_directory))
-reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'z',cut_value = 0.81,filename = '%s/Ey_z1'%output_directory))
+reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'y', filename = '%s/Ey_y'%output_directory))
+reference_component_simulator.add_output_cut(OutputCut(normal_vector = 'z', cut_value = 0.81, filename = '%s/Ey_z1'%output_directory))
 
 
 reference_component_simulator.save_reversed_flux_to_file_ID = -1 #don't save a flux, but initiliaze the flux from file_ID = 0 (see below)
@@ -226,4 +226,4 @@
 output_data.append(WL_ref)
 output_data.append(reflection)RefactoringTool: Writing converted ipkiss24\samples\pysimul\grating_3D_Meep\simulation.py to ipkissat3\samples\pysimul\grating_3D_Meep\simulation.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\mmi_camfr\mmi_camfr.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\mmi_camfr\mmi_camfr.py to ipkissat3\samples\pysimul\mmi_camfr\mmi_camfr.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\mmi_fdtd\mmi_fdtd.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\mmi_fdtd\mmi_fdtd.py to ipkissat3\samples\pysimul\mmi_fdtd\mmi_fdtd.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py
RefactoringTool: Writing converted ipkiss24\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py to ipkissat3\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py.
RefactoringTool: Refactored ipkiss24\samples\pysimul\ring_fdtd\ring_fdtd.py

 output_data.append(transmission)
-savetxt(output_filename,matrix(output_data).transpose(),delimiter = '\t')
+savetxt(output_filename, matrix(output_data).transpose(), delimiter = '\t')
--- ipkiss24\samples\pysimul\mmi_camfr\mmi_camfr.py	(original)
+++ ipkiss24\samples\pysimul\mmi_camfr\mmi_camfr.py	(refactored)
@@ -40,7 +40,7 @@
 L_taper = 8.0
 
 mmi = ShallowMmi1x2Tapered(width=W_mmi, length=L_mmi, wg_offset=offset, 
-                                taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12,0.2])
+                                taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12, 0.2])
                   
 mmi.write_gdsii("simul_ShallowMmiSplit3Db_camfr.gds") 
 
@@ -73,7 +73,7 @@
 beta = camfr_stack.inc().mode(0).kz()
 
 #extract the field at the input and output position
-x_positions = numpy.arange(0,window_si.height,0.01)
+x_positions = numpy.arange(0, window_si.height, 0.01)
 IHz= numpy.zeros(len(x_positions), dtype=numpy.complex)
 IH1= numpy.zeros(len(x_positions), dtype=numpy.complex)
 IH2= numpy.zeros(len(x_positions), dtype=numpy.complex)
@@ -82,7 +82,7 @@
 OH2= numpy.zeros(len(x_positions), dtype=numpy.complex)
 
 LOG.debug("Now extracting the fields...")
-for x_pos, i in zip(x_positions, range(len(x_positions))):
+for x_pos, i in zip(x_positions, list(range(len(x_positions)))):
     coord_input = camfr.Coord(x_pos, 0.0, 0.0)
     coord_output = camfr.Coord(x_pos, 0.0, co_east - co_west)
     field_input = camfr_stack.field(coord_input) 
@@ -132,9 +132,9 @@
 PI = trapz(numpy.square(IH2))
 PO= trapz(numpy.square(OH2))
 
-print "Integral over H2 square at input : ", PI
-print "Integral over H2 square at output : ", PO
-print PO / PI * 100.0,"%"
+print("Integral over H2 square at input : ", PI)
+print("Integral over H2 square at output : ", PO)
+print(PO / PI * 100.0, "%")
  
 pyplot.show()
 
--- ipkiss24\samples\pysimul\mmi_fdtd\mmi_fdtd.py	(original)
+++ ipkiss24\samples\pysimul\mmi_fdtd\mmi_fdtd.py	(refactored)
@@ -34,7 +34,7 @@
 offset = 0.5*D_wg + 0.5*W_wg
 L_taper = 8.0
 mmi = ShallowMmi1x2Tapered(width=W_mmi, length=L_mmi, wg_offset=offset, 
-                                taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12,0.2])
+                                taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12, 0.2])
 
 #export the component to GDS, just for our own reference
 mmi.write_gdsii("simul_mmi.gds")
@@ -58,7 +58,7 @@
 fluxplane_width = 30.0
 simul_params["sources"] = [ModeProfileContinuousSourceAtPort(center_wavelength = center_wavelength, 
                                                        smoothing_width = 60.0, 
-                                                       port = mmi.west_ports[0].transform_copy(transformation = Translation(translation=(-1.0,0.0))), 
+                                                       port = mmi.west_ports[0].transform_copy(transformation = Translation(translation=(-1.0, 0.0))), 
                                                        polarization = TE,
                                                        stop_time = 120.0)]
 
@@ -82,7 +82,7 @@
                                                                         port = mmi.east_ports[1],
                                                                         overlap_trench = False,
                                                                         name = "flux lower output"),                            
-                            ProbingpointAtPort(port = mmi.east_ports[0].transform_copy(transformation = Translation(translation=(0.25,0.0))))]
+                            ProbingpointAtPort(port = mmi.east_ports[0].transform_copy(transformation = Translation(translation=(0.25, 0.0))))]
 
 #specify a step_processor : this processor will be called at every step of the FDTD simulatioN.
 #In our case, save the Hz component to file every 100 steps
@@ -113,13 +113,13 @@
 #this could be done without reading the fluxes from file (since we can retrieve them from memory), 
 #but we do it here as an illustration of the technique, in case you want to process the fluxes after the simulation in a seperate script
 file_flux_output_north = open("fluxplane_fluxupperoutput", 'r')
-file_flux_output_south = open("fluxplane_fluxloweroutput",'r')
-file_flux_input = open("fluxplane_fluxinput",'r')
+file_flux_output_south = open("fluxplane_fluxloweroutput", 'r')
+file_flux_input = open("fluxplane_fluxinput", 'r')
 #load the files with flux data, which were saved by the post_processor 'PersistFluxplanes' (see above)
-import cPickle
-flux_input = cPickle.load(file_flux_input)
-flux_output_south = cPickle.load(file_flux_output_south)
-flux_output_north = cPickle.load(file_flux_output_north)
+import pickle
+flux_input = pickle.load(file_flux_input)
+flux_output_south = pickle.load(file_flux_output_south)
+flux_output_north = pickle.load(file_flux_output_north)
 file_flux_input.close()
 file_flux_output_south.close()
 file_flux_output_north.close()
@@ -135,16 +135,16 @@
 
 Fi = [f / ref_max for f in F_in]
 
-Fo1 = [fo / fi  for fo,fi in zip(F_out_south, F_in)]
+Fo1 = [fo / fi  for fo, fi in zip(F_out_south, F_in)]
 Fo2 = [fo / fi  for fo, fi in zip(F_out_north, F_in)]
-Fo = [f1+f2 for f1,f2 in zip(Fo1,Fo2)]
+Fo = [f1+f2 for f1, f2 in zip(Fo1, Fo2)]
 
 known_efficiency = [0.95] #we know from earlier simualtions that the efficiency of the MMI is 95%
 
 #initiate the plotting
 pyplot.clf()
 p1, = pyplot.plot(frequencies, Fi, 'yo')
-p2, = pyplot.plot([1550],known_efficiency, 'co')
+p2, = pyplot.plot([1550], known_efficiency, 'co')
 p3, = pyplot.plot(frequencies, Fo, 'bo')
 p4, = pyplot.plot(frequencies, Fo1, 'ro', )
 p5, = pyplot.plot(frequencies, Fo2, 'go' )
--- ipkiss24\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py	(original)
+++ ipkiss24\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py	(refactored)
@@ -25,10 +25,10 @@
 
 try:
     import meep as meep
-except ImportError, e:
+except ImportError as e:
     try :
         import meep_mpi as meep
-    except ImportError, e:
+    except ImportError as e:
         raise Exception("Modules 'meep' or 'meep_mpi' not found.")    
 
 
@@ -44,7 +44,7 @@
 offset = 0.5*D_wg + 0.5*W_wg
 L_taper = 8.0
 mmi = ShallowMmi1x2Tapered(width=W_mmi, length=L_mmi, wg_offset=offset, 
-                           taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12,0.2])
+                           taper_width=W_wg, taper_length=L_taper, straight_extension=[0.12, 0.2])
 mmi.write_gdsii("simul_mmi.gds")
 
 #Set simulation parameters
@@ -69,7 +69,7 @@
                                       resolution = simul_params["resolution"],
                                       port = mmi.west_ports[0], 
                                       wavelength = simul_params["center_wavelength"])
-        print mp		
+        print(mp)		
         #create a Gaussian source 
         center_wavelength = simul_params["center_wavelength"]
         pulse_width = 30
@@ -77,7 +77,7 @@
         pulse_width_freq = ( (float(pulse_width)/1000.0) / (float(center_wavelength)/1000.0) ) * center_freq 			
         src_gaussian = meep.gaussian_src_time(center_freq, pulse_width_freq)
         #add a point source (linked to the Gaussian source) at the position of the west port
-        source_position_vec = self.make_meep_vec(mmi.west_ports[0].transform_copy(Translation(translation=(-9.0,0))).position)
+        source_position_vec = self.make_meep_vec(mmi.west_ports[0].transform_copy(Translation(translation=(-9.0, 0))).position)
         fields.add_point_source(meep.Hz, src_gaussian, source_position_vec)		
         #add a probing point to the upper output arm
         probing_point_vec = self.make_meep_vec(mmi.east_ports[1].position)
--- ipkiss24\samples\pysimul\ring_fdtd\ring_fdtd.py	(original)
+++ ipkiss24\samples\pysimul\ring_fdtd\ring_fdtd.py	(refactored)
@@ -29,7 +29,7 @@
 from pysimul.runtime.processor import *
 from ipkiss.all import LOG
 
-ring = RingRect180DropFilter(bend_radius = 5.00, straights = (0.0, 0.0), coupler_spacings=[0.67,0.67])RefactoringTool: Writing converted ipkiss24\samples\pysimul\ring_fdtd\ring_fdtd.py to ipkissat3\samples\pysimul\ring_fdtd\ring_fdtd.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py

+ring = RingRect180DropFilter(bend_radius = 5.00, straights = (0.0, 0.0), coupler_spacings=[0.67, 0.67])
 
 from ipkiss.plugins.vfabrication import *
 ring.write_gdsii_vfabrication("ring_vfab.gds")
@@ -61,24 +61,24 @@
 params["sources"] = [GaussianVolumeSourceAtPort(field_component = compHz, 
                                                         center_wavelength = wavelength, 
                                                         pulse_width = pulse_width, 
-                                                        port = ring.west_ports[0].transform_copy(transformation = Translation(translation=(2.0,0.0))))]
+                                                        port = ring.west_ports[0].transform_copy(transformation = Translation(translation=(2.0, 0.0))))]
 
 params["datacollectors"] = [FluxplaneAtPort(center_wavelength = wavelength, 
                                             pulse_width = pulse_width,
                                             number_of_sampling_freq = 2000,
-                                            port = ring.east_ports[0].transform_copy(transformation = Translation(translation=(-2.0,0.0))),
+                                            port = ring.east_ports[0].transform_copy(transformation = Translation(translation=(-2.0, 0.0))),
                                             overlap_trench = False)
                                             ]
 
 params["step_processor"] = SaveFieldsHDF5Processor(fileName = "RING_Hz.h5", H5OutputIntervalSteps = 1000, field_component = compHz)
-print
-print
-print "*************************************** WARNING **********************************************************************"
-print "***** WARNING : INCREASE THE maximum_steps PARAMETER TO 750000 IN ORDER TO SEE RESONANCE PEAK !!!!!!!! ***************" 
-print "*************************************** WARNING **********************************************************************"
-print
-print
-print
+print()
+print()
+print("*************************************** WARNING **********************************************************************")
+print("***** WARNING : INCREASE THE maximum_steps PARAMETER TO 750000 IN ORDER TO SEE RESONANCE PEAK !!!!!!!! ***************") 
+print("*************************************** WARNING **********************************************************************")
+print()
+print()
+print()
 params["stopcriterium"] = StopAfterSteps(maximum_steps = 10000) #INCREASE TO 750000 IN ORDER TO SEE RESONANCE PEAK !!!!!!!!
 
 params["post_processor"] = PersistFluxplanes()
@@ -86,14 +86,14 @@
 simul = ring.create_simulation(simul_params = params)
 simul.procedure.run(interactive_mode = False)        
 
-print "Done with the simulation. Now plotting the flux..."
+print("Done with the simulation. Now plotting the flux...")
 
-import cPickle
+import pickle
 from dependencies.matplotlib_wrapper import *
 file_flux_output = open("fluxplane_datacollector", 'r')
 
 
-flux_output = cPickle.load(file_flux_output)
+flux_output = pickle.load(file_flux_output)
 file_flux_output.close()
 
 frequencies = 1000.0 / flux_output.flux_per_freq[0] 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py	(refactored)
@@ -23,12 +23,12 @@
 from ring import RingResonator
 
 # documentation for your class
-print RingResonator.__doc__
+print(RingResonator.__doc__)
 
 # create a new ringResonator object
 my_ring = RingResonator(ring_radius = 5.0)
 
-print my_ring.name # unique name with prefix
+print(my_ring.name) # unique name with prefix
 
 # change property
 my_ring.ring_wg_width = 0.6
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py	(refactored)
@@ -54,4 +54,4 @@
 # As this is only contains a library component, we should call it from
 # another file. In this case, it is 'execute.py'
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py	(refactored)
@@ -32,6 +32,6 @@
 # create a new ringResonator object
 my_ring = RingResonator(ring_radius = 5.0)
 
-print my_ring.name # unique name with prefix
+print(my_ring.name) # unique name with prefix
 
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py	(refactored)
@@ -47,4 +47,4 @@
 
 
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py	(refactored)
@@ -50,7 +50,7 @@
     def define_elements(self, elems):
         # define shapes for the waveguides. This can be in the form of
         # predefined shape objects, but also as a list of Tuples
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -65,4 +65,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py	(refactored)
@@ -54,7 +54,7 @@
     def define_elements(self, elems):
         # define shapes for the waveguides. This can be in the form of
         # predefined shape objects, but also as a list of Tuples
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -69,4 +69,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py	(refactored)
@@ -28,11 +28,11 @@
 # create a new ringResonator object
 my_ring = RingResonator(ring_radius = 5.0)
 
-print my_ring.ports
-print my_ring.ports.east_ports # ports pointing east
-print my_ring.ports.east_ports.y_sorted() # ports pointing east, sorted south to north
-print my_ring.ports.north_ports # ports pointing north (none)
-print my_ring.ports["E0"] #first port in the list east_ports.y_sorted()
+print(my_ring.ports)
+print(my_ring.ports.east_ports) # ports pointing east
+print(my_ring.ports.east_ports.y_sorted()) # ports pointing east, sorted south to north
+print(my_ring.ports.north_ports) # ports pointing north (none)
+print(my_ring.ports["E0"]) #first port in the list east_ports.y_sorted()
 
 
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py	(refactored)
@@ -52,7 +52,7 @@
     def define_elements(self, elems):
         # define shapes for the waveguides. This can be in the form of
         # predefined shape objects, but also as a list of TuplesRefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\double_ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\double_ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\double_ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\double_ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\double_ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_07_routing\double_ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\double_ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\double_ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\double_ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\execute.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py

-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -74,4 +74,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py	(refactored)
@@ -34,7 +34,7 @@
 
 my_two_rings.write_gdsii("tworings.gds")
 
-print my_two_rings.ports
+print(my_two_rings.ports)
 
 
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py	(refactored)
@@ -49,7 +49,7 @@
 
 
     def define_elements(self, elems):
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -69,4 +69,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py	(refactored)
@@ -34,7 +34,7 @@
 
 my_two_rings.write_gdsii("tworings.gds")
 
-print my_two_rings.ports
+print(my_two_rings.ports)
 
 
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py	(refactored)
@@ -49,7 +49,7 @@
 
 
     def define_elements(self, elems):
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -69,4 +69,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py	(refactored)
@@ -34,7 +34,7 @@
 
 my_two_rings.write_gdsii("tworings.gds")
 
-print my_two_rings.ports
+print(my_two_rings.ports)
 
 
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py	(refactored)
@@ -49,7 +49,7 @@
 
 
     def define_elements(self, elems):
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -83,4 +83,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py	(refactored)
@@ -89,7 +89,7 @@
     """ a directional coupler with bends on each side """
     
     bend_radius =         PositiveNumberProperty(default = TECH.WG.BEND_RADIUS)
-    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0,90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
+    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0, 90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
     straight_after_bend = PositiveNumberProperty (default = TECH.WG.SHORT_STRAIGHT)
     
     # we need only to override the waveguide_routes. the rest of the parent class is reused!    
@@ -123,4 +123,4 @@
     
 
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py	(refactored)
@@ -35,8 +35,8 @@
 
 # create a dumb structure to collect our different directional couplers
 my_group = Structure(name = "Group")
-my_group += SRef(reference = my_dircoup_1, position = (0,0))
-my_group += SRef(reference = my_dircoup_2, position = (0,15))
+my_group += SRef(reference = my_dircoup_1, position = (0, 0))
+my_group += SRef(reference = my_dircoup_2, position = (0, 15))
 
 
 my_group.write_gdsii("dircoups.gds")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py	(refactored)
@@ -89,7 +89,7 @@
     """ a directional coupler with bends on each side """
     
     bend_radius =         PositiveNumberProperty(default = TECH.WG.BEND_RADIUS)
-    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0,90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
+    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0, 90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
     straight_after_bend = PositiveNumberProperty (default = TECH.WG.SHORT_STRAIGHT)
     
     # we need only to override the waveguide_routes. the rest of the parent class is reused!    
@@ -123,4 +123,4 @@
     
 
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py	(refactored)
@@ -49,7 +49,7 @@
 
 
     def define_elements(self, elems):
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -69,4 +69,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py	(refactored)
@@ -69,7 +69,7 @@
         si_rings = si_ring1.transform(t_ring1) + si_ring2.transform(t_ring2)
         
         # combiner
-        t_combiner = Translation((si_rings.east - si_combiner.west + spacing,0.0))
+        t_combiner = Translation((si_rings.east - si_combiner.west + spacing, 0.0))
         
         return (t_ring1, t_ring2, t_splitter, t_combiner)
 
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py	(refactored)RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\execute.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\mzi.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\mzi.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\mzi.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\execute.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\execute.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\execute.py.
RefactoringTool: No changes to ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\mzi.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\mzi.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\mzi.py.
RefactoringTool: Refactored ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py
RefactoringTool: Writing converted ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py to ipkissat3\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py.
RefactoringTool: No changes to ipkiss24\technologies\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\__init__.py to ipkissat3\technologies\__init__.py.
RefactoringTool: Refactored ipkiss24\technologies\default_ipkiss\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\default_ipkiss\__init__.py to ipkissat3\technologies\default_ipkiss\__init__.py.
RefactoringTool: No changes to ipkiss24\technologies\si_photonics\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\__init__.py to ipkissat3\technologies\si_photonics\__init__.py.
RefactoringTool: No changes to ipkiss24\technologies\si_photonics\ipkiss\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\ipkiss\__init__.py to ipkissat3\technologies\si_photonics\ipkiss\__init__.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\ipkiss\common.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\ipkiss\common.py to ipkissat3\technologies\si_photonics\ipkiss\common.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\ipkiss\default\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\ipkiss\default\__init__.py to ipkissat3\technologies\si_photonics\ipkiss\default\__init__.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\ipkiss\default\agnostic.py

@@ -89,7 +89,7 @@
     """ a directional coupler with bends on each side """
     
     bend_radius =         PositiveNumberProperty(default = TECH.WG.BEND_RADIUS)
-    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0,90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
+    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0, 90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
     straight_after_bend = PositiveNumberProperty (default = TECH.WG.SHORT_STRAIGHT)
     
     # we need only to override the waveguide_routes. the rest of the parent class is reused!    
@@ -123,4 +123,4 @@
     
 
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py	(refactored)
@@ -89,7 +89,7 @@
     """ a directional coupler with bends on each side """
     
     bend_radius =         PositiveNumberProperty(default = TECH.WG.BEND_RADIUS)
-    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0,90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
+    bend_angle =          AngleProperty(default = 45.0, restriction = RestrictRange(0, 90, True, True)) # angle between 0 and 90 degrees, including 0 and 90
     straight_after_bend = PositiveNumberProperty (default = TECH.WG.SHORT_STRAIGHT)
     
     # we need only to override the waveguide_routes. the rest of the parent class is reused!    
@@ -123,4 +123,4 @@
     
 
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py	(original)
+++ ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py	(refactored)
@@ -49,7 +49,7 @@
 
 
     def define_elements(self, elems):
-        shape_ring = ShapeCircle(center = (0,0), radius = self.ring_radius)
+        shape_ring = ShapeCircle(center = (0, 0), radius = self.ring_radius)
         shape_bus =  [(-self.ring_radius, -self.ring_radius - self.coupler_spacing), 
                       (self.ring_radius, -self.ring_radius - self.coupler_spacing)]
         
@@ -69,4 +69,4 @@
     
     
 if __name__ == "__main__":
-    print "This is not the main file. Run 'execute.py' in the same folder"
+    print("This is not the main file. Run 'execute.py' in the same folder")
--- ipkiss24\technologies\default_ipkiss\__init__.py	(original)
+++ ipkiss24\technologies\default_ipkiss\__init__.py	(refactored)
@@ -48,7 +48,7 @@
 TECH.METRICS.GRID = 5E-9
 TECH.METRICS.UNIT = 1E-6
 TECH.METRICS.ANGLE_STEP = 1.0
-TECH.METRICS.overwrite_allowed = ["UNIT","GRID","ANGLE_STEP"]
+TECH.METRICS.overwrite_allowed = ["UNIT", "GRID", "ANGLE_STEP"]
 
 ####################################################################
 # LAYER MAP
@@ -62,14 +62,14 @@
         from ipkiss.io.gds_layer import AutoGdsiiLayerOutputMap
                 
         #if not hasattr(self, "EXPORT_LAYER_MAP"):
-        if not "EXPORT_LAYER_MAP"  in self.keys():
+        if not "EXPORT_LAYER_MAP"  in list(self.keys()):
             self.EXPORT_LAYER_MAP = AutoGdsiiLayerOutputMap()
             self.overwrite_allowed.append('EXPORT_LAYER_MAP')
-        if not "IMPORT_LAYER_MAP"  in self.keys():
+        if not "IMPORT_LAYER_MAP"  in list(self.keys()):
             self.IMPORT_LAYER_MAP = AutoGdsiiLayerInputMap()
             self.overwrite_allowed.append('IMPORT_LAYER_MAP')
 
-        if not "FILTER" in self.keys():
+        if not "FILTER" in list(self.keys()):
             from ipkiss.primitives.filters.path_cut_filter import PathCutFilter
             from ipkiss.primitives.filters.empty_filter import EmptyFilter
             from ipkiss.primitives.filters.path_to_boundary_filter import PathToBoundaryFilter
--- ipkiss24\technologies\si_photonics\ipkiss\common.py	(original)
+++ ipkiss24\technologies\si_photonics\ipkiss\common.py	(refactored)
@@ -225,16 +225,16 @@
                   ]
     
         for process in process_display_order:
-            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA),DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF_AREA) , DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.LINE) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.DF.TEXT) , DISPLAY_TEXT),
-                          (PPLayer(process, TECH.PURPOSE.DF.HOLE) , DISPLAY_HOLE),
+            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.LINE), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.DF.TEXT), DISPLAY_TEXT),
+                          (PPLayer(process, TECH.PURPOSE.DF.HOLE), DISPLAY_HOLE),
                           (PPLayer(process, TECH.PURPOSE.DF.TRENCH), DISPLAY_LF),
-                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE) , DISPLAY_HOLE),
+                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE), DISPLAY_HOLE),
                           ]
         
         self.PREDEFINED_STYLE_SETS.PURPOSE_HIGHLIGHT  = style_set
--- ipkiss24\technologies\si_photonics\ipkiss\default\__init__.py	(original)
+++ ipkiss24\technologies\si_photonics\ipkiss\default\__init__.py	(refactored)
@@ -19,7 +19,7 @@
 # 
 # Contact: ipkiss@intec.ugent.be
 
-from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree,DelayedInitTechnologyTree
+from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
 
 __all__ = ["TECH"]
@@ -37,7 +37,7 @@
 TECH.METRICS.ANGLE_STEP = 1.0
 
 from ..common import *
-from agnostic import *
+from .agnostic import *
 
 #activate the "ports" mixin
 import ipkiss.plugins.photonics.port.aspect 
--- ipkiss24\technologies\si_photonics\ipkiss\default\agnostic.py	(original)
+++ ipkiss24\technologies\si_photonics\ipkiss\default\agnostic.py	(refactored)
@@ -21,7 +21,7 @@
 
 from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
-from ipkiss.io.gds_layer import GdsiiLayerInputMap,GdsiiLayerOutputMap
+from ipkiss.io.gds_layer import GdsiiLayerInputMap, GdsiiLayerOutputMap
 from ipkiss.process.layer import PPLayer as PPLayer
 
 TECH = get_technology()
@@ -36,13 +36,13 @@
 TECH.PPLAYER.FC = TechnologyTree()
 
 ### WG ###
-TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_TRE")
-TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_SQ")
-TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.HOLE,name="WG_HEX")
-TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.MARKER,name="WG_MRK")
-TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TEXT,name="WG_TXT")
-TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF.LINE,name="WG_LIN")
-TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF_AREA,name="WG_LFAREA")
+TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_TRE")
+TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_SQ")
+TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.HOLE, name="WG_HEX")
+TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.MARKER, name="WG_MRK")
+TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TEXT, name="WG_TXT")
+TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF.LINE, name="WG_LIN")
+TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF_AREA, name="WG_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.WG.CRITICAL = TECH.PPLAYER.WG.TRENCH | TECH.PPLAYER.WG.SQUARE | TECH.PPLAYER.WG.HOLE | TECH.PPLAYER.WG.MARKER | (TECH.PPLAYER.WG.LINE ^ TECH.PPLAYER.WG.LF_AREA) & TECH.PPLAYER.WG.LF_AREA
@@ -54,13 +54,13 @@
 TECH.PPLAYER.WG.ALL = TECH.PPLAYER.WG.CRITICAL | TECH.PPLAYER.WG.NONCRITICAL
 
 ### FC ###
-TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_TRE")
-TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_SQ")
-TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.HOLE,name="FC_HEX")
-TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.MARKER,name="FC_MRK")
-TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TEXT,name="FC_TXT")
-TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF.LINE,name="FC_LIN")
-TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF_AREA,name="FC_LFAREA")
+TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_TRE")
+TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_SQ")
+TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.HOLE, name="FC_HEX")
+TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.MARKER, name="FC_MRK")
+TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TEXT, name="FC_TXT")
+TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF.LINE, name="FC_LIN")
+TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF_AREA, name="FC_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.FC.CRITICAL = TECH.PPLAYER.FC.TRENCH | TECH.PPLAYER.FC.SQUARE | TECH.PPLAYER.FC.HOLE | (TECH.PPLAYER.FC.LINE ^ TECH.PPLAYER.FC.LF_AREA) & TECH.PPLAYER.FC.LF_AREA
@@ -88,11 +88,11 @@
       TECH.PURPOSE.LF.DUMMY: 5,
       TECH.PURPOSE.LF_AREA: 9, 
       TECH.PURPOSE.DF_AREA: 10, 
-      TECH.PURPOSE.DF.MARKER : 11,
+      TECH.PURPOSE.DF.MARKER: 11,
       TECH.PURPOSE.DF.HOLE: 12, 
       TECH.PURPOSE.DF.TRENCH: 13,
       TECH.PURPOSE.DF.SQUARE: 14,
-      TECH.PURPOSE.DF.TEXT : 15,
+      TECH.PURPOSE.DF.TEXT: 15,
       TECH.PURPOSE.DF.DUMMY: 16,
       TECH.PURPOSE.NO_GEN: 20,
       TECH.PURPOSE.NO_FILL: 21,
@@ -177,8 +177,8 @@
 
 TECH.MATERIALS = MaterialFactory()
 
-TECH.MATERIALS.AIR = Material(name = "air",display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
-TECH.MATERIALS.SILICON = Material(name = "silicon",display_style = DisplayStyle(color = COLOR_CYAN))
+TECH.MATERIALS.AIR = Material(name = "air", display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
+TECH.MATERIALS.SILICON = Material(name = "silicon", display_style = DisplayStyle(color = COLOR_CYAN))
 TECH.MATERIALS.SILICON_OXIDE = Material(name = "silicon oxide", display_style = DisplayStyle(color = COLOR_BLUE))
 TECH.MATERIALS.GERMANIUM = Material(name = "germanium", display_style = DisplayStyle(color = COLOR_DARK_GREEN))
 
@@ -189,31 +189,31 @@
 MSTACK_SOI_SILICON_OXIDE_HEIGHT = 0.500
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_AIR = MaterialStack(name = "Air", 
-                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                        (TECH.MATERIALS.AIR,0.380)], 
+                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                        (TECH.MATERIALS.AIR, 0.380)], 
                                                     display_style = DisplayStyle(color = COLOR_BLUE))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_80nm = MaterialStack(name = "80nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.080),
-                                                                            (TECH.MATERIALS.AIR,0.300)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.080),
+                                                                            (TECH.MATERIALS.AIR, 0.300)], 
                                                         display_style = DisplayStyle(color = COLOR_GREEN))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm = MaterialStack(name = "150nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.150),
-                                                                            (TECH.MATERIALS.AIR,0.230)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.150),
+                                                                            (TECH.MATERIALS.AIR, 0.230)], 
                                                         display_style = DisplayStyle(color = COLOR_YELLOW))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_220nm = MaterialStack(name = "220nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.220),
-                                                                            (TECH.MATERIALS.AIR,0.160)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.220),
+                                                                            (TECH.MATERIALS.AIR, 0.160)], 
                                                         display_style = DisplayStyle(color = COLOR_RED))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_380nm = MaterialStack(name = "380nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.380)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.380)], 
                                                         display_style = DisplayStyle(color = COLOR_WHITE))   
 
 TECH.MATERIALS.SILICON.epsilon = 12
@@ -247,8 +247,8 @@
                         ((1, 0), TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm),
                         ((1, 1), TECH.MATERIAL_STACKS.MSTACK_SOI_AIR),
                       ],   
-            is_lf_fabrication = {TECH.PROCESS.WG : False, 
-                                 TECH.PROCESS.FC : False,} #etch to 220nm is implicitely present over the whole canvas
+            is_lf_fabrication = {TECH.PROCESS.WG: False, RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\ipkiss\default\agnostic.py to ipkissat3\technologies\si_photonics\ipkiss\default\agnostic.py.
RefactoringTool: No changes to ipkiss24\technologies\si_photonics\picazzo\__init__.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\__init__.py to ipkissat3\technologies\si_photonics\picazzo\__init__.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\picazzo\common.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\common.py to ipkissat3\technologies\si_photonics\picazzo\common.py.
RefactoringTool: No changes to ipkiss24\technologies\si_photonics\picazzo\display_style.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\display_style.py to ipkissat3\technologies\si_photonics\picazzo\display_style.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\picazzo\standard_fibcoup.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\standard_fibcoup.py to ipkissat3\technologies\si_photonics\picazzo\standard_fibcoup.py.
RefactoringTool: No changes to ipkiss24\technologies\si_photonics\picazzo\wgdef.py
RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\wgdef.py to ipkissat3\technologies\si_photonics\picazzo\wgdef.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\picazzo\default\__init__.py

+                                 TECH.PROCESS.FC: False,} #etch to 220nm is implicitely present over the whole canvas
             )
 
 
--- ipkiss24\technologies\si_photonics\picazzo\common.py	(original)
+++ ipkiss24\technologies\si_photonics\picazzo\common.py	(refactored)
@@ -40,17 +40,17 @@
 TECH.PROCESS.SK = ProcessLayer("Socket waveguides", "SK")
 
 # implants, silicide, contacts
-TECH.PROCESS.NBODY = ProcessLayer("Body N doping","NBODY")
-TECH.PROCESS.PBODY = ProcessLayer("Body P doping" ,"PBODY")
-TECH.PROCESS.N1 = ProcessLayer("N-type doping 1","N1")
-TECH.PROCESS.NPLUS = ProcessLayer("N++ doping" ,"N2")
-TECH.PROCESS.P1 = ProcessLayer("P-type doping 1","P1")
-TECH.PROCESS.PPLUS = ProcessLayer("P++ doping","PPLUS")
-TECH.PROCESS.PP1 = ProcessLayer("Poly P-type doping 1","PP1")
-TECH.PROCESS.PP2 = ProcessLayer("Poly P-type doping 2","PP2")
-
-TECH.PROCESS.SAL = ProcessLayer("Self-aligned silicide","SAL")
-TECH.PROCESS.PCON = ProcessLayer("Photonic Contact holes","PCON")
+TECH.PROCESS.NBODY = ProcessLayer("Body N doping", "NBODY")
+TECH.PROCESS.PBODY = ProcessLayer("Body P doping", "PBODY")
+TECH.PROCESS.N1 = ProcessLayer("N-type doping 1", "N1")
+TECH.PROCESS.NPLUS = ProcessLayer("N++ doping", "N2")
+TECH.PROCESS.P1 = ProcessLayer("P-type doping 1", "P1")
+TECH.PROCESS.PPLUS = ProcessLayer("P++ doping", "PPLUS")
+TECH.PROCESS.PP1 = ProcessLayer("Poly P-type doping 1", "PP1")
+TECH.PROCESS.PP2 = ProcessLayer("Poly P-type doping 2", "PP2")
+
+TECH.PROCESS.SAL = ProcessLayer("Self-aligned silicide", "SAL")
+TECH.PROCESS.PCON = ProcessLayer("Photonic Contact holes", "PCON")
 
 # backend
 TECH.PROCESS.POL = ProcessLayer("Polymer backend", "POL")
@@ -58,10 +58,10 @@
 TECH.PROCESS.UCUT = ProcessLayer("Undercut", "UCUT")
 TECH.PROCESS.EXPO = ProcessLayer("Exposure windows", "EXPO")
 # metal
-TECH.PROCESS.MH = ProcessLayer("Metal Heaters" ,"MH")
-TECH.PROCESS.M1 = ProcessLayer("Metallization 1" ,"M1")
-TECH.PROCESS.V12 = ProcessLayer("Matel Via 1-2" ,"V12")
-TECH.PROCESS.M2 = ProcessLayer("Metallization 2" ,"M2")
+TECH.PROCESS.MH = ProcessLayer("Metal Heaters", "MH")
+TECH.PROCESS.M1 = ProcessLayer("Metallization 1", "M1")
+TECH.PROCESS.V12 = ProcessLayer("Matel Via 1-2", "V12")
+TECH.PROCESS.M2 = ProcessLayer("Metallization 2", "M2")
 TECH.PROCESS.PASS = ProcessLayer("Passivation", "PASS")
 TECH.PROCESS.METPASS = ProcessLayer("Passivation", "METPASS")
 
@@ -73,10 +73,10 @@
 TECH.PROCESS.GER = ProcessLayer("Local germanidation", "GER")
 
 # TSV
-TECH.PROCESS.TSV = ProcessLayer("Through Silicon Via","TSV")
+TECH.PROCESS.TSV = ProcessLayer("Through Silicon Via", "TSV")
 TECH.PROCESS.UBUMP = ProcessLayer("Microbumps on Top Wafer for 3D integration", "UBUMP")
 TECH.PROCESS.BBUMP = ProcessLayer("Microbumps on Bottom Wafer for 3D integration", "BBUMP")
-TECH.PROCESS.M2B = ProcessLayer("Metallization 2 Bottom wafer" ,"M2B")
+TECH.PROCESS.M2B = ProcessLayer("Metallization 2 Bottom wafer", "M2B")
 
 # Clearout
 TECH.PROCESS.IPCO = ProcessLayer("IP Clearout windows", "IPCO")
@@ -87,17 +87,17 @@
 TECH.PROCESS.HFW = ProcessLayer("HF Substrate removal windows", "HFW")
 TECH.PROCESS.VGW = ProcessLayer("V-groove windows", "VGW")
 TECH.PROCESS.CO = ProcessLayer("Clear out windows", "CO")
-TECH.PROCESS.MC1 = ProcessLayer("Lift-off contact holes 1","MC1")
-TECH.PROCESS.MC2 = ProcessLayer("Lift-off contact holes 2","MC2")
-TECH.PROCESS.MP1 = ProcessLayer("Metal Plating 1" ,"MP1")
-TECH.PROCESS.MP2= ProcessLayer("Metal Plating 2" ,"MP2")
+TECH.PROCESS.MC1 = ProcessLayer("Lift-off contact holes 1", "MC1")
+TECH.PROCESS.MC2 = ProcessLayer("Lift-off contact holes 2", "MC2")
+TECH.PROCESS.MP1 = ProcessLayer("Metal Plating 1", "MP1")
+TECH.PROCESS.MP2= ProcessLayer("Metal Plating 2", "MP2")
 TECH.PROCESS.FC2 = ProcessLayer("Fiber Couplers 2", "FC2")
 TECH.PROCESS.WG2 = ProcessLayer("Waveguides 2", "WG2")
 TECH.PROCESS.VO1 = ProcessLayer("Optical via 1", "VO1")
 TECH.PROCESS.GW1 = ProcessLayer("Generic Windows 1", "GW1")
 TECH.PROCESS.GW2 = ProcessLayer("Generic Windows 2", "GW2")
 TECH.PROCESS.GW3 = ProcessLayer("Generic Windows 3", "GW3")
-TECH.PROCESS.XW = ProcessLayer("Various windows, grouping of GW1, FCW, HFW,...","XW")
+TECH.PROCESS.XW = ProcessLayer("Various windows, grouping of GW1, FCW, HFW,...", "XW")
 
 # contact masks
 TECH.PROCESS.CONT1 = ProcessLayer("Contact mask 1", "CONT1")
@@ -113,8 +113,8 @@
 TECH.PROCESS.CA = ProcessLayer("Contact Litho Alignment", "CA")
 
 # purposes
-TECH.PURPOSE.VERBBOX = PatternPurpose("VERBBOX","VB")
-TECH.PURPOSE.VERPORT = PatternPurpose("VERPORT","VP")
+TECH.PURPOSE.VERBBOX = PatternPurpose("VERBBOX", "VB")
+TECH.PURPOSE.VERPORT = PatternPurpose("VERPORT", "VP")
 
 ####################################################################
 # MASK LAYER RULES
@@ -182,16 +182,16 @@
                   ]
     
         for process in process_display_order:
-            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA),DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF_AREA) , DISPLAY_INVERSION),
-                          (PPLayer(process, TECH.PURPOSE.DF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.MARKER) , DISPLAY_ALIGNMENT),
-                          (PPLayer(process, TECH.PURPOSE.LF.LINE) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND) , DISPLAY_DF),
-                          (PPLayer(process, TECH.PURPOSE.DF.TEXT) , DISPLAY_TEXT),
-                          (PPLayer(process, TECH.PURPOSE.DF.HOLE) , DISPLAY_HOLE),
+            style_set += [(PPLayer(process, TECH.PURPOSE.LF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF_AREA), DISPLAY_INVERSION),
+                          (PPLayer(process, TECH.PURPOSE.DF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.MARKER), DISPLAY_ALIGNMENT),
+                          (PPLayer(process, TECH.PURPOSE.LF.LINE), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.LF.ISLAND), DISPLAY_DF),
+                          (PPLayer(process, TECH.PURPOSE.DF.TEXT), DISPLAY_TEXT),
+                          (PPLayer(process, TECH.PURPOSE.DF.HOLE), DISPLAY_HOLE),
                           (PPLayer(process, TECH.PURPOSE.DF.TRENCH), DISPLAY_LF),
-                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE) , DISPLAY_HOLE),
+                          (PPLayer(process, TECH.PURPOSE.DF.SQUARE), DISPLAY_HOLE),
                           ]
         
         self.PREDEFINED_STYLE_SETS.PURPOSE_HIGHLIGHT  = style_set
--- ipkiss24\technologies\si_photonics\picazzo\standard_fibcoup.py	(original)
+++ ipkiss24\technologies\si_photonics\picazzo\standard_fibcoup.py	(refactored)
@@ -43,7 +43,7 @@
             std1550_grating_n_o_periods = 25
             std_lin_grating_wg_def = WgElDefinition(wg_width = 10.0)
             G = _ULG(name = "std_grating_1550",
-                     origin = (0.0,0.0),
+                     origin = (0.0, 0.0),
                      period = std1550_grating_period, 
                      line_width = std1550_grating_trench, 
                      n_o_periods = std1550_grating_n_o_periods, 
@@ -60,7 +60,7 @@
             std1550_grating_n_o_periods = 16
             std_lin_grating_wg_def = WgElDefinition(wg_width = 10.0)
             G = _ULG(name = "std_grating_1550_tm",
-                     origin = (0.0,0.0),
+                     origin = (0.0, 0.0),
                      period = std1550_grating_period, 
                      line_width = std1550_grating_trench, 
                      n_o_periods = std1550_grating_n_o_periods, 
@@ -94,7 +94,7 @@
         
         try:
             self.DEFAULT_2D_GRATING = STANDARD_2DGRATING_1550_TE()
-        except Exception, exc:
+        except Exception as exc:
             LOG.warn("TECH.IO.FIBCOUP.DEFAULT_2D_GRATING will not be set : "+str(exc))
         
 TECH.IO.FIBCOUP = TechFibcoupTree()
--- ipkiss24\technologies\si_photonics\picazzo\default\__init__.py	(original)RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\default\__init__.py to ipkissat3\technologies\si_photonics\picazzo\default\__init__.py.
RefactoringTool: Refactored ipkiss24\technologies\si_photonics\picazzo\default\agnostic.py

+++ ipkiss24\technologies\si_photonics\picazzo\default\__init__.py	(refactored)
@@ -20,7 +20,7 @@
 # Contact: ipkiss@intec.ugent.be
 
 from ...ipkiss.default import *
-from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree,DelayedInitTechnologyTree
+from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
 
 
--- ipkiss24\technologies\si_photonics\picazzo\default\agnostic.py	(original)
+++ ipkiss24\technologies\si_photonics\picazzo\default\agnostic.py	(refactored)
@@ -21,7 +21,7 @@
 
 from ipkiss.technology.technology import TechnologyLibrary, TechnologyTree, DelayedInitTechnologyTree
 from ipkiss.technology import get_technology
-from ipkiss.io.gds_layer import GdsiiLayerInputMap,GdsiiLayerOutputMap
+from ipkiss.io.gds_layer import GdsiiLayerInputMap, GdsiiLayerOutputMap
 from ipkiss.process.layer import PPLayer as PPLayer
 
 TECH = get_technology()
@@ -39,13 +39,13 @@
 TECH.PPLAYER.RFC = TechnologyTree()
 
 ### WG ###
-TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_TRE")
-TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TRENCH,name="WG_SQ")
-TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.HOLE,name="WG_HEX")
-TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.MARKER,name="WG_MRK")
-TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.DF.TEXT,name="WG_TXT")
-TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF.LINE,name="WG_LIN")
-TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG,TECH.PURPOSE.LF_AREA,name="WG_LFAREA")
+TECH.PPLAYER.WG.TRENCH = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_TRE")
+TECH.PPLAYER.WG.SQUARE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TRENCH, name="WG_SQ")
+TECH.PPLAYER.WG.HOLE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.HOLE, name="WG_HEX")
+TECH.PPLAYER.WG.MARKER = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.MARKER, name="WG_MRK")
+TECH.PPLAYER.WG.TEXT = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.DF.TEXT, name="WG_TXT")
+TECH.PPLAYER.WG.LINE = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF.LINE, name="WG_LIN")
+TECH.PPLAYER.WG.LF_AREA = PPLayer(TECH.PROCESS.WG, TECH.PURPOSE.LF_AREA, name="WG_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.WG.CRITICAL = TECH.PPLAYER.WG.TRENCH | TECH.PPLAYER.WG.SQUARE | TECH.PPLAYER.WG.HOLE | TECH.PPLAYER.WG.MARKER | (TECH.PPLAYER.WG.LINE ^ TECH.PPLAYER.WG.LF_AREA) & TECH.PPLAYER.WG.LF_AREA
@@ -57,13 +57,13 @@
 TECH.PPLAYER.WG.ALL = TECH.PPLAYER.WG.CRITICAL | TECH.PPLAYER.WG.NONCRITICAL
 
 ### FC ###
-TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_TRE")
-TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TRENCH,name="FC_SQ")
-TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.HOLE,name="FC_HEX")
-TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.MARKER,name="FC_MRK")
-TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.DF.TEXT,name="FC_TXT")
-TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF.LINE,name="FC_LIN")
-TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC,TECH.PURPOSE.LF_AREA,name="FC_LFAREA")
+TECH.PPLAYER.FC.TRENCH = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_TRE")
+TECH.PPLAYER.FC.SQUARE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TRENCH, name="FC_SQ")
+TECH.PPLAYER.FC.HOLE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.HOLE, name="FC_HEX")
+TECH.PPLAYER.FC.MARKER = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.MARKER, name="FC_MRK")
+TECH.PPLAYER.FC.TEXT = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.DF.TEXT, name="FC_TXT")
+TECH.PPLAYER.FC.LINE = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF.LINE, name="FC_LIN")
+TECH.PPLAYER.FC.LF_AREA = PPLayer(TECH.PROCESS.FC, TECH.PURPOSE.LF_AREA, name="FC_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.FC.CRITICAL = TECH.PPLAYER.FC.TRENCH | TECH.PPLAYER.FC.SQUARE | TECH.PPLAYER.FC.HOLE | (TECH.PPLAYER.FC.LINE ^ TECH.PPLAYER.FC.LF_AREA) & TECH.PPLAYER.FC.LF_AREA
@@ -75,13 +75,13 @@
 TECH.PPLAYER.FC.ALL = TECH.PPLAYER.FC.CRITICAL | TECH.PPLAYER.FC.NONCRITICAL
 
 ### RFC ###
-TECH.PPLAYER.RFC.TRENCH = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.DF.TRENCH,name="RFC_TRE")
-TECH.PPLAYER.RFC.SQUARE = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.DF.SQUARE,name="RFC_SQ")
-TECH.PPLAYER.RFC.HOLE = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.DF.HOLE,name="RFC_HEX")
-TECH.PPLAYER.RFC.MARKER = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.DF.MARKER,name="RFC_MRK")
-TECH.PPLAYER.RFC.TEXT = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.DF.TEXT,name="RFC_TXT")
-TECH.PPLAYER.RFC.LINE = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.LF.LINE,name="RFC_LIN")
-TECH.PPLAYER.RFC.LF_AREA = PPLayer(TECH.PROCESS.RFC,TECH.PURPOSE.LF_AREA,name="RFC_LFAREA")
+TECH.PPLAYER.RFC.TRENCH = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.DF.TRENCH, name="RFC_TRE")
+TECH.PPLAYER.RFC.SQUARE = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.DF.SQUARE, name="RFC_SQ")
+TECH.PPLAYER.RFC.HOLE = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.DF.HOLE, name="RFC_HEX")
+TECH.PPLAYER.RFC.MARKER = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.DF.MARKER, name="RFC_MRK")
+TECH.PPLAYER.RFC.TEXT = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.DF.TEXT, name="RFC_TXT")
+TECH.PPLAYER.RFC.LINE = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.LF.LINE, name="RFC_LIN")
+TECH.PPLAYER.RFC.LF_AREA = PPLayer(TECH.PROCESS.RFC, TECH.PURPOSE.LF_AREA, name="RFC_LFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.RFC.CRITICAL = TECH.PPLAYER.RFC.TRENCH | TECH.PPLAYER.RFC.SQUARE | TECH.PPLAYER.RFC.HOLE | (TECH.PPLAYER.RFC.LINE ^ TECH.PPLAYER.RFC.LF_AREA) & TECH.PPLAYER.RFC.LF_AREA
@@ -93,11 +93,11 @@
 TECH.PPLAYER.RFC.ALL = TECH.PPLAYER.RFC.CRITICAL | TECH.PPLAYER.RFC.NONCRITICAL        \
 
  ### FCW ###
-TECH.PPLAYER.FCW.TRENCH = PPLayer(TECH.PROCESS.FCW,TECH.PURPOSE.DF.TRENCH,name="FCW_TRE")
-TECH.PPLAYER.FCW.MARKER = PPLayer(TECH.PROCESS.FCW,TECH.PURPOSE.LF.MARKER,name="FCW_MRK")
-TECH.PPLAYER.FCW.TEXT = PPLayer(TECH.PROCESS.FCW,TECH.PURPOSE.LF.TEXT,name="FCW_TXT")
-TECH.PPLAYER.FCW.LINE = PPLayer(TECH.PROCESS.FCW,TECH.PURPOSE.LF.LINE,name="FCW_LIN")
-TECH.PPLAYER.FCW.DF_AREA = PPLayer(TECH.PROCESS.FCW,TECH.PURPOSE.DF_AREA,name="FCW_DFAREA")
+TECH.PPLAYER.FCW.TRENCH = PPLayer(TECH.PROCESS.FCW, TECH.PURPOSE.DF.TRENCH, name="FCW_TRE")
+TECH.PPLAYER.FCW.MARKER = PPLayer(TECH.PROCESS.FCW, TECH.PURPOSE.LF.MARKER, name="FCW_MRK")
+TECH.PPLAYER.FCW.TEXT = PPLayer(TECH.PROCESS.FCW, TECH.PURPOSE.LF.TEXT, name="FCW_TXT")
+TECH.PPLAYER.FCW.LINE = PPLayer(TECH.PROCESS.FCW, TECH.PURPOSE.LF.LINE, name="FCW_LIN")
+TECH.PPLAYER.FCW.DF_AREA = PPLayer(TECH.PROCESS.FCW, TECH.PURPOSE.DF_AREA, name="FCW_DFAREA")
 
 # generated layers, not to be used to draw on
 TECH.PPLAYER.FCW.CRITICAL = TECH.PPLAYER.FCW.LINE | (TECH.PPLAYER.FCW.TRENCH ^ TECH.PPLAYER.FCW.DF_AREA) & TECH.PPLAYER.FCW.DF_AREA
@@ -116,33 +116,33 @@
         TECH.PROCESS.FCW: 2,
         TECH.PROCESS.FC: 3,
         TECH.PROCESS.WG: 4,
-        TECH.PROCESS.NT : 5,
-        TECH.PROCESS.EBW : 6,
-        TECH.PROCESS.HFW : 7,
-        TECH.PROCESS.VGW : 8,
-        TECH.PROCESS.CO : 9,
-        TECH.PROCESS.P1 : 20,
-        TECH.PROCESS.PPLUS : 21,
-        TECH.PROCESS.N1 : 23,
-        TECH.PROCESS.NPLUS : 24,
-        TECH.PROCESS.SAL : 29,
-        TECH.PROCESS.MC1 : 31,
-        TECH.PROCESS.MC2 : 32,
-        TECH.PROCESS.MH : 35,
-        TECH.PROCESS.M1 : 41,
-        TECH.PROCESS.V12 : 42,
-        TECH.PROCESS.M2 : 43,
-        TECH.PROCESS.MP1 : 33,
+        TECH.PROCESS.NT: 5,
+        TECH.PROCESS.EBW: 6,
+        TECH.PROCESS.HFW: 7,
+        TECH.PROCESS.VGW: 8,
+        TECH.PROCESS.CO: 9,
+        TECH.PROCESS.P1: 20,
+        TECH.PROCESS.PPLUS: 21,
+        TECH.PROCESS.N1: 23,
+        TECH.PROCESS.NPLUS: 24,
+        TECH.PROCESS.SAL: 29,
+        TECH.PROCESS.MC1: 31,
+        TECH.PROCESS.MC2: 32,
+        TECH.PROCESS.MH: 35,
+        TECH.PROCESS.M1: 41,
+        TECH.PROCESS.V12: 42,
+        TECH.PROCESS.M2: 43,
+        TECH.PROCESS.MP1: 33,RefactoringTool: Writing converted ipkiss24\technologies\si_photonics\picazzo\default\agnostic.py to ipkissat3\technologies\si_photonics\picazzo\default\agnostic.py.
RefactoringTool: Files that were modified:
RefactoringTool: ipkiss24\dependencies\__init__.py
RefactoringTool: ipkiss24\dependencies\bitarray_wrapper.py
RefactoringTool: ipkiss24\dependencies\caphe_wrapper.py
RefactoringTool: ipkiss24\dependencies\log.py
RefactoringTool: ipkiss24\dependencies\matplotlib_wrapper.py
RefactoringTool: ipkiss24\dependencies\mayavi_wrapper.py
RefactoringTool: ipkiss24\dependencies\meep_wrapper.py
RefactoringTool: ipkiss24\dependencies\pil_wrapper.py
RefactoringTool: ipkiss24\dependencies\povray_wrapper.py
RefactoringTool: ipkiss24\dependencies\shapely_wrapper.py
RefactoringTool: ipkiss24\dependencies\tvtk_wrapper.py
RefactoringTool: ipkiss24\descartes\__init__.py
RefactoringTool: ipkiss24\descartes\patch.py
RefactoringTool: ipkiss24\genericpdk\__init__.py
RefactoringTool: ipkiss24\genericpdk\library\__init__.py
RefactoringTool: ipkiss24\genericpdk\library\fibcoup.py
RefactoringTool: ipkiss24\genericpdk\library\logos.py
RefactoringTool: ipkiss24\genericpdk\library\constants\__init__.py
RefactoringTool: ipkiss24\genericpdk\library\constants\mathematics.py
RefactoringTool: ipkiss24\genericpdk\library\constants\physical.py
RefactoringTool: ipkiss24\genericpdk\library\constants\units.py
RefactoringTool: ipkiss24\genericpdk\library\io\__init__.py
RefactoringTool: ipkiss24\genericpdk\library\io\column.py
RefactoringTool: ipkiss24\genericpdk\library\io\constants.py
RefactoringTool: ipkiss24\genericpdk\materials\__init__.py
RefactoringTool: ipkiss24\genericpdk\materials\materials.py
RefactoringTool: ipkiss24\ipcore\__init__.py
RefactoringTool: ipkiss24\ipcore\all.py
RefactoringTool: ipkiss24\ipcore\helperfunc.py
RefactoringTool: ipkiss24\ipcore\log.py
RefactoringTool: ipkiss24\ipcore\settings.py
RefactoringTool: ipkiss24\ipcore\types_list.py
RefactoringTool: ipkiss24\ipcore\caching\__init__.py
RefactoringTool: ipkiss24\ipcore\caching\cache.py
RefactoringTool: ipkiss24\ipcore\config\__init__.py
RefactoringTool: ipkiss24\ipcore\config\tree.py
RefactoringTool: ipkiss24\ipcore\exceptions\__init__.py
RefactoringTool: ipkiss24\ipcore\exceptions\exc.py
RefactoringTool: ipkiss24\ipcore\mixin\__init__.py
RefactoringTool: ipkiss24\ipcore\mixin\mixin.py
RefactoringTool: ipkiss24\ipcore\properties\__init__.py
RefactoringTool: ipkiss24\ipcore\properties\descriptor.py
RefactoringTool: ipkiss24\ipcore\properties\initializer.py
RefactoringTool: ipkiss24\ipcore\properties\predefined.py
RefactoringTool: ipkiss24\ipcore\properties\processors.py
RefactoringTool: ipkiss24\ipcore\properties\restrictions.py
RefactoringTool: ipkiss24\ipcore\runtime\__init__.py
RefactoringTool: ipkiss24\ipcore\runtime\procedure.py
RefactoringTool: ipkiss24\ipcore\runtime\processor.py
RefactoringTool: ipkiss24\ipkiss\__init__.py
RefactoringTool: ipkiss24\ipkiss\all.py
RefactoringTool: ipkiss24\ipkiss\constants.py
RefactoringTool: ipkiss24\ipkiss\log.py
RefactoringTool: ipkiss24\ipkiss\settings.py
RefactoringTool: ipkiss24\ipkiss\aspects\__init__.py
RefactoringTool: ipkiss24\ipkiss\aspects\aspect.py
RefactoringTool: ipkiss24\ipkiss\aspects\layout\__init__.py
RefactoringTool: ipkiss24\ipkiss\aspects\layout\layout.py
RefactoringTool: ipkiss24\ipkiss\aspects\output\__init__.py
RefactoringTool: ipkiss24\ipkiss\aspects\output\output.py
RefactoringTool: ipkiss24\ipkiss\aspects\port\__init__.py
RefactoringTool: ipkiss24\ipkiss\aspects\port\aspect.py
RefactoringTool: ipkiss24\ipkiss\aspects\port\port.py
RefactoringTool: ipkiss24\ipkiss\aspects\port\port_list.py
RefactoringTool: ipkiss24\ipkiss\boolean_ops\__init__.py
RefactoringTool: ipkiss24\ipkiss\boolean_ops\boolean_ops.py
RefactoringTool: ipkiss24\ipkiss\boolean_ops\boolean_ops_elements.py
RefactoringTool: ipkiss24\ipkiss\boolean_ops\boolean_ops_shapely.py
RefactoringTool: ipkiss24\ipkiss\exceptions\__init__.py
RefactoringTool: ipkiss24\ipkiss\exceptions\exc.py
RefactoringTool: ipkiss24\ipkiss\geometry\__init__.py
RefactoringTool: ipkiss24\ipkiss\geometry\coord.py
RefactoringTool: ipkiss24\ipkiss\geometry\line.py
RefactoringTool: ipkiss24\ipkiss\geometry\shape.py
RefactoringTool: ipkiss24\ipkiss\geometry\shape_cut.py
RefactoringTool: ipkiss24\ipkiss\geometry\shape_info.py
RefactoringTool: ipkiss24\ipkiss\geometry\shape_modifier.py
RefactoringTool: ipkiss24\ipkiss\geometry\shape_modify.py
RefactoringTool: ipkiss24\ipkiss\geometry\size_info.py
RefactoringTool: ipkiss24\ipkiss\geometry\transform.py
RefactoringTool: ipkiss24\ipkiss\geometry\transformable.py
RefactoringTool: ipkiss24\ipkiss\geometry\vector.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\__init__.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\advanced.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\basic.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\curves.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\modifiers.py
RefactoringTool: ipkiss24\ipkiss\geometry\shapes\spline.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\__init__.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\identity.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\magnification.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\mirror.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\no_distort.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\rotation.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\special.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\stretch.py
RefactoringTool: ipkiss24\ipkiss\geometry\transforms\translation.py
RefactoringTool: ipkiss24\ipkiss\io\__init__.py
RefactoringTool: ipkiss24\ipkiss\io\collector.py
RefactoringTool: ipkiss24\ipkiss\io\file_io.py
RefactoringTool: ipkiss24\ipkiss\io\filetype.py
RefactoringTool: ipkiss24\ipkiss\io\gds_layer.py
RefactoringTool: ipkiss24\ipkiss\io\gds_records.py
RefactoringTool: ipkiss24\ipkiss\io\import_hpgl.py
RefactoringTool: ipkiss24\ipkiss\io\input.py
RefactoringTool: ipkiss24\ipkiss\io\input_gdsii.py
RefactoringTool: ipkiss24\ipkiss\io\output.py
RefactoringTool: ipkiss24\ipkiss\io\output_gdsii.py
RefactoringTool: ipkiss24\ipkiss\io\output_object.py
RefactoringTool: ipkiss24\ipkiss\io\output_xml.py
RefactoringTool: ipkiss24\ipkiss\logos\__init__.py
RefactoringTool: ipkiss24\ipkiss\logos\basic.py
RefactoringTool: ipkiss24\ipkiss\path_definition\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\port\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\port\aspect.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\port\port.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\port\port_list.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\basic.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\bundle_connect.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\connect.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\manhattan.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\routing\to_line.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\technology\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\technology\common.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\technology\default\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\technology\default\agnostic.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\basic.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\bundle.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\connect.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\definition.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\slotted.py
RefactoringTool: ipkiss24\ipkiss\plugins\photonics\wg\window.py
RefactoringTool: ipkiss24\ipkiss\plugins\simulation\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\simulation\simulation.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\__init__.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\elements.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\geometry.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\process_flow.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\vfabrication.py
RefactoringTool: ipkiss24\ipkiss\plugins\vfabrication\visualization.py
RefactoringTool: ipkiss24\ipkiss\primitives\__init__.py
RefactoringTool: ipkiss24\ipkiss\primitives\filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\font.py
RefactoringTool: ipkiss24\ipkiss\primitives\group.py
RefactoringTool: ipkiss24\ipkiss\primitives\layer.py
RefactoringTool: ipkiss24\ipkiss\primitives\library.py
RefactoringTool: ipkiss24\ipkiss\primitives\name_generator.py
RefactoringTool: ipkiss24\ipkiss\primitives\shapes_to_elements.py
RefactoringTool: ipkiss24\ipkiss\primitives\structure.py
RefactoringTool: ipkiss24\ipkiss\primitives\unit_grid.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\__init__.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\basic.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\box.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\group.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\reference.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\shape.py
RefactoringTool: ipkiss24\ipkiss\primitives\elements\text.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\__init__.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\boundary_cut_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\empty_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\layer_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\name_scramble_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\orthogonal_reference_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\path_cut_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\filters\path_to_boundary_filter.py
RefactoringTool: ipkiss24\ipkiss\primitives\fonts\__init__.py
RefactoringTool: ipkiss24\ipkiss\primitives\fonts\compact.py
RefactoringTool: ipkiss24\ipkiss\primitives\fonts\simple.py
RefactoringTool: ipkiss24\ipkiss\primitives\fonts\standard.py
RefactoringTool: ipkiss24\ipkiss\process\__init__.py
RefactoringTool: ipkiss24\ipkiss\process\layer.py
RefactoringTool: ipkiss24\ipkiss\process\layer_map.py
RefactoringTool: ipkiss24\ipkiss\technology\__init__.py
RefactoringTool: ipkiss24\ipkiss\technology\rules.py
RefactoringTool: ipkiss24\ipkiss\technology\settings.py
RefactoringTool: ipkiss24\ipkiss\technology\technology.py
RefactoringTool: ipkiss24\ipkiss\visualisation\__init__.py
RefactoringTool: ipkiss24\ipkiss\visualisation\color.py
RefactoringTool: ipkiss24\ipkiss\visualisation\display_style.py
RefactoringTool: ipkiss24\ipkiss\visualisation\layer.py
RefactoringTool: ipkiss24\ipkiss\visualisation\scaler.py
RefactoringTool: ipkiss24\ipkiss\visualisation\show.py
RefactoringTool: ipkiss24\ipkiss\visualisation\stipple.py
RefactoringTool: ipkiss24\ipkiss\visualisation\manager\__init__.py
RefactoringTool: ipkiss24\ipkiss\visualisation\manager\basic.py
RefactoringTool: ipkiss24\ipkiss\visualisation\manager\matplotlib_figure.py
RefactoringTool: ipkiss24\ipkiss\visualisation\manager\tvtk_polydata.py
RefactoringTool: ipkiss24\picazzo\__init__.py
RefactoringTool: ipkiss24\picazzo\builder.py
RefactoringTool: ipkiss24\picazzo\log.py
RefactoringTool: ipkiss24\picazzo\settings.py
RefactoringTool: ipkiss24\picazzo\container\__init__.py
RefactoringTool: ipkiss24\picazzo\container\auto_taper_ports.py
RefactoringTool: ipkiss24\picazzo\container\container.py
RefactoringTool: ipkiss24\picazzo\container\extend_ports.py
RefactoringTool: ipkiss24\picazzo\container\fanout.py
RefactoringTool: ipkiss24\picazzo\container\route_ports.py
RefactoringTool: ipkiss24\picazzo\container\suppress_ports.py
RefactoringTool: ipkiss24\picazzo\container\taper_ports.py
RefactoringTool: ipkiss24\picazzo\fibcoup\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\basic\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\basic\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\cleave\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\cleave\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\curved\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\curved\curved_basic.py
RefactoringTool: ipkiss24\picazzo\fibcoup\curved\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\grating\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\grating\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\inverted_taper\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\inverted_taper\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\line_grating\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\line_grating\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\segmented\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\segmented\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\socket\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\socket\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\socket_2d\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\socket_2d\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\uniform\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\uniform\layout.py
RefactoringTool: ipkiss24\picazzo\fibcoup\uniform_2d\__init__.py
RefactoringTool: ipkiss24\picazzo\fibcoup\uniform_2d\layout.py
RefactoringTool: ipkiss24\picazzo\filters\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\mmi\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\mmi\layout.py
RefactoringTool: ipkiss24\picazzo\filters\mmi_shallow\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\mmi_shallow\layout.py
RefactoringTool: ipkiss24\picazzo\filters\multi_ring\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\multi_ring\layout.py
RefactoringTool: ipkiss24\picazzo\filters\multi_ring\multi_ring_base.py
RefactoringTool: ipkiss24\picazzo\filters\mzi\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\mzi\layout.py
RefactoringTool: ipkiss24\picazzo\filters\parallel_ring\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\parallel_ring\layout.py
RefactoringTool: ipkiss24\picazzo\filters\ring\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\ring\layout.py
RefactoringTool: ipkiss24\picazzo\filters\ring_ccw\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\ring_ccw\layout.py
RefactoringTool: ipkiss24\picazzo\filters\ring_xing\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\ring_xing\layout.py
RefactoringTool: ipkiss24\picazzo\filters\spline_ring\__init__.py
RefactoringTool: ipkiss24\picazzo\filters\spline_ring\layout.py
RefactoringTool: ipkiss24\picazzo\io\__init__.py
RefactoringTool: ipkiss24\picazzo\io\adapter.py
RefactoringTool: ipkiss24\picazzo\io\block.py
RefactoringTool: ipkiss24\picazzo\io\column.py
RefactoringTool: ipkiss24\picazzo\io\block_structure\__init__.py
RefactoringTool: ipkiss24\picazzo\io\block_structure\layout.py
RefactoringTool: ipkiss24\picazzo\io\cleave\__init__.py
RefactoringTool: ipkiss24\picazzo\io\cleave\layout.py
RefactoringTool: ipkiss24\picazzo\io\column_set\__init__.py
RefactoringTool: ipkiss24\picazzo\io\column_set\layout.py
RefactoringTool: ipkiss24\picazzo\io\fibcoup\__init__.py
RefactoringTool: ipkiss24\picazzo\io\fibcoup\layout.py
RefactoringTool: ipkiss24\picazzo\io\fibcoup_2d\__init__.py
RefactoringTool: ipkiss24\picazzo\io\fibcoup_2d\layout.py
RefactoringTool: ipkiss24\picazzo\io\io_array\__init__.py
RefactoringTool: ipkiss24\picazzo\io\io_array\layout.py
RefactoringTool: ipkiss24\picazzo\markers\__init__.py
RefactoringTool: ipkiss24\picazzo\markers\file_marker.py
RefactoringTool: ipkiss24\picazzo\markers\marker.py
RefactoringTool: ipkiss24\picazzo\markers\vernier.py
RefactoringTool: ipkiss24\picazzo\phc\__init__.py
RefactoringTool: ipkiss24\picazzo\phc\hetero.py
RefactoringTool: ipkiss24\picazzo\phc\holes.py
RefactoringTool: ipkiss24\picazzo\phc\layout.py
RefactoringTool: ipkiss24\picazzo\phc\w1.py
RefactoringTool: ipkiss24\picazzo\process\__init__.py
RefactoringTool: ipkiss24\picazzo\slab\__init__.py
RefactoringTool: ipkiss24\picazzo\slab\aperture_mounting.py
RefactoringTool: ipkiss24\picazzo\slab\star_coupler.py
RefactoringTool: ipkiss24\picazzo\tools\__init__.py
RefactoringTool: ipkiss24\picazzo\tools\import_layout.py
RefactoringTool: ipkiss24\picazzo\tools\view_2d.py
RefactoringTool: ipkiss24\picazzo\wg\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\aperture\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\aperture\layout.py
RefactoringTool: ipkiss24\picazzo\wg\aperture_multi\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\aperture_multi\layout.py
RefactoringTool: ipkiss24\picazzo\wg\bend\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\bend\layout.py
RefactoringTool: ipkiss24\picazzo\wg\coupler\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\coupler\layout.py
RefactoringTool: ipkiss24\picazzo\wg\crossing\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\crossing\layout.py
RefactoringTool: ipkiss24\picazzo\wg\grating\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\grating\layout.py
RefactoringTool: ipkiss24\picazzo\wg\sbend\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\sbend\layout.py
RefactoringTool: ipkiss24\picazzo\wg\spiral\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\spiral\layout.py
RefactoringTool: ipkiss24\picazzo\wg\spline_coupler\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\spline_coupler\layout.py
RefactoringTool: ipkiss24\picazzo\wg\splitter_tree\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\splitter_tree\layout.py
RefactoringTool: ipkiss24\picazzo\wg\splitters\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\splitters\layout.py
RefactoringTool: ipkiss24\picazzo\wg\taper\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\taper\layout.py
RefactoringTool: ipkiss24\picazzo\wg\taper_extended\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\taper_extended\layout.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\auto_taper\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\auto_taper\auto_taper_db.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\basic\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\basic\layout.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\deep_shallow\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\deep_shallow\layout.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\linear\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\linear\layout.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\parabolic\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\tapers\parabolic\layout.py
RefactoringTool: ipkiss24\picazzo\wg\wgdef\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\wgdef\wgdef.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\slot\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\slot\tapers.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\slot\wgdef.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\thin\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\thin\tapers.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\thin\wgdef.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\wg_fc\__init__.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\wg_fc\tapers.py
RefactoringTool: ipkiss24\picazzo\wg\wgdefs\wg_fc\wgdef.py
RefactoringTool: ipkiss24\pysics\__init__.py
RefactoringTool: ipkiss24\pysics\basics\__init__.py
RefactoringTool: ipkiss24\pysics\basics\domain.py
RefactoringTool: ipkiss24\pysics\basics\environment.py
RefactoringTool: ipkiss24\pysics\basics\field.py
RefactoringTool: ipkiss24\pysics\basics\field_profile.py
RefactoringTool: ipkiss24\pysics\basics\waveguide.py
RefactoringTool: ipkiss24\pysics\basics\geometry\__init__.py
RefactoringTool: ipkiss24\pysics\basics\geometry\geometry.py
RefactoringTool: ipkiss24\pysics\basics\geometry\image.py
RefactoringTool: ipkiss24\pysics\basics\geometry\material_stack.py
RefactoringTool: ipkiss24\pysics\basics\material\__init__.py
RefactoringTool: ipkiss24\pysics\basics\material\material.py
RefactoringTool: ipkiss24\pysics\basics\material\material_stack.py
RefactoringTool: ipkiss24\pysics\electromagnetics\__init__.py
RefactoringTool: ipkiss24\pysics\electromagnetics\environment.py
RefactoringTool: ipkiss24\pysics\electromagnetics\field.py
RefactoringTool: ipkiss24\pysics\electromagnetics\field_profile.py
RefactoringTool: ipkiss24\pysics\electromagnetics\material.py
RefactoringTool: ipkiss24\pysics\materials\__init__.py
RefactoringTool: ipkiss24\pysics\materials\all.py
RefactoringTool: ipkiss24\pysics\materials\electromagnetics.py
RefactoringTool: ipkiss24\pysics\optics\__init__.py
RefactoringTool: ipkiss24\pysics\optics\environment.py
RefactoringTool: ipkiss24\pysics\optics\material.py
RefactoringTool: ipkiss24\pysics\optics\waveguide.py
RefactoringTool: ipkiss24\pysics\thermal\__init__.py
RefactoringTool: ipkiss24\pysics\thermal\environment.py
RefactoringTool: ipkiss24\pysics\thermal\field.py
RefactoringTool: ipkiss24\pysics\visualisation\__init__.py
RefactoringTool: ipkiss24\pysics\visualisation\geometry\__init__.py
RefactoringTool: ipkiss24\pysics\visualisation\geometry\material_stack.py
RefactoringTool: ipkiss24\pysimul\__init__.py
RefactoringTool: ipkiss24\pysimul\exc.py
RefactoringTool: ipkiss24\pysimul\log.py
RefactoringTool: ipkiss24\pysimul\settings.py
RefactoringTool: ipkiss24\pysimul\integration\__init__.py
RefactoringTool: ipkiss24\pysimul\integration\camfr_integration.py
RefactoringTool: ipkiss24\pysimul\integration\component_integration.py
RefactoringTool: ipkiss24\pysimul\runtime\__init__.py
RefactoringTool: ipkiss24\pysimul\runtime\animation.py
RefactoringTool: ipkiss24\pysimul\runtime\basic.py
RefactoringTool: ipkiss24\pysimul\runtime\definition.py
RefactoringTool: ipkiss24\pysimul\runtime\engine.py
RefactoringTool: ipkiss24\pysimul\runtime\params.py
RefactoringTool: ipkiss24\pysimul\runtime\procedure.py
RefactoringTool: ipkiss24\pysimul\runtime\processor.py
RefactoringTool: ipkiss24\pysimul\runtime\simulate_from_file.py
RefactoringTool: ipkiss24\pysimul\runtime\MeepFDTD\MeepFDTD.py
RefactoringTool: ipkiss24\pysimul\runtime\MeepFDTD\__init__.py
RefactoringTool: ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter.py
RefactoringTool: ipkiss24\pysimul\runtime\MeepFDTD\meep_scripter_runtime.py
RefactoringTool: ipkiss24\pysimul\runtime\camfr_engine\__init__.py
RefactoringTool: ipkiss24\pysimul\runtime\camfr_engine\camfr_engine.py
RefactoringTool: ipkiss24\pysimul\visualization\__init__.py
RefactoringTool: ipkiss24\pysimul\visualization\visualization.py
RefactoringTool: ipkiss24\samples\__init__.py
RefactoringTool: ipkiss24\samples\ipkiss\__init__.py
RefactoringTool: ipkiss24\samples\ipkiss\array_of_rings.py
RefactoringTool: ipkiss24\samples\ipkiss\boolean_ops_shape.py
RefactoringTool: ipkiss24\samples\ipkiss\elements.py
RefactoringTool: ipkiss24\samples\ipkiss\importLib.py
RefactoringTool: ipkiss24\samples\ipkiss\logos.py
RefactoringTool: ipkiss24\samples\ipkiss\references.py
RefactoringTool: ipkiss24\samples\ipkiss\shapes.py
RefactoringTool: ipkiss24\samples\ipkiss\shapes_advanced.py
RefactoringTool: ipkiss24\samples\ipkiss\simple.py
RefactoringTool: ipkiss24\samples\picazzo\__init__.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\__init__.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\boolean_ops_structure.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example2.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example3.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example3_three_port.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example4.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example4_grating_mmi.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example5.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_PhC.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_contact_mask.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_process_flows_vfabrication.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_tapers_extended.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_visualization1.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_window_waveguides.py
RefactoringTool: ipkiss24\samples\picazzo\advanced\example_window_waveguides_2.py
RefactoringTool: ipkiss24\samples\picazzo\basic\example_grating_mmi.py
RefactoringTool: ipkiss24\samples\picazzo\basic\example_sweep.py
RefactoringTool: ipkiss24\samples\picazzo\basic\example_vfabrication.py
RefactoringTool: ipkiss24\samples\picazzo\basic\example_window_waveguides.py
RefactoringTool: ipkiss24\samples\picazzo\columns_adapters\_01_basic_column\execute.py
RefactoringTool: ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\example_stacking.py
RefactoringTool: ipkiss24\samples\picazzo\columns_adapters\_02_column_stacking\execute.py
RefactoringTool: ipkiss24\samples\picazzo\columns_adapters\_03_column_parameters\execute.py
RefactoringTool: ipkiss24\samples\picazzo\columns_adapters\_04_advanced_adapters\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_01_basic\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_02_suppress_ports\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_03_extend_ports\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_04_taper_ports\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_05_auto_taper_ports\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_06_fanout\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_07_route_ports\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_08_route_east_west\execute.py
RefactoringTool: ipkiss24\samples\picazzo\containers\_09_matrioszka\execute.py
RefactoringTool: ipkiss24\samples\pysimul\__init__.py
RefactoringTool: ipkiss24\samples\pysimul\run_persisted_simul.py
RefactoringTool: ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\mmi_awg.py
RefactoringTool: ipkiss24\samples\pysimul\awg_aperture_camfr_and_fdtd\simulate_aperture.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\ComponentSimulator3D.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\Filters_OL_new.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\OL_wg_def.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\Technology.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\layout.py
RefactoringTool: ipkiss24\samples\pysimul\grating_3D_Meep\simulation.py
RefactoringTool: ipkiss24\samples\pysimul\mmi_camfr\mmi_camfr.py
RefactoringTool: ipkiss24\samples\pysimul\mmi_fdtd\mmi_fdtd.py
RefactoringTool: ipkiss24\samples\pysimul\pysimul_low_level_python_meep\mmi_low_level_python_meep.py
RefactoringTool: ipkiss24\samples\pysimul\ring_fdtd\ring_fdtd.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_01_structure\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_02_technology\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_03_simple_layout\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_04_waveguide_definitions\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_05_ports\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\double_ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_06_hierarchy\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\double_ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_07_routing\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\double_ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_08_inheritance\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\dircoup.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_09_more_routing\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\dircoup.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\ring.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_10_rlmzi\rlmzi.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\dircoup.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_11_generic_mzi\mzi.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\dircoup.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\execute.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\mzi.py
RefactoringTool: ipkiss24\samples\tutorial_rlmzi\module_01_layout\_12_rlmzi_redone\ring.py
RefactoringTool: ipkiss24\technologies\__init__.py
RefactoringTool: ipkiss24\technologies\default_ipkiss\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\ipkiss\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\ipkiss\common.py
RefactoringTool: ipkiss24\technologies\si_photonics\ipkiss\default\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\ipkiss\default\agnostic.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\common.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\display_style.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\standard_fibcoup.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\wgdef.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\default\__init__.py
RefactoringTool: ipkiss24\technologies\si_photonics\picazzo\default\agnostic.py
RefactoringTool: Warnings/messages while refactoring:
RefactoringTool: ### In file ipkiss24\ipkiss\geometry\shape.py ###
RefactoringTool: Line 417: You should use 'operator.mul(sample, dists > 0, axis=0)' here.
RefactoringTool: Line 594: You should use 'operator.mul(self.points, times, 0)' here.
RefactoringTool: Line 599: You should use 'operator.mul(self.points, times, 0)' here.

         TECH.PROCESS.MP2: 34,
-        TECH.PROCESS.FC2 : 13,
-        TECH.PROCESS.WG2 : 14,
-        TECH.PROCESS.VO1 : 15,
-        TECH.PROCESS.CA : 60,
-        TECH.PROCESS.GW1 : 61,
-        TECH.PROCESS.GW2 : 62,
-        TECH.PROCESS.GW3 : 63,
-        TECH.PROCESS.XW : 10,
-        TECH.PROCESS.IPCO : 18,
+        TECH.PROCESS.FC2: 13,
+        TECH.PROCESS.WG2: 14,
+        TECH.PROCESS.VO1: 15,
+        TECH.PROCESS.CA: 60,
+        TECH.PROCESS.GW1: 61,
+        TECH.PROCESS.GW2: 62,
+        TECH.PROCESS.GW3: 63,
+        TECH.PROCESS.XW: 10,
+        TECH.PROCESS.IPCO: 18,
         TECH.PROCESS.PCON: 64,
         TECH.PROCESS.SLOT: 65,
         TECH.PROCESS.GEW: 66,
@@ -163,11 +163,11 @@
       TECH.PURPOSE.LF.DUMMY: 5,
       TECH.PURPOSE.LF_AREA: 9, 
       TECH.PURPOSE.DF_AREA: 10, 
-      TECH.PURPOSE.DF.MARKER : 11,
+      TECH.PURPOSE.DF.MARKER: 11,
       TECH.PURPOSE.DF.HOLE: 12, 
       TECH.PURPOSE.DF.TRENCH: 13,
       TECH.PURPOSE.DF.SQUARE: 14,
-      TECH.PURPOSE.DF.TEXT : 15,
+      TECH.PURPOSE.DF.TEXT: 15,
       TECH.PURPOSE.DF.DUMMY: 16,
       TECH.PURPOSE.NO_GEN: 20,
       TECH.PURPOSE.NO_FILL: 21,
@@ -255,8 +255,8 @@
 TECH.overwrite_allowed.append('MATERIALS')
 TECH.MATERIALS = MaterialFactory()
 
-TECH.MATERIALS.AIR = Material(name = "air",display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
-TECH.MATERIALS.SILICON = Material(name = "silicon",display_style = DisplayStyle(color = COLOR_CYAN))
+TECH.MATERIALS.AIR = Material(name = "air", display_style = DisplayStyle(color = COLOR_GREEN), solid = False)
+TECH.MATERIALS.SILICON = Material(name = "silicon", display_style = DisplayStyle(color = COLOR_CYAN))
 TECH.MATERIALS.SILICON_OXIDE = Material(name = "silicon oxide", display_style = DisplayStyle(color = COLOR_BLUE))
 TECH.MATERIALS.GERMANIUM = Material(name = "germanium", display_style = DisplayStyle(color = COLOR_DARK_GREEN))
 
@@ -268,31 +268,31 @@
 MSTACK_SOI_SILICON_OXIDE_HEIGHT = 0.500
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_AIR = MaterialStack(name = "Air", 
-                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                        (TECH.MATERIALS.AIR,0.380)], 
+                                                    materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                        (TECH.MATERIALS.AIR, 0.380)], 
                                                     display_style = DisplayStyle(color = COLOR_BLUE))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_80nm = MaterialStack(name = "80nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.080),
-                                                                            (TECH.MATERIALS.AIR,0.300)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.080),
+                                                                            (TECH.MATERIALS.AIR, 0.300)], 
                                                         display_style = DisplayStyle(color = COLOR_GREEN))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_150nm = MaterialStack(name = "150nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.150),
-                                                                            (TECH.MATERIALS.AIR,0.230)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.150),
+                                                                            (TECH.MATERIALS.AIR, 0.230)], 
                                                         display_style = DisplayStyle(color = COLOR_YELLOW))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_220nm = MaterialStack(name = "220nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.220),
-                                                                            (TECH.MATERIALS.AIR,0.160)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.220),
+                                                                            (TECH.MATERIALS.AIR, 0.160)], 
                                                         display_style = DisplayStyle(color = COLOR_RED))
 
 TECH.MATERIAL_STACKS.MSTACK_SOI_SI_380nm = MaterialStack(name = "380nm Si", 
-                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE,MSTACK_SOI_SILICON_OXIDE_HEIGHT),
-                                                                            (TECH.MATERIALS.SILICON,0.380)], 
+                                                        materials_heights = [(TECH.MATERIALS.SILICON_OXIDE, MSTACK_SOI_SILICON_OXIDE_HEIGHT),
+                                                                            (TECH.MATERIALS.SILICON, 0.380)], 
                                                         display_style = DisplayStyle(color = COLOR_WHITE))   
 
 TECH.MATERIALS.SILICON.epsilon = 12
